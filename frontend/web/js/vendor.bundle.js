/*! For license information please see vendor.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(t,e,n){var i;!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,(function(n,s){"use strict";var o=[],r=n.document,a=Object.getPrototypeOf,l=o.slice,c=o.concat,u=o.push,h=o.indexOf,d={},p=d.toString,f=d.hasOwnProperty,g=f.toString,m=g.call(Object),v={},y=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},b=function(t){return null!=t&&t===t.window},x={type:!0,src:!0,nonce:!0,noModule:!0};function w(t,e,n){var i,s,o=(n=n||r).createElement("script");if(o.text=t,e)for(i in x)(s=e[i]||e.getAttribute&&e.getAttribute(i))&&o.setAttribute(i,s);n.head.appendChild(o).parentNode.removeChild(o)}function _(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?d[p.call(t)]||"object":typeof t}var C=function(t,e){return new C.fn.init(t,e)},$=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function T(t){var e=!!t&&"length"in t&&t.length,n=_(t);return!y(t)&&!b(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}C.fn=C.prototype={jquery:"3.4.1",constructor:C,length:0,toArray:function(){return l.call(this)},get:function(t){return null==t?l.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=C.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return C.each(this,t)},map:function(t){return this.pushStack(C.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:o.sort,splice:o.splice},C.extend=C.fn.extend=function(){var t,e,n,i,s,o,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||y(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)i=t[e],"__proto__"!==e&&r!==i&&(c&&i&&(C.isPlainObject(i)||(s=Array.isArray(i)))?(n=r[e],o=s&&!Array.isArray(n)?[]:s||C.isPlainObject(n)?n:{},s=!1,r[e]=C.extend(c,o,i)):void 0!==i&&(r[e]=i));return r},C.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==p.call(t))&&(!(e=a(t))||"function"==typeof(n=f.call(e,"constructor")&&e.constructor)&&g.call(n)===m)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e){w(t,{nonce:e&&e.nonce})},each:function(t,e){var n,i=0;if(T(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace($,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(T(Object(t))?C.merge(n,"string"==typeof t?[t]:t):u.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:h.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,s=t.length;i<n;i++)t[s++]=e[i];return t.length=s,t},grep:function(t,e,n){for(var i=[],s=0,o=t.length,r=!n;s<o;s++)!e(t[s],s)!==r&&i.push(t[s]);return i},map:function(t,e,n){var i,s,o=0,r=[];if(T(t))for(i=t.length;o<i;o++)null!=(s=e(t[o],o,n))&&r.push(s);else for(o in t)null!=(s=e(t[o],o,n))&&r.push(s);return c.apply([],r)},guid:1,support:v}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=o[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){d["[object "+e+"]"]=e.toLowerCase()}));var S=function(t){var e,n,i,s,o,r,a,l,c,u,h,d,p,f,g,m,v,y,b,x="sizzle"+1*new Date,w=t.document,_=0,C=0,$=lt(),T=lt(),S=lt(),A=lt(),k=function(t,e){return t===e&&(h=!0),0},E={}.hasOwnProperty,P=[],M=P.pop,F=P.push,D=P.push,L=P.slice,I=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},N="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",z="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",j="\\["+R+"*("+z+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+z+"))|)"+R+"*\\]",H=":("+z+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+j+")*)|.*)\\)|)",q=new RegExp(R+"+","g"),O=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),B=new RegExp("^"+R+"*,"+R+"*"),W=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),Z=new RegExp(R+"|>"),V=new RegExp(H),Y=new RegExp("^"+z+"$"),X={ID:new RegExp("^#("+z+")"),CLASS:new RegExp("^\\.("+z+")"),TAG:new RegExp("^("+z+"|[*])"),ATTR:new RegExp("^"+j),PSEUDO:new RegExp("^"+H),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+N+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},U=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\([\\da-f]{1,6}"+R+"?|("+R+")|.)","ig"),nt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},it=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,st=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},ot=function(){d()},rt=xt((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{D.apply(P=L.call(w.childNodes),w.childNodes),P[w.childNodes.length].nodeType}catch(t){D={apply:P.length?function(t,e){F.apply(t,L.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function at(t,e,i,s){var o,a,c,u,h,f,v,y=e&&e.ownerDocument,_=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==_&&9!==_&&11!==_)return i;if(!s&&((e?e.ownerDocument||e:w)!==p&&d(e),e=e||p,g)){if(11!==_&&(h=Q.exec(t)))if(o=h[1]){if(9===_){if(!(c=e.getElementById(o)))return i;if(c.id===o)return i.push(c),i}else if(y&&(c=y.getElementById(o))&&b(e,c)&&c.id===o)return i.push(c),i}else{if(h[2])return D.apply(i,e.getElementsByTagName(t)),i;if((o=h[3])&&n.getElementsByClassName&&e.getElementsByClassName)return D.apply(i,e.getElementsByClassName(o)),i}if(n.qsa&&!A[t+" "]&&(!m||!m.test(t))&&(1!==_||"object"!==e.nodeName.toLowerCase())){if(v=t,y=e,1===_&&Z.test(t)){for((u=e.getAttribute("id"))?u=u.replace(it,st):e.setAttribute("id",u=x),a=(f=r(t)).length;a--;)f[a]="#"+u+" "+bt(f[a]);v=f.join(","),y=tt.test(t)&&vt(e.parentNode)||e}try{return D.apply(i,y.querySelectorAll(v)),i}catch(e){A(t,!0)}finally{u===x&&e.removeAttribute("id")}}}return l(t.replace(O,"$1"),e,i,s)}function lt(){var t=[];return function e(n,s){return t.push(n+" ")>i.cacheLength&&delete e[t.shift()],e[n+" "]=s}}function ct(t){return t[x]=!0,t}function ut(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ht(t,e){for(var n=t.split("|"),s=n.length;s--;)i.attrHandle[n[s]]=e}function dt(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function pt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ft(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function gt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&rt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function mt(t){return ct((function(e){return e=+e,ct((function(n,i){for(var s,o=t([],n.length,e),r=o.length;r--;)n[s=o[r]]&&(n[s]=!(i[s]=n[s]))}))}))}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=at.support={},o=at.isXML=function(t){var e=t.namespaceURI,n=(t.ownerDocument||t).documentElement;return!U.test(e||n&&n.nodeName||"HTML")},d=at.setDocument=function(t){var e,s,r=t?t.ownerDocument||t:w;return r!==p&&9===r.nodeType&&r.documentElement?(f=(p=r).documentElement,g=!o(p),w!==p&&(s=p.defaultView)&&s.top!==s&&(s.addEventListener?s.addEventListener("unload",ot,!1):s.attachEvent&&s.attachEvent("onunload",ot)),n.attributes=ut((function(t){return t.className="i",!t.getAttribute("className")})),n.getElementsByTagName=ut((function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(p.getElementsByClassName),n.getById=ut((function(t){return f.appendChild(t).id=x,!p.getElementsByName||!p.getElementsByName(x).length})),n.getById?(i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n=e.getElementById(t);return n?[n]:[]}}):(i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n,i,s,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(s=e.getElementsByName(t),i=0;o=s[i++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],s=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[s++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},v=[],m=[],(n.qsa=J.test(p.querySelectorAll))&&(ut((function(t){f.appendChild(t).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+R+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+R+"*(?:value|"+N+")"),t.querySelectorAll("[id~="+x+"-]").length||m.push("~="),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]")})),ut((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+R+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),f.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=J.test(y=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ut((function(t){n.disconnectedMatch=y.call(t,"*"),y.call(t,"[s!='']:x"),v.push("!=",H)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),e=J.test(f.compareDocumentPosition),b=e||J.test(f.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},k=e?function(t,e){if(t===e)return h=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===i?t===p||t.ownerDocument===w&&b(w,t)?-1:e===p||e.ownerDocument===w&&b(w,e)?1:u?I(u,t)-I(u,e):0:4&i?-1:1)}:function(t,e){if(t===e)return h=!0,0;var n,i=0,s=t.parentNode,o=e.parentNode,r=[t],a=[e];if(!s||!o)return t===p?-1:e===p?1:s?-1:o?1:u?I(u,t)-I(u,e):0;if(s===o)return dt(t,e);for(n=t;n=n.parentNode;)r.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;r[i]===a[i];)i++;return i?dt(r[i],a[i]):r[i]===w?-1:a[i]===w?1:0},p):p},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if((t.ownerDocument||t)!==p&&d(t),n.matchesSelector&&g&&!A[e+" "]&&(!v||!v.test(e))&&(!m||!m.test(e)))try{var i=y.call(t,e);if(i||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){A(e,!0)}return at(e,p,null,[t]).length>0},at.contains=function(t,e){return(t.ownerDocument||t)!==p&&d(t),b(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!==p&&d(t);var s=i.attrHandle[e.toLowerCase()],o=s&&E.call(i.attrHandle,e.toLowerCase())?s(t,e,!g):void 0;return void 0!==o?o:n.attributes||!g?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},at.escape=function(t){return(t+"").replace(it,st)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,i=[],s=0,o=0;if(h=!n.detectDuplicates,u=!n.sortStable&&t.slice(0),t.sort(k),h){for(;e=t[o++];)e===t[o]&&(s=i.push(o));for(;s--;)t.splice(i[s],1)}return u=null,t},s=at.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=s(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=s(e);return n},(i=at.selectors={cacheLength:50,createPseudo:ct,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return X.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&V.test(n)&&(e=r(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=$[t+" "];return e||(e=new RegExp("(^|"+R+")"+t+"("+R+"|$)"))&&$(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(i){var s=at.attr(i,t);return null==s?"!="===e:!e||(s+="","="===e?s===n:"!="===e?s!==n:"^="===e?n&&0===s.indexOf(n):"*="===e?n&&s.indexOf(n)>-1:"$="===e?n&&s.slice(-n.length)===n:"~="===e?(" "+s.replace(q," ")+" ").indexOf(n)>-1:"|="===e&&(s===n||s.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,i,s){var o="nth"!==t.slice(0,3),r="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===s?function(t){return!!t.parentNode}:function(e,n,l){var c,u,h,d,p,f,g=o!==r?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(m){if(o){for(;g;){for(d=e;d=d[g];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;f=g="only"===t&&!f&&"nextSibling"}return!0}if(f=[r?m.firstChild:m.lastChild],r&&y){for(b=(p=(c=(u=(h=(d=m)[x]||(d[x]={}))[d.uniqueID]||(h[d.uniqueID]={}))[t]||[])[0]===_&&c[1])&&c[2],d=p&&m.childNodes[p];d=++p&&d&&d[g]||(b=p=0)||f.pop();)if(1===d.nodeType&&++b&&d===e){u[t]=[_,p,b];break}}else if(y&&(b=p=(c=(u=(h=(d=e)[x]||(d[x]={}))[d.uniqueID]||(h[d.uniqueID]={}))[t]||[])[0]===_&&c[1]),!1===b)for(;(d=++p&&d&&d[g]||(b=p=0)||f.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++b||(y&&((u=(h=d[x]||(d[x]={}))[d.uniqueID]||(h[d.uniqueID]={}))[t]=[_,b]),d!==e)););return(b-=s)===i||b%i==0&&b/i>=0}}},PSEUDO:function(t,e){var n,s=i.pseudos[t]||i.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return s[x]?s(e):s.length>1?(n=[t,t,"",e],i.setFilters.hasOwnProperty(t.toLowerCase())?ct((function(t,n){for(var i,o=s(t,e),r=o.length;r--;)t[i=I(t,o[r])]=!(n[i]=o[r])})):function(t){return s(t,0,n)}):s}},pseudos:{not:ct((function(t){var e=[],n=[],i=a(t.replace(O,"$1"));return i[x]?ct((function(t,e,n,s){for(var o,r=i(t,null,s,[]),a=t.length;a--;)(o=r[a])&&(t[a]=!(e[a]=o))})):function(t,s,o){return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}})),has:ct((function(t){return function(e){return at(t,e).length>0}})),contains:ct((function(t){return t=t.replace(et,nt),function(e){return(e.textContent||s(e)).indexOf(t)>-1}})),lang:ct((function(t){return Y.test(t||"")||at.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===f},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!i.pseudos.empty(t)},header:function(t){return G.test(t.nodeName)},input:function(t){return K.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:mt((function(){return[0]})),last:mt((function(t,e){return[e-1]})),eq:mt((function(t,e,n){return[n<0?n+e:n]})),even:mt((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:mt((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:mt((function(t,e,n){for(var i=n<0?n+e:n>e?e:n;--i>=0;)t.push(i);return t})),gt:mt((function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t}))}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[e]=pt(e);for(e in{submit:!0,reset:!0})i.pseudos[e]=ft(e);function yt(){}function bt(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function xt(t,e,n){var i=e.dir,s=e.next,o=s||i,r=n&&"parentNode"===o,a=C++;return e.first?function(e,n,s){for(;e=e[i];)if(1===e.nodeType||r)return t(e,n,s);return!1}:function(e,n,l){var c,u,h,d=[_,a];if(l){for(;e=e[i];)if((1===e.nodeType||r)&&t(e,n,l))return!0}else for(;e=e[i];)if(1===e.nodeType||r)if(u=(h=e[x]||(e[x]={}))[e.uniqueID]||(h[e.uniqueID]={}),s&&s===e.nodeName.toLowerCase())e=e[i]||e;else{if((c=u[o])&&c[0]===_&&c[1]===a)return d[2]=c[2];if(u[o]=d,d[2]=t(e,n,l))return!0}return!1}}function wt(t){return t.length>1?function(e,n,i){for(var s=t.length;s--;)if(!t[s](e,n,i))return!1;return!0}:t[0]}function _t(t,e,n,i,s){for(var o,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(o=t[a])&&(n&&!n(o,i,s)||(r.push(o),c&&e.push(a)));return r}function Ct(t,e,n,i,s,o){return i&&!i[x]&&(i=Ct(i)),s&&!s[x]&&(s=Ct(s,o)),ct((function(o,r,a,l){var c,u,h,d=[],p=[],f=r.length,g=o||function(t,e,n){for(var i=0,s=e.length;i<s;i++)at(t,e[i],n);return n}(e||"*",a.nodeType?[a]:a,[]),m=!t||!o&&e?g:_t(g,d,t,a,l),v=n?s||(o?t:f||i)?[]:r:m;if(n&&n(m,v,a,l),i)for(c=_t(v,p),i(c,[],a,l),u=c.length;u--;)(h=c[u])&&(v[p[u]]=!(m[p[u]]=h));if(o){if(s||t){if(s){for(c=[],u=v.length;u--;)(h=v[u])&&c.push(m[u]=h);s(null,v=[],c,l)}for(u=v.length;u--;)(h=v[u])&&(c=s?I(o,h):d[u])>-1&&(o[c]=!(r[c]=h))}}else v=_t(v===r?v.splice(f,v.length):v),s?s(null,r,v,l):D.apply(r,v)}))}function $t(t){for(var e,n,s,o=t.length,r=i.relative[t[0].type],a=r||i.relative[" "],l=r?1:0,u=xt((function(t){return t===e}),a,!0),h=xt((function(t){return I(e,t)>-1}),a,!0),d=[function(t,n,i){var s=!r&&(i||n!==c)||((e=n).nodeType?u(t,n,i):h(t,n,i));return e=null,s}];l<o;l++)if(n=i.relative[t[l].type])d=[xt(wt(d),n)];else{if((n=i.filter[t[l].type].apply(null,t[l].matches))[x]){for(s=++l;s<o&&!i.relative[t[s].type];s++);return Ct(l>1&&wt(d),l>1&&bt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(O,"$1"),n,l<s&&$t(t.slice(l,s)),s<o&&$t(t=t.slice(s)),s<o&&bt(t))}d.push(n)}return wt(d)}return yt.prototype=i.filters=i.pseudos,i.setFilters=new yt,r=at.tokenize=function(t,e){var n,s,o,r,a,l,c,u=T[t+" "];if(u)return e?0:u.slice(0);for(a=t,l=[],c=i.preFilter;a;){for(r in n&&!(s=B.exec(a))||(s&&(a=a.slice(s[0].length)||a),l.push(o=[])),n=!1,(s=W.exec(a))&&(n=s.shift(),o.push({value:n,type:s[0].replace(O," ")}),a=a.slice(n.length)),i.filter)!(s=X[r].exec(a))||c[r]&&!(s=c[r](s))||(n=s.shift(),o.push({value:n,type:r,matches:s}),a=a.slice(n.length));if(!n)break}return e?a.length:a?at.error(t):T(t,l).slice(0)},a=at.compile=function(t,e){var n,s=[],o=[],a=S[t+" "];if(!a){for(e||(e=r(t)),n=e.length;n--;)(a=$t(e[n]))[x]?s.push(a):o.push(a);(a=S(t,function(t,e){var n=e.length>0,s=t.length>0,o=function(o,r,a,l,u){var h,f,m,v=0,y="0",b=o&&[],x=[],w=c,C=o||s&&i.find.TAG("*",u),$=_+=null==w?1:Math.random()||.1,T=C.length;for(u&&(c=r===p||r||u);y!==T&&null!=(h=C[y]);y++){if(s&&h){for(f=0,r||h.ownerDocument===p||(d(h),a=!g);m=t[f++];)if(m(h,r||p,a)){l.push(h);break}u&&(_=$)}n&&((h=!m&&h)&&v--,o&&b.push(h))}if(v+=y,n&&y!==v){for(f=0;m=e[f++];)m(b,x,r,a);if(o){if(v>0)for(;y--;)b[y]||x[y]||(x[y]=M.call(l));x=_t(x)}D.apply(l,x),u&&!o&&x.length>0&&v+e.length>1&&at.uniqueSort(l)}return u&&(_=$,c=w),b};return n?ct(o):o}(o,s))).selector=t}return a},l=at.select=function(t,e,n,s){var o,l,c,u,h,d="function"==typeof t&&t,p=!s&&r(t=d.selector||t);if(n=n||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===e.nodeType&&g&&i.relative[l[1].type]){if(!(e=(i.find.ID(c.matches[0].replace(et,nt),e)||[])[0]))return n;d&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(o=X.needsContext.test(t)?0:l.length;o--&&(c=l[o],!i.relative[u=c.type]);)if((h=i.find[u])&&(s=h(c.matches[0].replace(et,nt),tt.test(l[0].type)&&vt(e.parentNode)||e))){if(l.splice(o,1),!(t=s.length&&bt(l)))return D.apply(n,s),n;break}}return(d||a(t,p))(s,e,!g,n,!e||tt.test(t)&&vt(e.parentNode)||e),n},n.sortStable=x.split("").sort(k).join("")===x,n.detectDuplicates=!!h,d(),n.sortDetached=ut((function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))})),ut((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||ht("type|href|height|width",(function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),n.attributes&&ut((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||ht("value",(function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),ut((function(t){return null==t.getAttribute("disabled")}))||ht(N,(function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null})),at}(n);C.find=S,C.expr=S.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=S.uniqueSort,C.text=S.getText,C.isXMLDoc=S.isXML,C.contains=S.contains,C.escapeSelector=S.escape;var A=function(t,e,n){for(var i=[],s=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(s&&C(t).is(n))break;i.push(t)}return i},k=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},E=C.expr.match.needsContext;function P(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function F(t,e,n){return y(e)?C.grep(t,(function(t,i){return!!e.call(t,i,t)!==n})):e.nodeType?C.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?C.grep(t,(function(t){return h.call(e,t)>-1!==n})):C.filter(e,t,n)}C.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?C.find.matchesSelector(i,t)?[i]:[]:C.find.matches(t,C.grep(e,(function(t){return 1===t.nodeType})))},C.fn.extend({find:function(t){var e,n,i=this.length,s=this;if("string"!=typeof t)return this.pushStack(C(t).filter((function(){for(e=0;e<i;e++)if(C.contains(s[e],this))return!0})));for(n=this.pushStack([]),e=0;e<i;e++)C.find(t,s[e],n);return i>1?C.uniqueSort(n):n},filter:function(t){return this.pushStack(F(this,t||[],!1))},not:function(t){return this.pushStack(F(this,t||[],!0))},is:function(t){return!!F(this,"string"==typeof t&&E.test(t)?C(t):t||[],!1).length}});var D,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(t,e,n){var i,s;if(!t)return this;if(n=n||D,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:L.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof C?e[0]:e,C.merge(this,C.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:r,!0)),M.test(i[1])&&C.isPlainObject(e))for(i in e)y(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(s=r.getElementById(i[2]))&&(this[0]=s,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):y(t)?void 0!==n.ready?n.ready(t):t(C):C.makeArray(t,this)}).prototype=C.fn,D=C(r);var I=/^(?:parents|prev(?:Until|All))/,N={children:!0,contents:!0,next:!0,prev:!0};function R(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}C.fn.extend({has:function(t){var e=C(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(C.contains(this,e[t]))return!0}))},closest:function(t,e){var n,i=0,s=this.length,o=[],r="string"!=typeof t&&C(t);if(!E.test(t))for(;i<s;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(r?r.index(n)>-1:1===n.nodeType&&C.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?C.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?h.call(C(t),this[0]):h.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),C.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return A(t,"parentNode")},parentsUntil:function(t,e,n){return A(t,"parentNode",n)},next:function(t){return R(t,"nextSibling")},prev:function(t){return R(t,"previousSibling")},nextAll:function(t){return A(t,"nextSibling")},prevAll:function(t){return A(t,"previousSibling")},nextUntil:function(t,e,n){return A(t,"nextSibling",n)},prevUntil:function(t,e,n){return A(t,"previousSibling",n)},siblings:function(t){return k((t.parentNode||{}).firstChild,t)},children:function(t){return k(t.firstChild)},contents:function(t){return void 0!==t.contentDocument?t.contentDocument:(P(t,"template")&&(t=t.content||t),C.merge([],t.childNodes))}},(function(t,e){C.fn[t]=function(n,i){var s=C.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(s=C.filter(i,s)),this.length>1&&(N[t]||C.uniqueSort(s),I.test(t)&&s.reverse()),this.pushStack(s)}}));var z=/[^\x20\t\r\n\f]+/g;function j(t){return t}function H(t){throw t}function q(t,e,n,i){var s;try{t&&y(s=t.promise)?s.call(t).done(e).fail(n):t&&y(s=t.then)?s.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}C.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return C.each(t.match(z)||[],(function(t,n){e[n]=!0})),e}(t):C.extend({},t);var e,n,i,s,o=[],r=[],a=-1,l=function(){for(s=s||t.once,i=e=!0;r.length;a=-1)for(n=r.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&t.stopOnFalse&&(a=o.length,n=!1);t.memory||(n=!1),e=!1,s&&(o=n?[]:"")},c={add:function(){return o&&(n&&!e&&(a=o.length-1,r.push(n)),function e(n){C.each(n,(function(n,i){y(i)?t.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==_(i)&&e(i)}))}(arguments),n&&!e&&l()),this},remove:function(){return C.each(arguments,(function(t,e){for(var n;(n=C.inArray(e,o,n))>-1;)o.splice(n,1),n<=a&&a--})),this},has:function(t){return t?C.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return s=r=[],o=n="",this},disabled:function(){return!o},lock:function(){return s=r=[],n||e||(o=n=""),this},locked:function(){return!!s},fireWith:function(t,n){return s||(n=[t,(n=n||[]).slice?n.slice():n],r.push(n),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},C.extend({Deferred:function(t){var e=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],i="pending",s={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return s.then(null,t)},pipe:function(){var t=arguments;return C.Deferred((function(n){C.each(e,(function(e,i){var s=y(t[i[4]])&&t[i[4]];o[i[1]]((function(){var t=s&&s.apply(this,arguments);t&&y(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,s?[t]:arguments)}))})),t=null})).promise()},then:function(t,i,s){var o=0;function r(t,e,i,s){return function(){var a=this,l=arguments,c=function(){var n,c;if(!(t<o)){if((n=i.apply(a,l))===e.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(c)?s?c.call(n,r(o,e,j,s),r(o,e,H,s)):(o++,c.call(n,r(o,e,j,s),r(o,e,H,s),r(o,e,j,e.notifyWith))):(i!==j&&(a=void 0,l=[n]),(s||e.resolveWith)(a,l))}},u=s?c:function(){try{c()}catch(n){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(n,u.stackTrace),t+1>=o&&(i!==H&&(a=void 0,l=[n]),e.rejectWith(a,l))}};t?u():(C.Deferred.getStackHook&&(u.stackTrace=C.Deferred.getStackHook()),n.setTimeout(u))}}return C.Deferred((function(n){e[0][3].add(r(0,n,y(s)?s:j,n.notifyWith)),e[1][3].add(r(0,n,y(t)?t:j)),e[2][3].add(r(0,n,y(i)?i:H))})).promise()},promise:function(t){return null!=t?C.extend(t,s):s}},o={};return C.each(e,(function(t,n){var r=n[2],a=n[5];s[n[1]]=r.add,a&&r.add((function(){i=a}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),r.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=r.fireWith})),s.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,i=Array(n),s=l.call(arguments),o=C.Deferred(),r=function(t){return function(n){i[t]=this,s[t]=arguments.length>1?l.call(arguments):n,--e||o.resolveWith(i,s)}};if(e<=1&&(q(t,o.done(r(n)).resolve,o.reject,!e),"pending"===o.state()||y(s[n]&&s[n].then)))return o.then();for(;n--;)q(s[n],r(n),o.reject);return o.promise()}});var O=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&O.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},C.readyException=function(t){n.setTimeout((function(){throw t}))};var B=C.Deferred();function W(){r.removeEventListener("DOMContentLoaded",W),n.removeEventListener("load",W),C.ready()}C.fn.ready=function(t){return B.then(t).catch((function(t){C.readyException(t)})),this},C.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--C.readyWait:C.isReady)||(C.isReady=!0,!0!==t&&--C.readyWait>0||B.resolveWith(r,[C]))}}),C.ready.then=B.then,"complete"===r.readyState||"loading"!==r.readyState&&!r.documentElement.doScroll?n.setTimeout(C.ready):(r.addEventListener("DOMContentLoaded",W),n.addEventListener("load",W));var Z=function(t,e,n,i,s,o,r){var a=0,l=t.length,c=null==n;if("object"===_(n))for(a in s=!0,n)Z(t,e,a,n[a],!0,o,r);else if(void 0!==i&&(s=!0,y(i)||(r=!0),c&&(r?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(C(t),n)})),e))for(;a<l;a++)e(t[a],n,r?i:i.call(t[a],a,e(t[a],n)));return s?t:c?e.call(t):l?e(t[0],n):o},V=/^-ms-/,Y=/-([a-z])/g;function X(t,e){return e.toUpperCase()}function U(t){return t.replace(V,"ms-").replace(Y,X)}var K=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function G(){this.expando=C.expando+G.uid++}G.uid=1,G.prototype={cache:function(t){var e=t[this.expando];return e||(e={},K(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,s=this.cache(t);if("string"==typeof e)s[U(e)]=n;else for(i in e)s[U(i)]=e[i];return s},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][U(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(U):(e=U(e))in i?[e]:e.match(z)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||C.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!C.isEmptyObject(e)}};var J=new G,Q=new G,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}Q.set(t,e,n)}else n=void 0;return n}C.extend({hasData:function(t){return Q.hasData(t)||J.hasData(t)},data:function(t,e,n){return Q.access(t,e,n)},removeData:function(t,e){Q.remove(t,e)},_data:function(t,e,n){return J.access(t,e,n)},_removeData:function(t,e){J.remove(t,e)}}),C.fn.extend({data:function(t,e){var n,i,s,o=this[0],r=o&&o.attributes;if(void 0===t){if(this.length&&(s=Q.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=r.length;n--;)r[n]&&0===(i=r[n].name).indexOf("data-")&&(i=U(i.slice(5)),nt(o,i,s[i]));J.set(o,"hasDataAttrs",!0)}return s}return"object"==typeof t?this.each((function(){Q.set(this,t)})):Z(this,(function(e){var n;if(o&&void 0===e)return void 0!==(n=Q.get(o,t))?n:void 0!==(n=nt(o,t))?n:void 0;this.each((function(){Q.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){Q.remove(this,t)}))}}),C.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=J.get(t,e),n&&(!i||Array.isArray(n)?i=J.access(t,e,C.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=C.queue(t,e),i=n.length,s=n.shift(),o=C._queueHooks(t,e);"inprogress"===s&&(s=n.shift(),i--),s&&("fx"===e&&n.unshift("inprogress"),delete o.stop,s.call(t,(function(){C.dequeue(t,e)}),o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return J.get(t,n)||J.access(t,n,{empty:C.Callbacks("once memory").add((function(){J.remove(t,[e+"queue",n])}))})}}),C.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?C.queue(this[0],t):void 0===e?this:this.each((function(){var n=C.queue(this,t,e);C._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&C.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){C.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,s=C.Deferred(),o=this,r=this.length,a=function(){--i||s.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";r--;)(n=J.get(o[r],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),s.promise(e)}});var it=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,st=new RegExp("^(?:([+-])=|)("+it+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],rt=r.documentElement,at=function(t){return C.contains(t.ownerDocument,t)},lt={composed:!0};rt.getRootNode&&(at=function(t){return C.contains(t.ownerDocument,t)||t.getRootNode(lt)===t.ownerDocument});var ct=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&at(t)&&"none"===C.css(t,"display")},ut=function(t,e,n,i){var s,o,r={};for(o in e)r[o]=t.style[o],t.style[o]=e[o];for(o in s=n.apply(t,i||[]),e)t.style[o]=r[o];return s};function ht(t,e,n,i){var s,o,r=20,a=i?function(){return i.cur()}:function(){return C.css(t,e,"")},l=a(),c=n&&n[3]||(C.cssNumber[e]?"":"px"),u=t.nodeType&&(C.cssNumber[e]||"px"!==c&&+l)&&st.exec(C.css(t,e));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;r--;)C.style(t,e,u+c),(1-o)*(1-(o=a()/l||.5))<=0&&(r=0),u/=o;u*=2,C.style(t,e,u+c),n=n||[]}return n&&(u=+u||+l||0,s=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=s)),s}var dt={};function pt(t){var e,n=t.ownerDocument,i=t.nodeName,s=dt[i];return s||(e=n.body.appendChild(n.createElement(i)),s=C.css(e,"display"),e.parentNode.removeChild(e),"none"===s&&(s="block"),dt[i]=s,s)}function ft(t,e){for(var n,i,s=[],o=0,r=t.length;o<r;o++)(i=t[o]).style&&(n=i.style.display,e?("none"===n&&(s[o]=J.get(i,"display")||null,s[o]||(i.style.display="")),""===i.style.display&&ct(i)&&(s[o]=pt(i))):"none"!==n&&(s[o]="none",J.set(i,"display",n)));for(o=0;o<r;o++)null!=s[o]&&(t[o].style.display=s[o]);return t}C.fn.extend({show:function(){return ft(this,!0)},hide:function(){return ft(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){ct(this)?C(this).show():C(this).hide()}))}});var gt=/^(?:checkbox|radio)$/i,mt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,vt=/^$|^module$|\/(?:java|ecma)script/i,yt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function bt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&P(t,e)?C.merge([t],n):n}function xt(t,e){for(var n=0,i=t.length;n<i;n++)J.set(t[n],"globalEval",!e||J.get(e[n],"globalEval"))}yt.optgroup=yt.option,yt.tbody=yt.tfoot=yt.colgroup=yt.caption=yt.thead,yt.th=yt.td;var wt,_t,Ct=/<|&#?\w+;/;function $t(t,e,n,i,s){for(var o,r,a,l,c,u,h=e.createDocumentFragment(),d=[],p=0,f=t.length;p<f;p++)if((o=t[p])||0===o)if("object"===_(o))C.merge(d,o.nodeType?[o]:o);else if(Ct.test(o)){for(r=r||h.appendChild(e.createElement("div")),a=(mt.exec(o)||["",""])[1].toLowerCase(),l=yt[a]||yt._default,r.innerHTML=l[1]+C.htmlPrefilter(o)+l[2],u=l[0];u--;)r=r.lastChild;C.merge(d,r.childNodes),(r=h.firstChild).textContent=""}else d.push(e.createTextNode(o));for(h.textContent="",p=0;o=d[p++];)if(i&&C.inArray(o,i)>-1)s&&s.push(o);else if(c=at(o),r=bt(h.appendChild(o),"script"),c&&xt(r),n)for(u=0;o=r[u++];)vt.test(o.type||"")&&n.push(o);return h}wt=r.createDocumentFragment().appendChild(r.createElement("div")),(_t=r.createElement("input")).setAttribute("type","radio"),_t.setAttribute("checked","checked"),_t.setAttribute("name","t"),wt.appendChild(_t),v.checkClone=wt.cloneNode(!0).cloneNode(!0).lastChild.checked,wt.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!wt.cloneNode(!0).lastChild.defaultValue;var Tt=/^key/,St=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,At=/^([^.]*)(?:\.(.+)|)/;function kt(){return!0}function Et(){return!1}function Pt(t,e){return t===function(){try{return r.activeElement}catch(t){}}()==("focus"===e)}function Mt(t,e,n,i,s,o){var r,a;if("object"==typeof e){for(a in"string"!=typeof n&&(i=i||n,n=void 0),e)Mt(t,a,n,i,e[a],o);return t}if(null==i&&null==s?(s=n,i=n=void 0):null==s&&("string"==typeof n?(s=i,i=void 0):(s=i,i=n,n=void 0)),!1===s)s=Et;else if(!s)return t;return 1===o&&(r=s,(s=function(t){return C().off(t),r.apply(this,arguments)}).guid=r.guid||(r.guid=C.guid++)),t.each((function(){C.event.add(this,e,s,i,n)}))}function Ft(t,e,n){n?(J.set(t,e,!1),C.event.add(t,e,{namespace:!1,handler:function(t){var i,s,o=J.get(this,e);if(1&t.isTrigger&&this[e]){if(o.length)(C.event.special[e]||{}).delegateType&&t.stopPropagation();else if(o=l.call(arguments),J.set(this,e,o),i=n(this,e),this[e](),o!==(s=J.get(this,e))||i?J.set(this,e,!1):s={},o!==s)return t.stopImmediatePropagation(),t.preventDefault(),s.value}else o.length&&(J.set(this,e,{value:C.event.trigger(C.extend(o[0],C.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===J.get(t,e)&&C.event.add(t,e,kt)}C.event={global:{},add:function(t,e,n,i,s){var o,r,a,l,c,u,h,d,p,f,g,m=J.get(t);if(m)for(n.handler&&(n=(o=n).handler,s=o.selector),s&&C.find.matchesSelector(rt,s),n.guid||(n.guid=C.guid++),(l=m.events)||(l=m.events={}),(r=m.handle)||(r=m.handle=function(e){return void 0!==C&&C.event.triggered!==e.type?C.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(z)||[""]).length;c--;)p=g=(a=At.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),p&&(h=C.event.special[p]||{},p=(s?h.delegateType:h.bindType)||p,h=C.event.special[p]||{},u=C.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:s,needsContext:s&&C.expr.match.needsContext.test(s),namespace:f.join(".")},o),(d=l[p])||((d=l[p]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(t,i,f,r)||t.addEventListener&&t.addEventListener(p,r)),h.add&&(h.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),s?d.splice(d.delegateCount++,0,u):d.push(u),C.event.global[p]=!0)},remove:function(t,e,n,i,s){var o,r,a,l,c,u,h,d,p,f,g,m=J.hasData(t)&&J.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(z)||[""]).length;c--;)if(p=g=(a=At.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),p){for(h=C.event.special[p]||{},d=l[p=(i?h.delegateType:h.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=o=d.length;o--;)u=d[o],!s&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(d.splice(o,1),u.selector&&d.delegateCount--,h.remove&&h.remove.call(t,u));r&&!d.length&&(h.teardown&&!1!==h.teardown.call(t,f,m.handle)||C.removeEvent(t,p,m.handle),delete l[p])}else for(p in l)C.event.remove(t,p+e[c],n,i,!0);C.isEmptyObject(l)&&J.remove(t,"handle events")}},dispatch:function(t){var e,n,i,s,o,r,a=C.event.fix(t),l=new Array(arguments.length),c=(J.get(this,"events")||{})[a.type]||[],u=C.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,a)){for(r=C.event.handlers.call(this,a,c),e=0;(s=r[e++])&&!a.isPropagationStopped();)for(a.currentTarget=s.elem,n=0;(o=s.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==o.namespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(i=((C.event.special[o.origType]||{}).handle||o.handler).apply(s.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,s,o,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],r={},n=0;n<l;n++)void 0===r[s=(i=e[n]).selector+" "]&&(r[s]=i.needsContext?C(s,this).index(c)>-1:C.find(s,this,null,[c]).length),r[s]&&o.push(i);o.length&&a.push({elem:c,handlers:o})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(C.Event.prototype,t,{enumerable:!0,configurable:!0,get:y(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[C.expando]?t:new C.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return gt.test(e.type)&&e.click&&P(e,"input")&&Ft(e,"click",kt),!1},trigger:function(t){var e=this||t;return gt.test(e.type)&&e.click&&P(e,"input")&&Ft(e,"click"),!0},_default:function(t){var e=t.target;return gt.test(e.type)&&e.click&&P(e,"input")&&J.get(e,"click")||P(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},C.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},C.Event=function(t,e){if(!(this instanceof C.Event))return new C.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?kt:Et,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&C.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:Et,isPropagationStopped:Et,isImmediatePropagationStopped:Et,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=kt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=kt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=kt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Tt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&St.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},(function(t,e){C.event.special[t]={setup:function(){return Ft(this,t,Pt),!1},trigger:function(){return Ft(this,t),!0},delegateType:e}})),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){C.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,s=t.relatedTarget,o=t.handleObj;return s&&(s===i||C.contains(i,s))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}})),C.fn.extend({on:function(t,e,n,i){return Mt(this,t,e,n,i)},one:function(t,e,n,i){return Mt(this,t,e,n,i,1)},off:function(t,e,n){var i,s;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,C(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(s in t)this.off(s,e,t[s]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Et),this.each((function(){C.event.remove(this,t,n,e)}))}});var Dt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Lt=/<script|<style|<link/i,It=/checked\s*(?:[^=]|=\s*.checked.)/i,Nt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Rt(t,e){return P(t,"table")&&P(11!==e.nodeType?e:e.firstChild,"tr")&&C(t).children("tbody")[0]||t}function zt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function jt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Ht(t,e){var n,i,s,o,r,a,l,c;if(1===e.nodeType){if(J.hasData(t)&&(o=J.access(t),r=J.set(e,o),c=o.events))for(s in delete r.handle,r.events={},c)for(n=0,i=c[s].length;n<i;n++)C.event.add(e,s,c[s][n]);Q.hasData(t)&&(a=Q.access(t),l=C.extend({},a),Q.set(e,l))}}function qt(t,e){var n=e.nodeName.toLowerCase();"input"===n&&gt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function Ot(t,e,n,i){e=c.apply([],e);var s,o,r,a,l,u,h=0,d=t.length,p=d-1,f=e[0],g=y(f);if(g||d>1&&"string"==typeof f&&!v.checkClone&&It.test(f))return t.each((function(s){var o=t.eq(s);g&&(e[0]=f.call(this,s,o.html())),Ot(o,e,n,i)}));if(d&&(o=(s=$t(e,t[0].ownerDocument,!1,t,i)).firstChild,1===s.childNodes.length&&(s=o),o||i)){for(a=(r=C.map(bt(s,"script"),zt)).length;h<d;h++)l=s,h!==p&&(l=C.clone(l,!0,!0),a&&C.merge(r,bt(l,"script"))),n.call(t[h],l,h);if(a)for(u=r[r.length-1].ownerDocument,C.map(r,jt),h=0;h<a;h++)l=r[h],vt.test(l.type||"")&&!J.access(l,"globalEval")&&C.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?C._evalUrl&&!l.noModule&&C._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):w(l.textContent.replace(Nt,""),l,u))}return t}function Bt(t,e,n){for(var i,s=e?C.filter(e,t):t,o=0;null!=(i=s[o]);o++)n||1!==i.nodeType||C.cleanData(bt(i)),i.parentNode&&(n&&at(i)&&xt(bt(i,"script")),i.parentNode.removeChild(i));return t}C.extend({htmlPrefilter:function(t){return t.replace(Dt,"<$1></$2>")},clone:function(t,e,n){var i,s,o,r,a=t.cloneNode(!0),l=at(t);if(!(v.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||C.isXMLDoc(t)))for(r=bt(a),i=0,s=(o=bt(t)).length;i<s;i++)qt(o[i],r[i]);if(e)if(n)for(o=o||bt(t),r=r||bt(a),i=0,s=o.length;i<s;i++)Ht(o[i],r[i]);else Ht(t,a);return(r=bt(a,"script")).length>0&&xt(r,!l&&bt(t,"script")),a},cleanData:function(t){for(var e,n,i,s=C.event.special,o=0;void 0!==(n=t[o]);o++)if(K(n)){if(e=n[J.expando]){if(e.events)for(i in e.events)s[i]?C.event.remove(n,i):C.removeEvent(n,i,e.handle);n[J.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),C.fn.extend({detach:function(t){return Bt(this,t,!0)},remove:function(t){return Bt(this,t)},text:function(t){return Z(this,(function(t){return void 0===t?C.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Ot(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Rt(this,t).appendChild(t)}))},prepend:function(){return Ot(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Rt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Ot(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Ot(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(C.cleanData(bt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return C.clone(this,t,e)}))},html:function(t){return Z(this,(function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Lt.test(t)&&!yt[(mt.exec(t)||["",""])[1].toLowerCase()]){t=C.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(C.cleanData(bt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Ot(this,arguments,(function(e){var n=this.parentNode;C.inArray(this,t)<0&&(C.cleanData(bt(this)),n&&n.replaceChild(e,this))}),t)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){C.fn[t]=function(t){for(var n,i=[],s=C(t),o=s.length-1,r=0;r<=o;r++)n=r===o?this:this.clone(!0),C(s[r])[e](n),u.apply(i,n.get());return this.pushStack(i)}}));var Wt=new RegExp("^("+it+")(?!px)[a-z%]+$","i"),Zt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},Vt=new RegExp(ot.join("|"),"i");function Yt(t,e,n){var i,s,o,r,a=t.style;return(n=n||Zt(t))&&(""!==(r=n.getPropertyValue(e)||n[e])||at(t)||(r=C.style(t,e)),!v.pixelBoxStyles()&&Wt.test(r)&&Vt.test(e)&&(i=a.width,s=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=n.width,a.width=i,a.minWidth=s,a.maxWidth=o)),void 0!==r?r+"":r}function Xt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",rt.appendChild(c).appendChild(u);var t=n.getComputedStyle(u);i="1%"!==t.top,l=12===e(t.marginLeft),u.style.right="60%",a=36===e(t.right),s=36===e(t.width),u.style.position="absolute",o=12===e(u.offsetWidth/3),rt.removeChild(c),u=null}}function e(t){return Math.round(parseFloat(t))}var i,s,o,a,l,c=r.createElement("div"),u=r.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===u.style.backgroundClip,C.extend(v,{boxSizingReliable:function(){return t(),s},pixelBoxStyles:function(){return t(),a},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),o}}))}();var Ut=["Webkit","Moz","ms"],Kt=r.createElement("div").style,Gt={};function Jt(t){var e=C.cssProps[t]||Gt[t];return e||(t in Kt?t:Gt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Ut.length;n--;)if((t=Ut[n]+e)in Kt)return t}(t)||t)}var Qt=/^(none|table(?!-c[ea]).+)/,te=/^--/,ee={position:"absolute",visibility:"hidden",display:"block"},ne={letterSpacing:"0",fontWeight:"400"};function ie(t,e,n){var i=st.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function se(t,e,n,i,s,o){var r="width"===e?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;r<4;r+=2)"margin"===n&&(l+=C.css(t,n+ot[r],!0,s)),i?("content"===n&&(l-=C.css(t,"padding"+ot[r],!0,s)),"margin"!==n&&(l-=C.css(t,"border"+ot[r]+"Width",!0,s))):(l+=C.css(t,"padding"+ot[r],!0,s),"padding"!==n?l+=C.css(t,"border"+ot[r]+"Width",!0,s):a+=C.css(t,"border"+ot[r]+"Width",!0,s));return!i&&o>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-l-a-.5))||0),l}function oe(t,e,n){var i=Zt(t),s=(!v.boxSizingReliable()||n)&&"border-box"===C.css(t,"boxSizing",!1,i),o=s,r=Yt(t,e,i),a="offset"+e[0].toUpperCase()+e.slice(1);if(Wt.test(r)){if(!n)return r;r="auto"}return(!v.boxSizingReliable()&&s||"auto"===r||!parseFloat(r)&&"inline"===C.css(t,"display",!1,i))&&t.getClientRects().length&&(s="border-box"===C.css(t,"boxSizing",!1,i),(o=a in t)&&(r=t[a])),(r=parseFloat(r)||0)+se(t,e,n||(s?"border":"content"),o,i,r)+"px"}function re(t,e,n,i,s){return new re.prototype.init(t,e,n,i,s)}C.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Yt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var s,o,r,a=U(e),l=te.test(e),c=t.style;if(l||(e=Jt(a)),r=C.cssHooks[e]||C.cssHooks[a],void 0===n)return r&&"get"in r&&void 0!==(s=r.get(t,!1,i))?s:c[e];"string"===(o=typeof n)&&(s=st.exec(n))&&s[1]&&(n=ht(t,e,s),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=s&&s[3]||(C.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(n=r.set(t,n,i))||(l?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,i){var s,o,r,a=U(e);return te.test(e)||(e=Jt(a)),(r=C.cssHooks[e]||C.cssHooks[a])&&"get"in r&&(s=r.get(t,!0,n)),void 0===s&&(s=Yt(t,e,i)),"normal"===s&&e in ne&&(s=ne[e]),""===n||n?(o=parseFloat(s),!0===n||isFinite(o)?o||0:s):s}}),C.each(["height","width"],(function(t,e){C.cssHooks[e]={get:function(t,n,i){if(n)return!Qt.test(C.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?oe(t,e,i):ut(t,ee,(function(){return oe(t,e,i)}))},set:function(t,n,i){var s,o=Zt(t),r=!v.scrollboxSize()&&"absolute"===o.position,a=(r||i)&&"border-box"===C.css(t,"boxSizing",!1,o),l=i?se(t,e,i,a,o):0;return a&&r&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-se(t,e,"border",!1,o)-.5)),l&&(s=st.exec(n))&&"px"!==(s[3]||"px")&&(t.style[e]=n,n=C.css(t,e)),ie(0,n,l)}}})),C.cssHooks.marginLeft=Xt(v.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Yt(t,"marginLeft"))||t.getBoundingClientRect().left-ut(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),C.each({margin:"",padding:"",border:"Width"},(function(t,e){C.cssHooks[t+e]={expand:function(n){for(var i=0,s={},o="string"==typeof n?n.split(" "):[n];i<4;i++)s[t+ot[i]+e]=o[i]||o[i-2]||o[0];return s}},"margin"!==t&&(C.cssHooks[t+e].set=ie)})),C.fn.extend({css:function(t,e){return Z(this,(function(t,e,n){var i,s,o={},r=0;if(Array.isArray(e)){for(i=Zt(t),s=e.length;r<s;r++)o[e[r]]=C.css(t,e[r],!1,i);return o}return void 0!==n?C.style(t,e,n):C.css(t,e)}),t,e,arguments.length>1)}}),C.Tween=re,re.prototype={constructor:re,init:function(t,e,n,i,s,o){this.elem=t,this.prop=n,this.easing=s||C.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(C.cssNumber[n]?"":"px")},cur:function(){var t=re.propHooks[this.prop];return t&&t.get?t.get(this):re.propHooks._default.get(this)},run:function(t){var e,n=re.propHooks[this.prop];return this.options.duration?this.pos=e=C.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):re.propHooks._default.set(this),this}},re.prototype.init.prototype=re.prototype,re.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=C.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){C.fx.step[t.prop]?C.fx.step[t.prop](t):1!==t.elem.nodeType||!C.cssHooks[t.prop]&&null==t.elem.style[Jt(t.prop)]?t.elem[t.prop]=t.now:C.style(t.elem,t.prop,t.now+t.unit)}}},re.propHooks.scrollTop=re.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},C.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},C.fx=re.prototype.init,C.fx.step={};var ae,le,ce=/^(?:toggle|show|hide)$/,ue=/queueHooks$/;function he(){le&&(!1===r.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(he):n.setTimeout(he,C.fx.interval),C.fx.tick())}function de(){return n.setTimeout((function(){ae=void 0})),ae=Date.now()}function pe(t,e){var n,i=0,s={height:t};for(e=e?1:0;i<4;i+=2-e)s["margin"+(n=ot[i])]=s["padding"+n]=t;return e&&(s.opacity=s.width=t),s}function fe(t,e,n){for(var i,s=(ge.tweeners[e]||[]).concat(ge.tweeners["*"]),o=0,r=s.length;o<r;o++)if(i=s[o].call(n,e,t))return i}function ge(t,e,n){var i,s,o=0,r=ge.prefilters.length,a=C.Deferred().always((function(){delete l.elem})),l=function(){if(s)return!1;for(var e=ae||de(),n=Math.max(0,c.startTime+c.duration-e),i=1-(n/c.duration||0),o=0,r=c.tweens.length;o<r;o++)c.tweens[o].run(i);return a.notifyWith(t,[c,i,n]),i<1&&r?n:(r||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:C.extend({},e),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},n),originalProperties:e,originalOptions:n,startTime:ae||de(),duration:n.duration,tweens:[],createTween:function(e,n){var i=C.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(s)return this;for(s=!0;n<i;n++)c.tweens[n].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),u=c.props;for(!function(t,e){var n,i,s,o,r;for(n in t)if(s=e[i=U(n)],o=t[n],Array.isArray(o)&&(s=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),(r=C.cssHooks[i])&&"expand"in r)for(n in o=r.expand(o),delete t[i],o)n in t||(t[n]=o[n],e[n]=s);else e[i]=s}(u,c.opts.specialEasing);o<r;o++)if(i=ge.prefilters[o].call(c,t,u,c.opts))return y(i.stop)&&(C._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return C.map(u,fe,c),y(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),C.fx.timer(C.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}C.Animation=C.extend(ge,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ht(n.elem,t,st.exec(e),n),n}]},tweener:function(t,e){y(t)?(e=t,t=["*"]):t=t.match(z);for(var n,i=0,s=t.length;i<s;i++)n=t[i],ge.tweeners[n]=ge.tweeners[n]||[],ge.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,s,o,r,a,l,c,u,h="width"in e||"height"in e,d=this,p={},f=t.style,g=t.nodeType&&ct(t),m=J.get(t,"fxshow");for(i in n.queue||(null==(r=C._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,d.always((function(){d.always((function(){r.unqueued--,C.queue(t,"fx").length||r.empty.fire()}))}))),e)if(s=e[i],ce.test(s)){if(delete e[i],o=o||"toggle"===s,s===(g?"hide":"show")){if("show"!==s||!m||void 0===m[i])continue;g=!0}p[i]=m&&m[i]||C.style(t,i)}if((l=!C.isEmptyObject(e))||!C.isEmptyObject(p))for(i in h&&1===t.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=m&&m.display)&&(c=J.get(t,"display")),"none"===(u=C.css(t,"display"))&&(c?u=c:(ft([t],!0),c=t.style.display||c,u=C.css(t,"display"),ft([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===C.css(t,"float")&&(l||(d.done((function(){f.display=c})),null==c&&(u=f.display,c="none"===u?"":u)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",d.always((function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}))),l=!1,p)l||(m?"hidden"in m&&(g=m.hidden):m=J.access(t,"fxshow",{display:c}),o&&(m.hidden=!g),g&&ft([t],!0),d.done((function(){for(i in g||ft([t]),J.remove(t,"fxshow"),p)C.style(t,i,p[i])}))),l=fe(g?m[i]:0,i,d),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?ge.prefilters.unshift(t):ge.prefilters.push(t)}}),C.speed=function(t,e,n){var i=t&&"object"==typeof t?C.extend({},t):{complete:n||!n&&e||y(t)&&t,duration:t,easing:n&&e||e&&!y(e)&&e};return C.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in C.fx.speeds?i.duration=C.fx.speeds[i.duration]:i.duration=C.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){y(i.old)&&i.old.call(this),i.queue&&C.dequeue(this,i.queue)},i},C.fn.extend({fadeTo:function(t,e,n,i){return this.filter(ct).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var s=C.isEmptyObject(t),o=C.speed(e,n,i),r=function(){var e=ge(this,C.extend({},t),o);(s||J.get(this,"finish"))&&e.stop(!0)};return r.finish=r,s||!1===o.queue?this.each(r):this.queue(o.queue,r)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each((function(){var e=!0,s=null!=t&&t+"queueHooks",o=C.timers,r=J.get(this);if(s)r[s]&&r[s].stop&&i(r[s]);else for(s in r)r[s]&&r[s].stop&&ue.test(s)&&i(r[s]);for(s=o.length;s--;)o[s].elem!==this||null!=t&&o[s].queue!==t||(o[s].anim.stop(n),e=!1,o.splice(s,1));!e&&n||C.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=J.get(this),i=n[t+"queue"],s=n[t+"queueHooks"],o=C.timers,r=i?i.length:0;for(n.finish=!0,C.queue(this,t,[]),s&&s.stop&&s.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish}))}}),C.each(["toggle","show","hide"],(function(t,e){var n=C.fn[e];C.fn[e]=function(t,i,s){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(pe(e,!0),t,i,s)}})),C.each({slideDown:pe("show"),slideUp:pe("hide"),slideToggle:pe("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){C.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}})),C.timers=[],C.fx.tick=function(){var t,e=0,n=C.timers;for(ae=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||C.fx.stop(),ae=void 0},C.fx.timer=function(t){C.timers.push(t),C.fx.start()},C.fx.interval=13,C.fx.start=function(){le||(le=!0,he())},C.fx.stop=function(){le=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(t,e){return t=C.fx&&C.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,i){var s=n.setTimeout(e,t);i.stop=function(){n.clearTimeout(s)}}))},function(){var t=r.createElement("input"),e=r.createElement("select").appendChild(r.createElement("option"));t.type="checkbox",v.checkOn=""!==t.value,v.optSelected=e.selected,(t=r.createElement("input")).value="t",t.type="radio",v.radioValue="t"===t.value}();var me,ve=C.expr.attrHandle;C.fn.extend({attr:function(t,e){return Z(this,C.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){C.removeAttr(this,t)}))}}),C.extend({attr:function(t,e,n){var i,s,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?C.prop(t,e,n):(1===o&&C.isXMLDoc(t)||(s=C.attrHooks[e.toLowerCase()]||(C.expr.match.bool.test(e)?me:void 0)),void 0!==n?null===n?void C.removeAttr(t,e):s&&"set"in s&&void 0!==(i=s.set(t,n,e))?i:(t.setAttribute(e,n+""),n):s&&"get"in s&&null!==(i=s.get(t,e))?i:null==(i=C.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!v.radioValue&&"radio"===e&&P(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,s=e&&e.match(z);if(s&&1===t.nodeType)for(;n=s[i++];)t.removeAttribute(n)}}),me={set:function(t,e,n){return!1===e?C.removeAttr(t,n):t.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=ve[e]||C.find.attr;ve[e]=function(t,e,i){var s,o,r=e.toLowerCase();return i||(o=ve[r],ve[r]=s,s=null!=n(t,e,i)?r:null,ve[r]=o),s}}));var ye=/^(?:input|select|textarea|button)$/i,be=/^(?:a|area)$/i;function xe(t){return(t.match(z)||[]).join(" ")}function we(t){return t.getAttribute&&t.getAttribute("class")||""}function _e(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(z)||[]}C.fn.extend({prop:function(t,e){return Z(this,C.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[C.propFix[t]||t]}))}}),C.extend({prop:function(t,e,n){var i,s,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&C.isXMLDoc(t)||(e=C.propFix[e]||e,s=C.propHooks[e]),void 0!==n?s&&"set"in s&&void 0!==(i=s.set(t,n,e))?i:t[e]=n:s&&"get"in s&&null!==(i=s.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=C.find.attr(t,"tabindex");return e?parseInt(e,10):ye.test(t.nodeName)||be.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(C.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){C.propFix[this.toLowerCase()]=this})),C.fn.extend({addClass:function(t){var e,n,i,s,o,r,a,l=0;if(y(t))return this.each((function(e){C(this).addClass(t.call(this,e,we(this)))}));if((e=_e(t)).length)for(;n=this[l++];)if(s=we(n),i=1===n.nodeType&&" "+xe(s)+" "){for(r=0;o=e[r++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");s!==(a=xe(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,s,o,r,a,l=0;if(y(t))return this.each((function(e){C(this).removeClass(t.call(this,e,we(this)))}));if(!arguments.length)return this.attr("class","");if((e=_e(t)).length)for(;n=this[l++];)if(s=we(n),i=1===n.nodeType&&" "+xe(s)+" "){for(r=0;o=e[r++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");s!==(a=xe(i))&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t,i="string"===n||Array.isArray(t);return"boolean"==typeof e&&i?e?this.addClass(t):this.removeClass(t):y(t)?this.each((function(n){C(this).toggleClass(t.call(this,n,we(this),e),e)})):this.each((function(){var e,s,o,r;if(i)for(s=0,o=C(this),r=_e(t);e=r[s++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=we(this))&&J.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":J.get(this,"__className__")||""))}))},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+xe(we(n))+" ").indexOf(e)>-1)return!0;return!1}});var Ce=/\r/g;C.fn.extend({val:function(t){var e,n,i,s=this[0];return arguments.length?(i=y(t),this.each((function(n){var s;1===this.nodeType&&(null==(s=i?t.call(this,n,C(this).val()):t)?s="":"number"==typeof s?s+="":Array.isArray(s)&&(s=C.map(s,(function(t){return null==t?"":t+""}))),(e=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,s,"value")||(this.value=s))}))):s?(e=C.valHooks[s.type]||C.valHooks[s.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(s,"value"))?n:"string"==typeof(n=s.value)?n.replace(Ce,""):null==n?"":n:void 0}}),C.extend({valHooks:{option:{get:function(t){var e=C.find.attr(t,"value");return null!=e?e:xe(C.text(t))}},select:{get:function(t){var e,n,i,s=t.options,o=t.selectedIndex,r="select-one"===t.type,a=r?null:[],l=r?o+1:s.length;for(i=o<0?l:r?o:0;i<l;i++)if(((n=s[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!P(n.parentNode,"optgroup"))){if(e=C(n).val(),r)return e;a.push(e)}return a},set:function(t,e){for(var n,i,s=t.options,o=C.makeArray(e),r=s.length;r--;)((i=s[r]).selected=C.inArray(C.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),C.each(["radio","checkbox"],(function(){C.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=C.inArray(C(t).val(),e)>-1}},v.checkOn||(C.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),v.focusin="onfocusin"in n;var $e=/^(?:focusinfocus|focusoutblur)$/,Te=function(t){t.stopPropagation()};C.extend(C.event,{trigger:function(t,e,i,s){var o,a,l,c,u,h,d,p,g=[i||r],m=f.call(t,"type")?t.type:t,v=f.call(t,"namespace")?t.namespace.split("."):[];if(a=p=l=i=i||r,3!==i.nodeType&&8!==i.nodeType&&!$e.test(m+C.event.triggered)&&(m.indexOf(".")>-1&&(v=m.split("."),m=v.shift(),v.sort()),u=m.indexOf(":")<0&&"on"+m,(t=t[C.expando]?t:new C.Event(m,"object"==typeof t&&t)).isTrigger=s?2:3,t.namespace=v.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:C.makeArray(e,[t]),d=C.event.special[m]||{},s||!d.trigger||!1!==d.trigger.apply(i,e))){if(!s&&!d.noBubble&&!b(i)){for(c=d.delegateType||m,$e.test(c+m)||(a=a.parentNode);a;a=a.parentNode)g.push(a),l=a;l===(i.ownerDocument||r)&&g.push(l.defaultView||l.parentWindow||n)}for(o=0;(a=g[o++])&&!t.isPropagationStopped();)p=a,t.type=o>1?c:d.bindType||m,(h=(J.get(a,"events")||{})[t.type]&&J.get(a,"handle"))&&h.apply(a,e),(h=u&&a[u])&&h.apply&&K(a)&&(t.result=h.apply(a,e),!1===t.result&&t.preventDefault());return t.type=m,s||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(g.pop(),e)||!K(i)||u&&y(i[m])&&!b(i)&&((l=i[u])&&(i[u]=null),C.event.triggered=m,t.isPropagationStopped()&&p.addEventListener(m,Te),i[m](),t.isPropagationStopped()&&p.removeEventListener(m,Te),C.event.triggered=void 0,l&&(i[u]=l)),t.result}},simulate:function(t,e,n){var i=C.extend(new C.Event,n,{type:t,isSimulated:!0});C.event.trigger(i,null,e)}}),C.fn.extend({trigger:function(t,e){return this.each((function(){C.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return C.event.trigger(t,e,n,!0)}}),v.focusin||C.each({focus:"focusin",blur:"focusout"},(function(t,e){var n=function(t){C.event.simulate(e,t.target,C.event.fix(t))};C.event.special[e]={setup:function(){var i=this.ownerDocument||this,s=J.access(i,e);s||i.addEventListener(t,n,!0),J.access(i,e,(s||0)+1)},teardown:function(){var i=this.ownerDocument||this,s=J.access(i,e)-1;s?J.access(i,e,s):(i.removeEventListener(t,n,!0),J.remove(i,e))}}}));var Se=n.location,Ae=Date.now(),ke=/\?/;C.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||C.error("Invalid XML: "+t),e};var Ee=/\[\]$/,Pe=/\r?\n/g,Me=/^(?:submit|button|image|reset|file)$/i,Fe=/^(?:input|select|textarea|keygen)/i;function De(t,e,n,i){var s;if(Array.isArray(e))C.each(e,(function(e,s){n||Ee.test(t)?i(t,s):De(t+"["+("object"==typeof s&&null!=s?e:"")+"]",s,n,i)}));else if(n||"object"!==_(e))i(t,e);else for(s in e)De(t+"["+s+"]",e[s],n,i)}C.param=function(t,e){var n,i=[],s=function(t,e){var n=y(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!C.isPlainObject(t))C.each(t,(function(){s(this.name,this.value)}));else for(n in t)De(n,t[n],e,s);return i.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=C.prop(this,"elements");return t?C.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!C(this).is(":disabled")&&Fe.test(this.nodeName)&&!Me.test(t)&&(this.checked||!gt.test(t))})).map((function(t,e){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,(function(t){return{name:e.name,value:t.replace(Pe,"\r\n")}})):{name:e.name,value:n.replace(Pe,"\r\n")}})).get()}});var Le=/%20/g,Ie=/#.*$/,Ne=/([?&])_=[^&]*/,Re=/^(.*?):[ \t]*([^\r\n]*)$/gm,ze=/^(?:GET|HEAD)$/,je=/^\/\//,He={},qe={},Oe="*/".concat("*"),Be=r.createElement("a");function We(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,s=0,o=e.toLowerCase().match(z)||[];if(y(n))for(;i=o[s++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function Ze(t,e,n,i){var s={},o=t===qe;function r(a){var l;return s[a]=!0,C.each(t[a]||[],(function(t,a){var c=a(e,n,i);return"string"!=typeof c||o||s[c]?o?!(l=c):void 0:(e.dataTypes.unshift(c),r(c),!1)})),l}return r(e.dataTypes[0])||!s["*"]&&r("*")}function Ve(t,e){var n,i,s=C.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((s[n]?t:i||(i={}))[n]=e[n]);return i&&C.extend(!0,t,i),t}Be.href=Se.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Se.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Se.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Oe,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ve(Ve(t,C.ajaxSettings),e):Ve(C.ajaxSettings,t)},ajaxPrefilter:We(He),ajaxTransport:We(qe),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,s,o,a,l,c,u,h,d,p,f=C.ajaxSetup({},e),g=f.context||f,m=f.context&&(g.nodeType||g.jquery)?C(g):C.event,v=C.Deferred(),y=C.Callbacks("once memory"),b=f.statusCode||{},x={},w={},_="canceled",$={readyState:0,getResponseHeader:function(t){var e;if(u){if(!a)for(a={};e=Re.exec(o);)a[e[1].toLowerCase()+" "]=(a[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=a[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return u?o:null},setRequestHeader:function(t,e){return null==u&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,x[t]=e),this},overrideMimeType:function(t){return null==u&&(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(u)$.always(t[$.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||_;return i&&i.abort(e),T(0,e),this}};if(v.promise($),f.url=((t||f.url||Se.href)+"").replace(je,Se.protocol+"//"),f.type=e.method||e.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(z)||[""],null==f.crossDomain){c=r.createElement("a");try{c.href=f.url,c.href=c.href,f.crossDomain=Be.protocol+"//"+Be.host!=c.protocol+"//"+c.host}catch(t){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=C.param(f.data,f.traditional)),Ze(He,f,e,$),u)return $;for(d in(h=C.event&&f.global)&&0==C.active++&&C.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!ze.test(f.type),s=f.url.replace(Ie,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Le,"+")):(p=f.url.slice(s.length),f.data&&(f.processData||"string"==typeof f.data)&&(s+=(ke.test(s)?"&":"?")+f.data,delete f.data),!1===f.cache&&(s=s.replace(Ne,"$1"),p=(ke.test(s)?"&":"?")+"_="+Ae+++p),f.url=s+p),f.ifModified&&(C.lastModified[s]&&$.setRequestHeader("If-Modified-Since",C.lastModified[s]),C.etag[s]&&$.setRequestHeader("If-None-Match",C.etag[s])),(f.data&&f.hasContent&&!1!==f.contentType||e.contentType)&&$.setRequestHeader("Content-Type",f.contentType),$.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Oe+"; q=0.01":""):f.accepts["*"]),f.headers)$.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(g,$,f)||u))return $.abort();if(_="abort",y.add(f.complete),$.done(f.success),$.fail(f.error),i=Ze(qe,f,e,$)){if($.readyState=1,h&&m.trigger("ajaxSend",[$,f]),u)return $;f.async&&f.timeout>0&&(l=n.setTimeout((function(){$.abort("timeout")}),f.timeout));try{u=!1,i.send(x,T)}catch(t){if(u)throw t;T(-1,t)}}else T(-1,"No Transport");function T(t,e,r,a){var c,d,p,x,w,_=e;u||(u=!0,l&&n.clearTimeout(l),i=void 0,o=a||"",$.readyState=t>0?4:0,c=t>=200&&t<300||304===t,r&&(x=function(t,e,n){for(var i,s,o,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(s in a)if(a[s]&&a[s].test(i)){l.unshift(s);break}if(l[0]in n)o=l[0];else{for(s in n){if(!l[0]||t.converters[s+" "+l[0]]){o=s;break}r||(r=s)}o=o||r}if(o)return o!==l[0]&&l.unshift(o),n[o]}(f,$,r)),x=function(t,e,n,i){var s,o,r,a,l,c={},u=t.dataTypes.slice();if(u[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(o=u.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(r=c[l+" "+o]||c["* "+o]))for(s in c)if((a=s.split(" "))[1]===o&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[s]:!0!==c[s]&&(o=a[0],u.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(f,x,$,c),c?(f.ifModified&&((w=$.getResponseHeader("Last-Modified"))&&(C.lastModified[s]=w),(w=$.getResponseHeader("etag"))&&(C.etag[s]=w)),204===t||"HEAD"===f.type?_="nocontent":304===t?_="notmodified":(_=x.state,d=x.data,c=!(p=x.error))):(p=_,!t&&_||(_="error",t<0&&(t=0))),$.status=t,$.statusText=(e||_)+"",c?v.resolveWith(g,[d,_,$]):v.rejectWith(g,[$,_,p]),$.statusCode(b),b=void 0,h&&m.trigger(c?"ajaxSuccess":"ajaxError",[$,f,c?d:p]),y.fireWith(g,[$,_]),h&&(m.trigger("ajaxComplete",[$,f]),--C.active||C.event.trigger("ajaxStop")))}return $},getJSON:function(t,e,n){return C.get(t,e,n,"json")},getScript:function(t,e){return C.get(t,void 0,e,"script")}}),C.each(["get","post"],(function(t,e){C[e]=function(t,n,i,s){return y(n)&&(s=s||i,i=n,n=void 0),C.ajax(C.extend({url:t,type:e,dataType:s,data:n,success:i},C.isPlainObject(t)&&t))}})),C._evalUrl=function(t,e){return C.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){C.globalEval(t,e)}})},C.fn.extend({wrapAll:function(t){var e;return this[0]&&(y(t)&&(t=t.call(this[0])),e=C(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return y(t)?this.each((function(e){C(this).wrapInner(t.call(this,e))})):this.each((function(){var e=C(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=y(t);return this.each((function(n){C(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){C(this).replaceWith(this.childNodes)})),this}}),C.expr.pseudos.hidden=function(t){return!C.expr.pseudos.visible(t)},C.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var Ye={0:200,1223:204},Xe=C.ajaxSettings.xhr();v.cors=!!Xe&&"withCredentials"in Xe,v.ajax=Xe=!!Xe,C.ajaxTransport((function(t){var e,i;if(v.cors||Xe&&!t.crossDomain)return{send:function(s,o){var r,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)a[r]=t.xhrFields[r];for(r in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||s["X-Requested-With"]||(s["X-Requested-With"]="XMLHttpRequest"),s)a.setRequestHeader(r,s[r]);e=function(t){return function(){e&&(e=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Ye[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),i=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout((function(){e&&i()}))},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),C.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return C.globalEval(t),t}}}),C.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),C.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(i,s){e=C("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&s("error"===t.type?404:200,t.type)}),r.head.appendChild(e[0])},abort:function(){n&&n()}}}));var Ue,Ke=[],Ge=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ke.pop()||C.expando+"_"+Ae++;return this[t]=!0,t}}),C.ajaxPrefilter("json jsonp",(function(t,e,i){var s,o,r,a=!1!==t.jsonp&&(Ge.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ge.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return s=t.jsonpCallback=y(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Ge,"$1"+s):!1!==t.jsonp&&(t.url+=(ke.test(t.url)?"&":"?")+t.jsonp+"="+s),t.converters["script json"]=function(){return r||C.error(s+" was not called"),r[0]},t.dataTypes[0]="json",o=n[s],n[s]=function(){r=arguments},i.always((function(){void 0===o?C(n).removeProp(s):n[s]=o,t[s]&&(t.jsonpCallback=e.jsonpCallback,Ke.push(s)),r&&y(o)&&o(r[0]),r=o=void 0})),"script"})),v.createHTMLDocument=((Ue=r.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ue.childNodes.length),C.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(v.createHTMLDocument?((i=(e=r.implementation.createHTMLDocument("")).createElement("base")).href=r.location.href,e.head.appendChild(i)):e=r),o=!n&&[],(s=M.exec(t))?[e.createElement(s[1])]:(s=$t([t],e,o),o&&o.length&&C(o).remove(),C.merge([],s.childNodes)));var i,s,o},C.fn.load=function(t,e,n){var i,s,o,r=this,a=t.indexOf(" ");return a>-1&&(i=xe(t.slice(a)),t=t.slice(0,a)),y(e)?(n=e,e=void 0):e&&"object"==typeof e&&(s="POST"),r.length>0&&C.ajax({url:t,type:s||"GET",dataType:"html",data:e}).done((function(t){o=arguments,r.html(i?C("<div>").append(C.parseHTML(t)).find(i):t)})).always(n&&function(t,e){r.each((function(){n.apply(this,o||[t.responseText,e,t])}))}),this},C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){C.fn[e]=function(t){return this.on(e,t)}})),C.expr.pseudos.animated=function(t){return C.grep(C.timers,(function(e){return t===e.elem})).length},C.offset={setOffset:function(t,e,n){var i,s,o,r,a,l,c=C.css(t,"position"),u=C(t),h={};"static"===c&&(t.style.position="relative"),a=u.offset(),o=C.css(t,"top"),l=C.css(t,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(r=(i=u.position()).top,s=i.left):(r=parseFloat(o)||0,s=parseFloat(l)||0),y(e)&&(e=e.call(t,n,C.extend({},a))),null!=e.top&&(h.top=e.top-a.top+r),null!=e.left&&(h.left=e.left-a.left+s),"using"in e?e.using.call(t,h):u.css(h)}},C.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){C.offset.setOffset(this,t,e)}));var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],s={top:0,left:0};if("fixed"===C.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===C.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((s=C(t).offset()).top+=C.css(t,"borderTopWidth",!0),s.left+=C.css(t,"borderLeftWidth",!0))}return{top:e.top-s.top-C.css(i,"marginTop",!0),left:e.left-s.left-C.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===C.css(t,"position");)t=t.offsetParent;return t||rt}))}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;C.fn[t]=function(i){return Z(this,(function(t,i,s){var o;if(b(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===s)return o?o[e]:t[i];o?o.scrollTo(n?o.pageXOffset:s,n?s:o.pageYOffset):t[i]=s}),t,i,arguments.length)}})),C.each(["top","left"],(function(t,e){C.cssHooks[e]=Xt(v.pixelPosition,(function(t,n){if(n)return n=Yt(t,e),Wt.test(n)?C(t).position()[e]+"px":n}))})),C.each({Height:"height",Width:"width"},(function(t,e){C.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,i){C.fn[i]=function(s,o){var r=arguments.length&&(n||"boolean"!=typeof s),a=n||(!0===s||!0===o?"margin":"border");return Z(this,(function(e,n,s){var o;return b(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===s?C.css(e,n,a):C.style(e,n,s,a)}),e,r?s:void 0,r)}}))})),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){C.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}})),C.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),C.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),C.proxy=function(t,e){var n,i,s;if("string"==typeof e&&(n=t[e],e=t,t=n),y(t))return i=l.call(arguments,2),(s=function(){return t.apply(e||this,i.concat(l.call(arguments)))}).guid=t.guid=t.guid||C.guid++,s},C.holdReady=function(t){t?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=P,C.isFunction=y,C.isWindow=b,C.camelCase=U,C.type=_,C.now=Date.now,C.isNumeric=function(t){var e=C.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},void 0===(i=function(){return C}.apply(e,[]))||(t.exports=i);var Je=n.jQuery,Qe=n.$;return C.noConflict=function(t){return n.$===C&&(n.$=Qe),t&&n.jQuery===C&&(n.jQuery=Je),C},s||(n.jQuery=n.$=C),C}))},function(t,e,n){var i,s,o;s=[n(0)],void 0===(o="function"==typeof(i=function(t){var e;t.extend(t.fn,{validate:function(e){if(this.length){var n=t.data(this[0],"validator");return n||(this.attr("novalidate","novalidate"),n=new t.validator(e,this[0]),t.data(this[0],"validator",n),n.settings.onsubmit&&(this.on("click.validate",":submit",(function(e){n.submitButton=e.currentTarget,t(this).hasClass("cancel")&&(n.cancelSubmit=!0),void 0!==t(this).attr("formnovalidate")&&(n.cancelSubmit=!0)})),this.on("submit.validate",(function(e){function i(){var i,s;return n.submitButton&&(n.settings.submitHandler||n.formSubmitted)&&(i=t("<input type='hidden'/>").attr("name",n.submitButton.name).val(t(n.submitButton).val()).appendTo(n.currentForm)),!(n.settings.submitHandler&&!n.settings.debug)||(s=n.settings.submitHandler.call(n,n.currentForm,e),i&&i.remove(),void 0!==s&&s)}return n.settings.debug&&e.preventDefault(),n.cancelSubmit?(n.cancelSubmit=!1,i()):n.form()?n.pendingRequest?(n.formSubmitted=!0,!1):i():(n.focusInvalid(),!1)}))),n)}e&&e.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing.")},valid:function(){var e,n,i;return t(this[0]).is("form")?e=this.validate().form():(i=[],e=!0,n=t(this[0].form).validate(),this.each((function(){(e=n.element(this)&&e)||(i=i.concat(n.errorList))})),n.errorList=i),e},rules:function(e,n){var i,s,o,r,a,l,c=this[0],u=void 0!==this.attr("contenteditable")&&"false"!==this.attr("contenteditable");if(null!=c&&(!c.form&&u&&(c.form=this.closest("form")[0],c.name=this.attr("name")),null!=c.form)){if(e)switch(s=(i=t.data(c.form,"validator").settings).rules,o=t.validator.staticRules(c),e){case"add":t.extend(o,t.validator.normalizeRule(n)),delete o.messages,s[c.name]=o,n.messages&&(i.messages[c.name]=t.extend(i.messages[c.name],n.messages));break;case"remove":return n?(l={},t.each(n.split(/\s/),(function(t,e){l[e]=o[e],delete o[e]})),l):(delete s[c.name],o)}return(r=t.validator.normalizeRules(t.extend({},t.validator.classRules(c),t.validator.attributeRules(c),t.validator.dataRules(c),t.validator.staticRules(c)),c)).required&&(a=r.required,delete r.required,r=t.extend({required:a},r)),r.remote&&(a=r.remote,delete r.remote,r=t.extend(r,{remote:a})),r}}}),t.extend(t.expr.pseudos||t.expr[":"],{blank:function(e){return!t.trim(""+t(e).val())},filled:function(e){var n=t(e).val();return null!==n&&!!t.trim(""+n)},unchecked:function(e){return!t(e).prop("checked")}}),t.validator=function(e,n){this.settings=t.extend(!0,{},t.validator.defaults,e),this.currentForm=n,this.init()},t.validator.format=function(e,n){return 1===arguments.length?function(){var n=t.makeArray(arguments);return n.unshift(e),t.validator.format.apply(this,n)}:void 0===n?e:(arguments.length>2&&n.constructor!==Array&&(n=t.makeArray(arguments).slice(1)),n.constructor!==Array&&(n=[n]),t.each(n,(function(t,n){e=e.replace(new RegExp("\\{"+t+"\\}","g"),(function(){return n}))})),e)},t.extend(t.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:t([]),errorLabelContainer:t([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(t){this.lastActive=t,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,t,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(t)))},onfocusout:function(t){this.checkable(t)||!(t.name in this.submitted)&&this.optional(t)||this.element(t)},onkeyup:function(e,n){9===n.which&&""===this.elementValue(e)||-1!==t.inArray(n.keyCode,[16,17,18,20,35,36,37,38,39,40,45,144,225])||(e.name in this.submitted||e.name in this.invalid)&&this.element(e)},onclick:function(t){t.name in this.submitted?this.element(t):t.parentNode.name in this.submitted&&this.element(t.parentNode)},highlight:function(e,n,i){"radio"===e.type?this.findByName(e.name).addClass(n).removeClass(i):t(e).addClass(n).removeClass(i)},unhighlight:function(e,n,i){"radio"===e.type?this.findByName(e.name).removeClass(n).addClass(i):t(e).removeClass(n).addClass(i)}},setDefaults:function(e){t.extend(t.validator.defaults,e)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:t.validator.format("Please enter no more than {0} characters."),minlength:t.validator.format("Please enter at least {0} characters."),rangelength:t.validator.format("Please enter a value between {0} and {1} characters long."),range:t.validator.format("Please enter a value between {0} and {1}."),max:t.validator.format("Please enter a value less than or equal to {0}."),min:t.validator.format("Please enter a value greater than or equal to {0}."),step:t.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){this.labelContainer=t(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||t(this.currentForm),this.containers=t(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var e,n=this.currentForm,i=this.groups={};function s(e){var i=void 0!==t(this).attr("contenteditable")&&"false"!==t(this).attr("contenteditable");if(!this.form&&i&&(this.form=t(this).closest("form")[0],this.name=t(this).attr("name")),n===this.form){var s=t.data(this.form,"validator"),o="on"+e.type.replace(/^validate/,""),r=s.settings;r[o]&&!t(this).is(r.ignore)&&r[o].call(s,this,e)}}t.each(this.settings.groups,(function(e,n){"string"==typeof n&&(n=n.split(/\s/)),t.each(n,(function(t,n){i[n]=e}))})),e=this.settings.rules,t.each(e,(function(n,i){e[n]=t.validator.normalizeRule(i)})),t(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",s).on("click.validate","select, option, [type='radio'], [type='checkbox']",s),this.settings.invalidHandler&&t(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler)},form:function(){return this.checkForm(),t.extend(this.submitted,this.errorMap),this.invalid=t.extend({},this.errorMap),this.valid()||t(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var t=0,e=this.currentElements=this.elements();e[t];t++)this.check(e[t]);return this.valid()},element:function(e){var n,i,s=this.clean(e),o=this.validationTargetFor(s),r=this,a=!0;return void 0===o?delete this.invalid[s.name]:(this.prepareElement(o),this.currentElements=t(o),(i=this.groups[o.name])&&t.each(this.groups,(function(t,e){e===i&&t!==o.name&&(s=r.validationTargetFor(r.clean(r.findByName(t))))&&s.name in r.invalid&&(r.currentElements.push(s),a=r.check(s)&&a)})),n=!1!==this.check(o),a=a&&n,this.invalid[o.name]=!n,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),t(e).attr("aria-invalid",!n)),a},showErrors:function(e){if(e){var n=this;t.extend(this.errorMap,e),this.errorList=t.map(this.errorMap,(function(t,e){return{message:t,element:n.findByName(e)[0]}})),this.successList=t.grep(this.successList,(function(t){return!(t.name in e)}))}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){t.fn.resetForm&&t(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var e=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(e)},resetElements:function(t){var e;if(this.settings.unhighlight)for(e=0;t[e];e++)this.settings.unhighlight.call(this,t[e],this.settings.errorClass,""),this.findByName(t[e].name).removeClass(this.settings.validClass);else t.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(t){var e,n=0;for(e in t)void 0!==t[e]&&null!==t[e]&&!1!==t[e]&&n++;return n},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(t){t.not(this.containers).text(""),this.addWrapper(t).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{t(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").trigger("focus").trigger("focusin")}catch(t){}},findLastActive:function(){var e=this.lastActive;return e&&1===t.grep(this.errorList,(function(t){return t.element.name===e.name})).length&&e},elements:function(){var e=this,n={};return t(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter((function(){var i=this.name||t(this).attr("name"),s=void 0!==t(this).attr("contenteditable")&&"false"!==t(this).attr("contenteditable");return!i&&e.settings.debug&&window.console&&console.error("%o has no name assigned",this),s&&(this.form=t(this).closest("form")[0],this.name=i),!(this.form!==e.currentForm||i in n||!e.objectLength(t(this).rules())||(n[i]=!0,0))}))},clean:function(e){return t(e)[0]},errors:function(){var e=this.settings.errorClass.split(" ").join(".");return t(this.settings.errorElement+"."+e,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=t([]),this.toHide=t([])},reset:function(){this.resetInternals(),this.currentElements=t([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(t){this.reset(),this.toHide=this.errorsFor(t)},elementValue:function(e){var n,i,s=t(e),o=e.type,r=void 0!==s.attr("contenteditable")&&"false"!==s.attr("contenteditable");return"radio"===o||"checkbox"===o?this.findByName(e.name).filter(":checked").val():"number"===o&&void 0!==e.validity?e.validity.badInput?"NaN":s.val():(n=r?s.text():s.val(),"file"===o?"C:\\fakepath\\"===n.substr(0,12)?n.substr(12):(i=n.lastIndexOf("/"))>=0?n.substr(i+1):(i=n.lastIndexOf("\\"))>=0?n.substr(i+1):n:"string"==typeof n?n.replace(/\r/g,""):n)},check:function(e){e=this.validationTargetFor(this.clean(e));var n,i,s,o,r=t(e).rules(),a=t.map(r,(function(t,e){return e})).length,l=!1,c=this.elementValue(e);for(i in"function"==typeof r.normalizer?o=r.normalizer:"function"==typeof this.settings.normalizer&&(o=this.settings.normalizer),o&&(c=o.call(e,c),delete r.normalizer),r){s={method:i,parameters:r[i]};try{if("dependency-mismatch"===(n=t.validator.methods[i].call(this,c,e,s.parameters))&&1===a){l=!0;continue}if(l=!1,"pending"===n)return void(this.toHide=this.toHide.not(this.errorsFor(e)));if(!n)return this.formatAndAdd(e,s),!1}catch(t){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+e.id+", check the '"+s.method+"' method.",t),t instanceof TypeError&&(t.message+=".  Exception occurred when checking element "+e.id+", check the '"+s.method+"' method."),t}}if(!l)return this.objectLength(r)&&this.successList.push(e),!0},customDataMessage:function(e,n){return t(e).data("msg"+n.charAt(0).toUpperCase()+n.substring(1).toLowerCase())||t(e).data("msg")},customMessage:function(t,e){var n=this.settings.messages[t];return n&&(n.constructor===String?n:n[e])},findDefined:function(){for(var t=0;t<arguments.length;t++)if(void 0!==arguments[t])return arguments[t]},defaultMessage:function(e,n){"string"==typeof n&&(n={method:n});var i=this.findDefined(this.customMessage(e.name,n.method),this.customDataMessage(e,n.method),!this.settings.ignoreTitle&&e.title||void 0,t.validator.messages[n.method],"<strong>Warning: No message defined for "+e.name+"</strong>"),s=/\$?\{(\d+)\}/g;return"function"==typeof i?i=i.call(this,n.parameters,e):s.test(i)&&(i=t.validator.format(i.replace(s,"{$1}"),n.parameters)),i},formatAndAdd:function(t,e){var n=this.defaultMessage(t,e);this.errorList.push({message:n,element:t,method:e.method}),this.errorMap[t.name]=n,this.submitted[t.name]=n},addWrapper:function(t){return this.settings.wrapper&&(t=t.add(t.parent(this.settings.wrapper))),t},defaultShowErrors:function(){var t,e,n;for(t=0;this.errorList[t];t++)n=this.errorList[t],this.settings.highlight&&this.settings.highlight.call(this,n.element,this.settings.errorClass,this.settings.validClass),this.showLabel(n.element,n.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(t=0;this.successList[t];t++)this.showLabel(this.successList[t]);if(this.settings.unhighlight)for(t=0,e=this.validElements();e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return t(this.errorList).map((function(){return this.element}))},showLabel:function(e,n){var i,s,o,r,a=this.errorsFor(e),l=this.idOrName(e),c=t(e).attr("aria-describedby");a.length?(a.removeClass(this.settings.validClass).addClass(this.settings.errorClass),a.html(n)):(i=a=t("<"+this.settings.errorElement+">").attr("id",l+"-error").addClass(this.settings.errorClass).html(n||""),this.settings.wrapper&&(i=a.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(i):this.settings.errorPlacement?this.settings.errorPlacement.call(this,i,t(e)):i.insertAfter(e),a.is("label")?a.attr("for",l):0===a.parents("label[for='"+this.escapeCssMeta(l)+"']").length&&(o=a.attr("id"),c?c.match(new RegExp("\\b"+this.escapeCssMeta(o)+"\\b"))||(c+=" "+o):c=o,t(e).attr("aria-describedby",c),(s=this.groups[e.name])&&(r=this,t.each(r.groups,(function(e,n){n===s&&t("[name='"+r.escapeCssMeta(e)+"']",r.currentForm).attr("aria-describedby",a.attr("id"))}))))),!n&&this.settings.success&&(a.text(""),"string"==typeof this.settings.success?a.addClass(this.settings.success):this.settings.success(a,e)),this.toShow=this.toShow.add(a)},errorsFor:function(e){var n=this.escapeCssMeta(this.idOrName(e)),i=t(e).attr("aria-describedby"),s="label[for='"+n+"'], label[for='"+n+"'] *";return i&&(s=s+", #"+this.escapeCssMeta(i).replace(/\s+/g,", #")),this.errors().filter(s)},escapeCssMeta:function(t){return t.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(t){return this.groups[t.name]||(this.checkable(t)?t.name:t.id||t.name)},validationTargetFor:function(e){return this.checkable(e)&&(e=this.findByName(e.name)),t(e).not(this.settings.ignore)[0]},checkable:function(t){return/radio|checkbox/i.test(t.type)},findByName:function(e){return t(this.currentForm).find("[name='"+this.escapeCssMeta(e)+"']")},getLength:function(e,n){switch(n.nodeName.toLowerCase()){case"select":return t("option:selected",n).length;case"input":if(this.checkable(n))return this.findByName(n.name).filter(":checked").length}return e.length},depend:function(t,e){return!this.dependTypes[typeof t]||this.dependTypes[typeof t](t,e)},dependTypes:{boolean:function(t){return t},string:function(e,n){return!!t(e,n.form).length},function:function(t,e){return t(e)}},optional:function(e){var n=this.elementValue(e);return!t.validator.methods.required.call(this,n,e)&&"dependency-mismatch"},startRequest:function(e){this.pending[e.name]||(this.pendingRequest++,t(e).addClass(this.settings.pendingClass),this.pending[e.name]=!0)},stopRequest:function(e,n){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[e.name],t(e).removeClass(this.settings.pendingClass),n&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(t(this.currentForm).submit(),this.submitButton&&t("input:hidden[name='"+this.submitButton.name+"']",this.currentForm).remove(),this.formSubmitted=!1):!n&&0===this.pendingRequest&&this.formSubmitted&&(t(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(e,n){return n="string"==typeof n&&n||"remote",t.data(e,"previousValue")||t.data(e,"previousValue",{old:null,valid:!0,message:this.defaultMessage(e,{method:n})})},destroy:function(){this.resetForm(),t(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur").find(".validate-lessThan-blur").off(".validate-lessThan").removeClass("validate-lessThan-blur").find(".validate-lessThanEqual-blur").off(".validate-lessThanEqual").removeClass("validate-lessThanEqual-blur").find(".validate-greaterThanEqual-blur").off(".validate-greaterThanEqual").removeClass("validate-greaterThanEqual-blur").find(".validate-greaterThan-blur").off(".validate-greaterThan").removeClass("validate-greaterThan-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(e,n){e.constructor===String?this.classRuleSettings[e]=n:t.extend(this.classRuleSettings,e)},classRules:function(e){var n={},i=t(e).attr("class");return i&&t.each(i.split(" "),(function(){this in t.validator.classRuleSettings&&t.extend(n,t.validator.classRuleSettings[this])})),n},normalizeAttributeRule:function(t,e,n,i){/min|max|step/.test(n)&&(null===e||/number|range|text/.test(e))&&(i=Number(i),isNaN(i)&&(i=void 0)),i||0===i?t[n]=i:e===n&&"range"!==e&&(t[n]=!0)},attributeRules:function(e){var n,i,s={},o=t(e),r=e.getAttribute("type");for(n in t.validator.methods)"required"===n?(""===(i=e.getAttribute(n))&&(i=!0),i=!!i):i=o.attr(n),this.normalizeAttributeRule(s,r,n,i);return s.maxlength&&/-1|2147483647|524288/.test(s.maxlength)&&delete s.maxlength,s},dataRules:function(e){var n,i,s={},o=t(e),r=e.getAttribute("type");for(n in t.validator.methods)""===(i=o.data("rule"+n.charAt(0).toUpperCase()+n.substring(1).toLowerCase()))&&(i=!0),this.normalizeAttributeRule(s,r,n,i);return s},staticRules:function(e){var n={},i=t.data(e.form,"validator");return i.settings.rules&&(n=t.validator.normalizeRule(i.settings.rules[e.name])||{}),n},normalizeRules:function(e,n){return t.each(e,(function(i,s){if(!1!==s){if(s.param||s.depends){var o=!0;switch(typeof s.depends){case"string":o=!!t(s.depends,n.form).length;break;case"function":o=s.depends.call(n,n)}o?e[i]=void 0===s.param||s.param:(t.data(n.form,"validator").resetElements(t(n)),delete e[i])}}else delete e[i]})),t.each(e,(function(i,s){e[i]=t.isFunction(s)&&"normalizer"!==i?s(n):s})),t.each(["minlength","maxlength"],(function(){e[this]&&(e[this]=Number(e[this]))})),t.each(["rangelength","range"],(function(){var n;e[this]&&(t.isArray(e[this])?e[this]=[Number(e[this][0]),Number(e[this][1])]:"string"==typeof e[this]&&(n=e[this].replace(/[\[\]]/g,"").split(/[\s,]+/),e[this]=[Number(n[0]),Number(n[1])]))})),t.validator.autoCreateRanges&&(null!=e.min&&null!=e.max&&(e.range=[e.min,e.max],delete e.min,delete e.max),null!=e.minlength&&null!=e.maxlength&&(e.rangelength=[e.minlength,e.maxlength],delete e.minlength,delete e.maxlength)),e},normalizeRule:function(e){if("string"==typeof e){var n={};t.each(e.split(/\s/),(function(){n[this]=!0})),e=n}return e},addMethod:function(e,n,i){t.validator.methods[e]=n,t.validator.messages[e]=void 0!==i?i:t.validator.messages[e],n.length<3&&t.validator.addClassRules(e,t.validator.normalizeRule(e))},methods:{required:function(e,n,i){if(!this.depend(i,n))return"dependency-mismatch";if("select"===n.nodeName.toLowerCase()){var s=t(n).val();return s&&s.length>0}return this.checkable(n)?this.getLength(e,n)>0:null!=e&&e.length>0},email:function(t,e){return this.optional(e)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(t)},url:function(t,e){return this.optional(e)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(t)},date:(e=!1,function(t,n){return e||(e=!0,this.settings.debug&&window.console&&console.warn("The `date` method is deprecated and will be removed in version '2.0.0'.\nPlease don't use it, since it relies on the Date constructor, which\nbehaves very differently across browsers and locales. Use `dateISO`\ninstead or one of the locale specific methods in `localizations/`\nand `additional-methods.js`.")),this.optional(n)||!/Invalid|NaN/.test(new Date(t).toString())}),dateISO:function(t,e){return this.optional(e)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(t)},number:function(t,e){return this.optional(e)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(t)},digits:function(t,e){return this.optional(e)||/^\d+$/.test(t)},minlength:function(e,n,i){var s=t.isArray(e)?e.length:this.getLength(e,n);return this.optional(n)||s>=i},maxlength:function(e,n,i){var s=t.isArray(e)?e.length:this.getLength(e,n);return this.optional(n)||s<=i},rangelength:function(e,n,i){var s=t.isArray(e)?e.length:this.getLength(e,n);return this.optional(n)||s>=i[0]&&s<=i[1]},min:function(t,e,n){return this.optional(e)||t>=n},max:function(t,e,n){return this.optional(e)||t<=n},range:function(t,e,n){return this.optional(e)||t>=n[0]&&t<=n[1]},step:function(e,n,i){var s,o=t(n).attr("type"),r="Step attribute on input type "+o+" is not supported.",a=new RegExp("\\b"+o+"\\b"),l=function(t){var e=(""+t).match(/(?:\.(\d+))?$/);return e&&e[1]?e[1].length:0},c=function(t){return Math.round(t*Math.pow(10,s))},u=!0;if(o&&!a.test(["text","number","range"].join()))throw new Error(r);return s=l(i),(l(e)>s||c(e)%c(i)!=0)&&(u=!1),this.optional(n)||u},equalTo:function(e,n,i){var s=t(i);return this.settings.onfocusout&&s.not(".validate-equalTo-blur").length&&s.addClass("validate-equalTo-blur").on("blur.validate-equalTo",(function(){t(n).valid()})),e===s.val()},remote:function(e,n,i,s){if(this.optional(n))return"dependency-mismatch";s="string"==typeof s&&s||"remote";var o,r,a,l=this.previousValue(n,s);return this.settings.messages[n.name]||(this.settings.messages[n.name]={}),l.originalMessage=l.originalMessage||this.settings.messages[n.name][s],this.settings.messages[n.name][s]=l.message,i="string"==typeof i&&{url:i}||i,a=t.param(t.extend({data:e},i.data)),l.old===a?l.valid:(l.old=a,o=this,this.startRequest(n),(r={})[n.name]=e,t.ajax(t.extend(!0,{mode:"abort",port:"validate"+n.name,dataType:"json",data:r,context:o.currentForm,success:function(t){var i,r,a,c=!0===t||"true"===t;o.settings.messages[n.name][s]=l.originalMessage,c?(a=o.formSubmitted,o.resetInternals(),o.toHide=o.errorsFor(n),o.formSubmitted=a,o.successList.push(n),o.invalid[n.name]=!1,o.showErrors()):(i={},r=t||o.defaultMessage(n,{method:s,parameters:e}),i[n.name]=l.message=r,o.invalid[n.name]=!0,o.showErrors(i)),l.valid=c,o.stopRequest(n,c)}},i)),"pending")}}});var n,i={};return t.ajaxPrefilter?t.ajaxPrefilter((function(t,e,n){var s=t.port;"abort"===t.mode&&(i[s]&&i[s].abort(),i[s]=n)})):(n=t.ajax,t.ajax=function(e){var s=("mode"in e?e:t.ajaxSettings).mode,o=("port"in e?e:t.ajaxSettings).port;return"abort"===s?(i[o]&&i[o].abort(),i[o]=n.apply(this,arguments),i[o]):n.apply(this,arguments)}),t})?i.apply(e,s):i)||(t.exports=o)},function(t,e,n){(function(t,e){var n,i;!function(t,n,i,s){function o(e,n){this.settings=null,this.options=t.extend({},o.Defaults,n),this.$element=t(e),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},t.each(["onResize","onThrottledResize"],t.proxy((function(e,n){this._handlers[n]=t.proxy(this[n],this)}),this)),t.each(o.Plugins,t.proxy((function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)}),this)),t.each(o.Workers,t.proxy((function(e,n){this._pipe.push({filter:n.filter,run:t.proxy(n.run,this)})}),this)),this.setup(),this.initialize()}o.Defaults={items:3,loop:!1,center:!1,rewind:!1,checkVisibility:!0,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:n,fallbackEasing:"swing",slideTransition:"",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},o.Width={Default:"default",Inner:"inner",Outer:"outer"},o.Type={Event:"event",State:"state"},o.Plugins={},o.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",n=!this.settings.autoWidth,i=this.settings.rtl,s={width:"auto","margin-left":i?e:"","margin-right":i?"":e};!n&&this.$stage.children().css(s),t.css=s}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,n=null,i=this._items.length,s=!this.settings.autoWidth,o=[];for(t.items={merge:!1,width:e};i--;)n=this._mergers[i],n=this.settings.mergeFit&&Math.min(n,this.settings.items)||n,t.items.merge=n>1||t.items.merge,o[i]=s?e*n:this._items[i].width();this._widths=o}},{filter:["items","settings"],run:function(){var e=[],n=this._items,i=this.settings,s=Math.max(2*i.items,4),o=2*Math.ceil(n.length/2),r=i.loop&&n.length?i.rewind?s:Math.max(s,o):0,a="",l="";for(r/=2;r>0;)e.push(this.normalize(e.length/2,!0)),a+=n[e[e.length-1]][0].outerHTML,e.push(this.normalize(n.length-1-(e.length-1)/2,!0)),l=n[e[e.length-1]][0].outerHTML+l,r-=1;this._clones=e,t(a).addClass("cloned").appendTo(this.$stage),t(l).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,n=-1,i=0,s=0,o=[];++n<e;)i=o[n-1]||0,s=this._widths[this.relative(n)]+this.settings.margin,o.push(i+s*t);this._coordinates=o}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,n={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(n)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,n=!this.settings.autoWidth,i=this.$stage.children();if(n&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],i.eq(e).css(t.css);else n&&(t.css.width=t.items.width,i.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,n,i,s=this.settings.rtl?1:-1,o=2*this.settings.stagePadding,r=this.coordinates(this.current())+o,a=r+this.width()*s,l=[];for(n=0,i=this._coordinates.length;n<i;n++)t=this._coordinates[n-1]||0,e=Math.abs(this._coordinates[n])+o*s,(this.op(t,"<=",r)&&this.op(t,">",a)||this.op(e,"<",r)&&this.op(e,">",a))&&l.push(n);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.$stage.children(".center").removeClass("center"),this.settings.center&&this.$stage.children().eq(this.current()).addClass("center")}}],o.prototype.initializeStage=function(){this.$stage=this.$element.find("."+this.settings.stageClass),this.$stage.length||(this.$element.addClass(this.options.loadingClass),this.$stage=t("<"+this.settings.stageElement+">",{class:this.settings.stageClass}).wrap(t("<div/>",{class:this.settings.stageOuterClass})),this.$element.append(this.$stage.parent()))},o.prototype.initializeItems=function(){var e=this.$element.find(".owl-item");if(e.length)return this._items=e.get().map((function(e){return t(e)})),this._mergers=this._items.map((function(){return 1})),void this.refresh();this.replace(this.$element.children().not(this.$stage.parent())),this.isVisible()?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass)},o.prototype.initialize=function(){var t,e,n;(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading"))&&(t=this.$element.find("img"),e=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:void 0,n=this.$element.children(e).width(),t.length&&n<=0&&this.preloadAutoWidthImages(t));this.initializeStage(),this.initializeItems(),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},o.prototype.isVisible=function(){return!this.settings.checkVisibility||this.$element.is(":visible")},o.prototype.setup=function(){var e=this.viewport(),n=this.options.responsive,i=-1,s=null;n?(t.each(n,(function(t){t<=e&&t>i&&(i=Number(t))})),"function"==typeof(s=t.extend({},this.options,n[i])).stagePadding&&(s.stagePadding=s.stagePadding()),delete s.responsive,s.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+i))):s=t.extend({},this.options),this.trigger("change",{property:{name:"settings",value:s}}),this._breakpoint=i,this.settings=s,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},o.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},o.prototype.prepare=function(e){var n=this.trigger("prepare",{content:e});return n.data||(n.data=t("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(e)),this.trigger("prepared",{content:n.data}),n.data},o.prototype.update=function(){for(var e=0,n=this._pipe.length,i=t.proxy((function(t){return this[t]}),this._invalidated),s={};e<n;)(this._invalidated.all||t.grep(this._pipe[e].filter,i).length>0)&&this._pipe[e].run(s),e++;this._invalidated={},!this.is("valid")&&this.enter("valid")},o.prototype.width=function(t){switch(t=t||o.Width.Default){case o.Width.Inner:case o.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},o.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},o.prototype.onThrottledResize=function(){n.clearTimeout(this.resizeTimer),this.resizeTimer=n.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},o.prototype.onResize=function(){return!!this._items.length&&(this._width!==this.$element.width()&&(!!this.isVisible()&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))))},o.prototype.registerEventHandlers=function(){t.support.transition&&this.$stage.on(t.support.transition.end+".owl.core",t.proxy(this.onTransitionEnd,this)),!1!==this.settings.responsive&&this.on(n,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",(function(){return!1}))),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",t.proxy(this.onDragEnd,this)))},o.prototype.onDragStart=function(e){var n=null;3!==e.which&&(t.support.transform?n={x:(n=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","))[16===n.length?12:4],y:n[16===n.length?13:5]}:(n=this.$stage.position(),n={x:this.settings.rtl?n.left+this.$stage.width()-this.width()+this.settings.margin:n.left,y:n.top}),this.is("animating")&&(t.support.transform?this.animate(n.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===e.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=t(e.target),this._drag.stage.start=n,this._drag.stage.current=n,this._drag.pointer=this.pointer(e),t(i).on("mouseup.owl.core touchend.owl.core",t.proxy(this.onDragEnd,this)),t(i).one("mousemove.owl.core touchmove.owl.core",t.proxy((function(e){var n=this.difference(this._drag.pointer,this.pointer(e));t(i).on("mousemove.owl.core touchmove.owl.core",t.proxy(this.onDragMove,this)),Math.abs(n.x)<Math.abs(n.y)&&this.is("valid")||(e.preventDefault(),this.enter("dragging"),this.trigger("drag"))}),this)))},o.prototype.onDragMove=function(t){var e=null,n=null,i=null,s=this.difference(this._drag.pointer,this.pointer(t)),o=this.difference(this._drag.stage.start,s);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),n=this.coordinates(this.maximum()+1)-e,o.x=((o.x-e)%n+n)%n+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),n=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),i=this.settings.pullDrag?-1*s.x/5:0,o.x=Math.max(Math.min(o.x,e+i),n+i)),this._drag.stage.current=o,this.animate(o.x))},o.prototype.onDragEnd=function(e){var n=this.difference(this._drag.pointer,this.pointer(e)),s=this._drag.stage.current,o=n.x>0^this.settings.rtl?"left":"right";t(i).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==n.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(s.x,0!==n.x?o:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=o,(Math.abs(n.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",(function(){return!1}))),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},o.prototype.closest=function(e,n){var i=-1,s=this.width(),o=this.coordinates();return this.settings.freeDrag||t.each(o,t.proxy((function(t,r){return"left"===n&&e>r-30&&e<r+30?i=t:"right"===n&&e>r-s-30&&e<r-s+30?i=t+1:this.op(e,"<",r)&&this.op(e,">",void 0!==o[t+1]?o[t+1]:r-s)&&(i="left"===n?t+1:t),-1===i}),this)),this.settings.loop||(this.op(e,">",o[this.minimum()])?i=e=this.minimum():this.op(e,"<",o[this.maximum()])&&(i=e=this.maximum())),i},o.prototype.animate=function(e){var n=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),n&&(this.enter("animating"),this.trigger("translate")),t.support.transform3d&&t.support.transition?this.$stage.css({transform:"translate3d("+e+"px,0px,0px)",transition:this.speed()/1e3+"s"+(this.settings.slideTransition?" "+this.settings.slideTransition:"")}):n?this.$stage.animate({left:e+"px"},this.speed(),this.settings.fallbackEasing,t.proxy(this.onTransitionEnd,this)):this.$stage.css({left:e+"px"})},o.prototype.is=function(t){return this._states.current[t]&&this._states.current[t]>0},o.prototype.current=function(t){if(void 0===t)return this._current;if(0!==this._items.length){if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});void 0!==e.data&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current}},o.prototype.invalidate=function(e){return"string"===t.type(e)&&(this._invalidated[e]=!0,this.is("valid")&&this.leave("valid")),t.map(this._invalidated,(function(t,e){return e}))},o.prototype.reset=function(t){void 0!==(t=this.normalize(t))&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},o.prototype.normalize=function(t,e){var n=this._items.length,i=e?0:this._clones.length;return!this.isNumeric(t)||n<1?t=void 0:(t<0||t>=n+i)&&(t=((t-i/2)%n+n)%n+i/2),t},o.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},o.prototype.maximum=function(t){var e,n,i,s=this.settings,o=this._coordinates.length;if(s.loop)o=this._clones.length/2+this._items.length-1;else if(s.autoWidth||s.merge){if(e=this._items.length)for(n=this._items[--e].width(),i=this.$element.width();e--&&!((n+=this._items[e].width()+this.settings.margin)>i););o=e+1}else o=s.center?this._items.length-1:this._items.length-s.items;return t&&(o-=this._clones.length/2),Math.max(o,0)},o.prototype.minimum=function(t){return t?0:this._clones.length/2},o.prototype.items=function(t){return void 0===t?this._items.slice():(t=this.normalize(t,!0),this._items[t])},o.prototype.mergers=function(t){return void 0===t?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},o.prototype.clones=function(e){var n=this._clones.length/2,i=n+this._items.length,s=function(t){return t%2==0?i+t/2:n-(t+1)/2};return void 0===e?t.map(this._clones,(function(t,e){return s(e)})):t.map(this._clones,(function(t,n){return t===e?s(n):null}))},o.prototype.speed=function(t){return void 0!==t&&(this._speed=t),this._speed},o.prototype.coordinates=function(e){var n,i=1,s=e-1;return void 0===e?t.map(this._coordinates,t.proxy((function(t,e){return this.coordinates(e)}),this)):(this.settings.center?(this.settings.rtl&&(i=-1,s=e+1),n=this._coordinates[e],n+=(this.width()-n+(this._coordinates[s]||0))/2*i):n=this._coordinates[s]||0,n=Math.ceil(n))},o.prototype.duration=function(t,e,n){return 0===n?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(n||this.settings.smartSpeed)},o.prototype.to=function(t,e){var n=this.current(),i=null,s=t-this.relative(n),o=(s>0)-(s<0),r=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(s)>r/2&&(s+=-1*o*r),(i=(((t=n+s)-a)%r+r)%r+a)!==t&&i-s<=l&&i-s>0&&(n=i-s,t=i,this.reset(n))):t=this.settings.rewind?(t%(l+=1)+l)%l:Math.max(a,Math.min(l,t)),this.speed(this.duration(n,t,e)),this.current(t),this.isVisible()&&this.update()},o.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},o.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},o.prototype.onTransitionEnd=function(t){if(void 0!==t&&(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)!==this.$stage.get(0)))return!1;this.leave("animating"),this.trigger("translated")},o.prototype.viewport=function(){var e;return this.options.responsiveBaseElement!==n?e=t(this.options.responsiveBaseElement).width():n.innerWidth?e=n.innerWidth:i.documentElement&&i.documentElement.clientWidth?e=i.documentElement.clientWidth:console.warn("Can not detect viewport width."),e},o.prototype.replace=function(n){this.$stage.empty(),this._items=[],n&&(n=n instanceof e?n:t(n)),this.settings.nestedItemSelector&&(n=n.find("."+this.settings.nestedItemSelector)),n.filter((function(){return 1===this.nodeType})).each(t.proxy((function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)}),this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},o.prototype.add=function(n,i){var s=this.relative(this._current);i=void 0===i?this._items.length:this.normalize(i,!0),n=n instanceof e?n:t(n),this.trigger("add",{content:n,position:i}),n=this.prepare(n),0===this._items.length||i===this._items.length?(0===this._items.length&&this.$stage.append(n),0!==this._items.length&&this._items[i-1].after(n),this._items.push(n),this._mergers.push(1*n.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[i].before(n),this._items.splice(i,0,n),this._mergers.splice(i,0,1*n.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[s]&&this.reset(this._items[s].index()),this.invalidate("items"),this.trigger("added",{content:n,position:i})},o.prototype.remove=function(t){void 0!==(t=this.normalize(t,!0))&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},o.prototype.preloadAutoWidthImages=function(e){e.each(t.proxy((function(e,n){this.enter("pre-loading"),n=t(n),t(new Image).one("load",t.proxy((function(t){n.attr("src",t.target.src),n.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()}),this)).attr("src",n.attr("src")||n.attr("data-src")||n.attr("data-src-retina"))}),this))},o.prototype.destroy=function(){for(var e in this.$element.off(".owl.core"),this.$stage.off(".owl.core"),t(i).off(".owl.core"),!1!==this.settings.responsive&&(n.clearTimeout(this.resizeTimer),this.off(n,"resize",this._handlers.onThrottledResize)),this._plugins)this._plugins[e].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$stage.remove(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},o.prototype.op=function(t,e,n){var i=this.settings.rtl;switch(e){case"<":return i?t>n:t<n;case">":return i?t<n:t>n;case">=":return i?t<=n:t>=n;case"<=":return i?t>=n:t<=n}},o.prototype.on=function(t,e,n,i){t.addEventListener?t.addEventListener(e,n,i):t.attachEvent&&t.attachEvent("on"+e,n)},o.prototype.off=function(t,e,n,i){t.removeEventListener?t.removeEventListener(e,n,i):t.detachEvent&&t.detachEvent("on"+e,n)},o.prototype.trigger=function(e,n,i,s,r){var a={item:{count:this._items.length,index:this.current()}},l=t.camelCase(t.grep(["on",e,i],(function(t){return t})).join("-").toLowerCase()),c=t.Event([e,"owl",i||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},a,n));return this._supress[e]||(t.each(this._plugins,(function(t,e){e.onTrigger&&e.onTrigger(c)})),this.register({type:o.Type.Event,name:e}),this.$element.trigger(c),this.settings&&"function"==typeof this.settings[l]&&this.settings[l].call(this,c)),c},o.prototype.enter=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy((function(t,e){void 0===this._states.current[e]&&(this._states.current[e]=0),this._states.current[e]++}),this))},o.prototype.leave=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy((function(t,e){this._states.current[e]--}),this))},o.prototype.register=function(e){if(e.type===o.Type.Event){if(t.event.special[e.name]||(t.event.special[e.name]={}),!t.event.special[e.name].owl){var n=t.event.special[e.name]._default;t.event.special[e.name]._default=function(t){return!n||!n.apply||t.namespace&&-1!==t.namespace.indexOf("owl")?t.namespace&&t.namespace.indexOf("owl")>-1:n.apply(this,arguments)},t.event.special[e.name].owl=!0}}else e.type===o.Type.State&&(this._states.tags[e.name]?this._states.tags[e.name]=this._states.tags[e.name].concat(e.tags):this._states.tags[e.name]=e.tags,this._states.tags[e.name]=t.grep(this._states.tags[e.name],t.proxy((function(n,i){return t.inArray(n,this._states.tags[e.name])===i}),this)))},o.prototype.suppress=function(e){t.each(e,t.proxy((function(t,e){this._supress[e]=!0}),this))},o.prototype.release=function(e){t.each(e,t.proxy((function(t,e){delete this._supress[e]}),this))},o.prototype.pointer=function(t){var e={x:null,y:null};return(t=(t=t.originalEvent||t||n.event).touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t).pageX?(e.x=t.pageX,e.y=t.pageY):(e.x=t.clientX,e.y=t.clientY),e},o.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},o.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.fn.owlCarousel=function(e){var n=Array.prototype.slice.call(arguments,1);return this.each((function(){var i=t(this),s=i.data("owl.carousel");s||(s=new o(this,"object"==typeof e&&e),i.data("owl.carousel",s),t.each(["next","prev","to","destroy","refresh","replace","add","remove"],(function(e,n){s.register({type:o.Type.Event,name:n}),s.$element.on(n+".owl.carousel.core",t.proxy((function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([n]),s[n].apply(this,[].slice.call(arguments,1)),this.release([n]))}),s))}))),"string"==typeof e&&"_"!==e.charAt(0)&&s[e].apply(s,n)}))},t.fn.owlCarousel.Constructor=o}(window.Zepto||t,window,document),function(t,e,n,i){var s=function(e){this._core=e,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":t.proxy((function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()}),this)},this._core.options=t.extend({},s.Defaults,this._core.options),this._core.$element.on(this._handlers)};s.Defaults={autoRefresh:!0,autoRefreshInterval:500},s.prototype.watch=function(){this._interval||(this._visible=this._core.isVisible(),this._interval=e.setInterval(t.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},s.prototype.refresh=function(){this._core.isVisible()!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},s.prototype.destroy=function(){var t,n;for(t in e.clearInterval(this._interval),this._handlers)this._core.$element.off(t,this._handlers[t]);for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoRefresh=s}(window.Zepto||t,window,document),function(t,e,n,i){var s=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":t.proxy((function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type)){var n=this._core.settings,i=n.center&&Math.ceil(n.items/2)||n.items,s=n.center&&-1*i||0,o=(e.property&&void 0!==e.property.value?e.property.value:this._core.current())+s,r=this._core.clones().length,a=t.proxy((function(t,e){this.load(e)}),this);for(n.lazyLoadEager>0&&(i+=n.lazyLoadEager,n.loop&&(o-=n.lazyLoadEager,i++));s++<i;)this.load(r/2+this._core.relative(o)),r&&t.each(this._core.clones(this._core.relative(o)),a),o++}}),this)},this._core.options=t.extend({},s.Defaults,this._core.options),this._core.$element.on(this._handlers)};s.Defaults={lazyLoad:!1,lazyLoadEager:0},s.prototype.load=function(n){var i=this._core.$stage.children().eq(n),s=i&&i.find(".owl-lazy");!s||t.inArray(i.get(0),this._loaded)>-1||(s.each(t.proxy((function(n,i){var s,o=t(i),r=e.devicePixelRatio>1&&o.attr("data-src-retina")||o.attr("data-src")||o.attr("data-srcset");this._core.trigger("load",{element:o,url:r},"lazy"),o.is("img")?o.one("load.owl.lazy",t.proxy((function(){o.css("opacity",1),this._core.trigger("loaded",{element:o,url:r},"lazy")}),this)).attr("src",r):o.is("source")?o.one("load.owl.lazy",t.proxy((function(){this._core.trigger("loaded",{element:o,url:r},"lazy")}),this)).attr("srcset",r):((s=new Image).onload=t.proxy((function(){o.css({"background-image":'url("'+r+'")',opacity:"1"}),this._core.trigger("loaded",{element:o,url:r},"lazy")}),this),s.src=r)}),this)),this._loaded.push(i.get(0)))},s.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=s}(window.Zepto||t,window,document),function(t,e,n,i){var s=function(n){this._core=n,this._previousHeight=null,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":t.proxy((function(t){t.namespace&&this._core.settings.autoHeight&&this.update()}),this),"changed.owl.carousel":t.proxy((function(t){t.namespace&&this._core.settings.autoHeight&&"position"===t.property.name&&this.update()}),this),"loaded.owl.lazy":t.proxy((function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()}),this)},this._core.options=t.extend({},s.Defaults,this._core.options),this._core.$element.on(this._handlers),this._intervalId=null;var i=this;t(e).on("load",(function(){i._core.settings.autoHeight&&i.update()})),t(e).resize((function(){i._core.settings.autoHeight&&(null!=i._intervalId&&clearTimeout(i._intervalId),i._intervalId=setTimeout((function(){i.update()}),250))}))};s.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},s.prototype.update=function(){var e=this._core._current,n=e+this._core.settings.items,i=this._core.settings.lazyLoad,s=this._core.$stage.children().toArray().slice(e,n),o=[],r=0;t.each(s,(function(e,n){o.push(t(n).height())})),(r=Math.max.apply(null,o))<=1&&i&&this._previousHeight&&(r=this._previousHeight),this._previousHeight=r,this._core.$stage.parent().height(r).addClass(this._core.settings.autoHeightClass)},s.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=s}(window.Zepto||t,window,document),function(t,e,n,i){var s=function(e){this._core=e,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":t.proxy((function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})}),this),"resize.owl.carousel":t.proxy((function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()}),this),"refreshed.owl.carousel":t.proxy((function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()}),this),"changed.owl.carousel":t.proxy((function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()}),this),"prepared.owl.carousel":t.proxy((function(e){if(e.namespace){var n=t(e.content).find(".owl-video");n.length&&(n.css("display","none"),this.fetch(n,t(e.content)))}}),this)},this._core.options=t.extend({},s.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy((function(t){this.play(t)}),this))};s.Defaults={video:!1,videoHeight:!1,videoWidth:!1},s.prototype.fetch=function(t,e){var n=t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube",i=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),s=t.attr("data-width")||this._core.settings.videoWidth,o=t.attr("data-height")||this._core.settings.videoHeight,r=t.attr("href");if(!r)throw new Error("Missing video URL.");if((i=r.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/))[3].indexOf("youtu")>-1)n="youtube";else if(i[3].indexOf("vimeo")>-1)n="vimeo";else{if(!(i[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");n="vzaar"}i=i[6],this._videos[r]={type:n,id:i,width:s,height:o},e.attr("data-video",r),this.thumbnail(t,this._videos[r])},s.prototype.thumbnail=function(e,n){var i,s,o=n.width&&n.height?"width:"+n.width+"px;height:"+n.height+"px;":"",r=e.find("img"),a="src",l="",c=this._core.settings,u=function(n){'<div class="owl-video-play-icon"></div>',i=c.lazyLoad?t("<div/>",{class:"owl-video-tn "+l,srcType:n}):t("<div/>",{class:"owl-video-tn",style:"opacity:1;background-image:url("+n+")"}),e.after(i),e.after('<div class="owl-video-play-icon"></div>')};if(e.wrap(t("<div/>",{class:"owl-video-wrapper",style:o})),this._core.settings.lazyLoad&&(a="data-src",l="owl-lazy"),r.length)return u(r.attr(a)),r.remove(),!1;"youtube"===n.type?(s="//img.youtube.com/vi/"+n.id+"/hqdefault.jpg",u(s)):"vimeo"===n.type?t.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){s=t[0].thumbnail_large,u(s)}}):"vzaar"===n.type&&t.ajax({type:"GET",url:"//vzaar.com/api/videos/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){s=t.framegrab_url,u(s)}})},s.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},s.prototype.play=function(e){var n,i=t(e.target).closest("."+this._core.settings.itemClass),s=this._videos[i.attr("data-video")],o=s.width||"100%",r=s.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),i=this._core.items(this._core.relative(i.index())),this._core.reset(i.index()),(n=t('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>')).attr("height",r),n.attr("width",o),"youtube"===s.type?n.attr("src","//www.youtube.com/embed/"+s.id+"?autoplay=1&rel=0&v="+s.id):"vimeo"===s.type?n.attr("src","//player.vimeo.com/video/"+s.id+"?autoplay=1"):"vzaar"===s.type&&n.attr("src","//view.vzaar.com/"+s.id+"/player?autoplay=true"),t(n).wrap('<div class="owl-video-frame" />').insertAfter(i.find(".owl-video")),this._playing=i.addClass("owl-video-playing"))},s.prototype.isInFullScreen=function(){var e=n.fullscreenElement||n.mozFullScreenElement||n.webkitFullscreenElement;return e&&t(e).parent().hasClass("owl-video-frame")},s.prototype.destroy=function(){var t,e;for(t in this._core.$element.off("click.owl.video"),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=s}(window.Zepto||t,window,document),n=window.Zepto||t,window,document,(i=function(t){this.core=t,this.core.options=n.extend({},i.Defaults,this.core.options),this.swapping=!0,this.previous=void 0,this.next=void 0,this.handlers={"change.owl.carousel":n.proxy((function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)}),this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":n.proxy((function(t){t.namespace&&(this.swapping="translated"==t.type)}),this),"translate.owl.carousel":n.proxy((function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()}),this)},this.core.$element.on(this.handlers)}).Defaults={animateOut:!1,animateIn:!1},i.prototype.swap=function(){if(1===this.core.settings.items&&n.support.animation&&n.support.transition){this.core.speed(0);var t,e=n.proxy(this.clear,this),i=this.core.$stage.children().eq(this.previous),s=this.core.$stage.children().eq(this.next),o=this.core.settings.animateIn,r=this.core.settings.animateOut;this.core.current()!==this.previous&&(r&&(t=this.core.coordinates(this.previous)-this.core.coordinates(this.next),i.one(n.support.animation.end,e).css({left:t+"px"}).addClass("animated owl-animated-out").addClass(r)),o&&s.one(n.support.animation.end,e).addClass("animated owl-animated-in").addClass(o))}},i.prototype.clear=function(t){n(t.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},i.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},n.fn.owlCarousel.Constructor.Plugins.Animate=i,function(t,e,n,i){var s=function(e){this._core=e,this._call=null,this._time=0,this._timeout=0,this._paused=!0,this._handlers={"changed.owl.carousel":t.proxy((function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._paused&&(this._time=0)}),this),"initialized.owl.carousel":t.proxy((function(t){t.namespace&&this._core.settings.autoplay&&this.play()}),this),"play.owl.autoplay":t.proxy((function(t,e,n){t.namespace&&this.play(e,n)}),this),"stop.owl.autoplay":t.proxy((function(t){t.namespace&&this.stop()}),this),"mouseover.owl.autoplay":t.proxy((function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()}),this),"mouseleave.owl.autoplay":t.proxy((function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()}),this),"touchstart.owl.core":t.proxy((function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()}),this),"touchend.owl.core":t.proxy((function(){this._core.settings.autoplayHoverPause&&this.play()}),this)},this._core.$element.on(this._handlers),this._core.options=t.extend({},s.Defaults,this._core.options)};s.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},s.prototype._next=function(i){this._call=e.setTimeout(t.proxy(this._next,this,i),this._timeout*(Math.round(this.read()/this._timeout)+1)-this.read()),this._core.is("interacting")||n.hidden||this._core.next(i||this._core.settings.autoplaySpeed)},s.prototype.read=function(){return(new Date).getTime()-this._time},s.prototype.play=function(n,i){var s;this._core.is("rotating")||this._core.enter("rotating"),n=n||this._core.settings.autoplayTimeout,s=Math.min(this._time%(this._timeout||n),n),this._paused?(this._time=this.read(),this._paused=!1):e.clearTimeout(this._call),this._time+=this.read()%n-s,this._timeout=n,this._call=e.setTimeout(t.proxy(this._next,this,i),n-s)},s.prototype.stop=function(){this._core.is("rotating")&&(this._time=0,this._paused=!0,e.clearTimeout(this._call),this._core.leave("rotating"))},s.prototype.pause=function(){this._core.is("rotating")&&!this._paused&&(this._time=this.read(),this._paused=!0,e.clearTimeout(this._call))},s.prototype.destroy=function(){var t,e;for(t in this.stop(),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=s}(window.Zepto||t,window,document),function(t,e,n,i){"use strict";var s=function(e){this._core=e,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy((function(e){e.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+t(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")}),this),"added.owl.carousel":t.proxy((function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())}),this),"remove.owl.carousel":t.proxy((function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)}),this),"changed.owl.carousel":t.proxy((function(t){t.namespace&&"position"==t.property.name&&this.draw()}),this),"initialized.owl.carousel":t.proxy((function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))}),this),"refreshed.owl.carousel":t.proxy((function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))}),this)},this._core.options=t.extend({},s.Defaults,this._core.options),this.$element.on(this._handlers)};s.Defaults={nav:!1,navText:['<span aria-label="Previous">&#x2039;</span>','<span aria-label="Next">&#x203a;</span>'],navSpeed:!1,navElement:'button type="button" role="presentation"',navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},s.prototype.initialize=function(){var e,n=this._core.settings;for(e in this._controls.$relative=(n.navContainer?t(n.navContainer):t("<div>").addClass(n.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=t("<"+n.navElement+">").addClass(n.navClass[0]).html(n.navText[0]).prependTo(this._controls.$relative).on("click",t.proxy((function(t){this.prev(n.navSpeed)}),this)),this._controls.$next=t("<"+n.navElement+">").addClass(n.navClass[1]).html(n.navText[1]).appendTo(this._controls.$relative).on("click",t.proxy((function(t){this.next(n.navSpeed)}),this)),n.dotsData||(this._templates=[t('<button role="button">').addClass(n.dotClass).append(t("<span>")).prop("outerHTML")]),this._controls.$absolute=(n.dotsContainer?t(n.dotsContainer):t("<div>").addClass(n.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","button",t.proxy((function(e){var i=t(e.target).parent().is(this._controls.$absolute)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(i,n.dotsSpeed)}),this)),this._overrides)this._core[e]=t.proxy(this[e],this)},s.prototype.destroy=function(){var t,e,n,i,s;for(t in s=this._core.settings,this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)"$relative"===e&&s.navContainer?this._controls[e].html(""):this._controls[e].remove();for(i in this.overides)this._core[i]=this._overrides[i];for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},s.prototype.update=function(){var t,e,n=this._core.clones().length/2,i=n+this._core.items().length,s=this._core.maximum(!0),o=this._core.settings,r=o.center||o.autoWidth||o.dotsData?1:o.dotsEach||o.items;if("page"!==o.slideBy&&(o.slideBy=Math.min(o.slideBy,o.items)),o.dots||"page"==o.slideBy)for(this._pages=[],t=n,e=0,0;t<i;t++){if(e>=r||0===e){if(this._pages.push({start:Math.min(s,t-n),end:t-n+r-1}),Math.min(s,t-n)===s)break;e=0}e+=this._core.mergers(this._core.relative(t))}},s.prototype.draw=function(){var e,n=this._core.settings,i=this._core.items().length<=n.items,s=this._core.relative(this._core.current()),o=n.loop||n.rewind;this._controls.$relative.toggleClass("disabled",!n.nav||i),n.nav&&(this._controls.$previous.toggleClass("disabled",!o&&s<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!o&&s>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!n.dots||i),n.dots&&(e=this._pages.length-this._controls.$absolute.children().length,n.dotsData&&0!==e?this._controls.$absolute.html(this._templates.join("")):e>0?this._controls.$absolute.append(new Array(e+1).join(this._templates[0])):e<0&&this._controls.$absolute.children().slice(e).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(t.inArray(this.current(),this._pages)).addClass("active"))},s.prototype.onTrigger=function(e){var n=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:n&&(n.center||n.autoWidth||n.dotsData?1:n.dotsEach||n.items)}},s.prototype.current=function(){var e=this._core.relative(this._core.current());return t.grep(this._pages,t.proxy((function(t,n){return t.start<=e&&t.end>=e}),this)).pop()},s.prototype.getPosition=function(e){var n,i,s=this._core.settings;return"page"==s.slideBy?(n=t.inArray(this.current(),this._pages),i=this._pages.length,e?++n:--n,n=this._pages[(n%i+i)%i].start):(n=this._core.relative(this._core.current()),i=this._core.items().length,e?n+=s.slideBy:n-=s.slideBy),n},s.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},s.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},s.prototype.to=function(e,n,i){var s;!i&&this._pages.length?(s=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%s+s)%s].start,n)):t.proxy(this._overrides.to,this._core)(e,n)},t.fn.owlCarousel.Constructor.Plugins.Navigation=s}(window.Zepto||t,window,document),function(t,e,n,i){"use strict";var s=function(n){this._core=n,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy((function(n){n.namespace&&"URLHash"===this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")}),this),"prepared.owl.carousel":t.proxy((function(e){if(e.namespace){var n=t(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!n)return;this._hashes[n]=e.content}}),this),"changed.owl.carousel":t.proxy((function(n){if(n.namespace&&"position"===n.property.name){var i=this._core.items(this._core.relative(this._core.current())),s=t.map(this._hashes,(function(t,e){return t===i?e:null})).join();if(!s||e.location.hash.slice(1)===s)return;e.location.hash=s}}),this)},this._core.options=t.extend({},s.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy((function(t){var n=e.location.hash.substring(1),i=this._core.$stage.children(),s=this._hashes[n]&&i.index(this._hashes[n]);void 0!==s&&s!==this._core.current()&&this._core.to(this._core.relative(s),!1,!0)}),this))};s.Defaults={URLhashListener:!1},s.prototype.destroy=function(){var n,i;for(n in t(e).off("hashchange.owl.navigation"),this._handlers)this._core.$element.off(n,this._handlers[n]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=s}(window.Zepto||t,window,document),function(t,e,n,i){var s=t("<support>").get(0).style,o="Webkit Moz O ms".split(" "),r={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},a=function(){return!!u("transform")},l=function(){return!!u("perspective")},c=function(){return!!u("animation")};function u(e,n){var i=!1,r=e.charAt(0).toUpperCase()+e.slice(1);return t.each((e+" "+o.join(r+" ")+r).split(" "),(function(t,e){if(void 0!==s[e])return i=!n||e,!1})),i}function h(t){return u(t,!0)}(function(){return!!u("transition")})()&&(t.support.transition=new String(h("transition")),t.support.transition.end=r.transition.end[t.support.transition]),c()&&(t.support.animation=new String(h("animation")),t.support.animation.end=r.animation.end[t.support.animation]),a()&&(t.support.transform=new String(h("transform")),t.support.transform3d=l())}(window.Zepto||t,window,document)}).call(this,n(0),n(0))},,,function(t,e,n){(function(t){!function(t,e,n,i){"use strict";if(t.console=t.console||{info:function(t){}},n)if(n.fn.fancybox)console.info("fancyBox already initialized");else{var s,o,r={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function(t,e){return"image"===t.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(t,e){return"image"===t.type&&"toggleControls"},clickSlide:function(t,e){return"image"===t.type?"toggleControls":"close"},dblclickContent:function(t,e){return"image"===t.type&&"zoom"},dblclickSlide:function(t,e){return"image"===t.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},a=n(t),l=n(e),c=0,u=t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||function(e){return t.setTimeout(e,1e3/60)},h=t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.mozCancelAnimationFrame||t.oCancelAnimationFrame||function(e){t.clearTimeout(e)},d=function(){var t,n=e.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in i)if(void 0!==n.style[t])return i[t];return"transitionend"}(),p=function(t){return t&&t.length&&t[0].offsetHeight},f=function(t,e){var i=n.extend(!0,{},t,e);return n.each(e,(function(t,e){n.isArray(e)&&(i[t]=e)})),i},g=function(t,e,i){this.opts=f({index:i},n.fancybox.defaults),n.isPlainObject(e)&&(this.opts=f(this.opts,e)),n.fancybox.isMobile&&(this.opts=f(this.opts,this.opts.mobile)),this.id=this.opts.id||++c,this.currIndex=parseInt(this.opts.index,10)||0,this.prevIndex=null,this.prevPos=null,this.currPos=0,this.firstRun=!0,this.group=[],this.slides={},this.addContent(t),this.group.length&&this.init()};n.extend(g.prototype,{init:function(){var i,s,o=this,r=o.group[o.currIndex].opts;r.closeExisting&&n.fancybox.close(!0),n("body").addClass("fancybox-active"),!n.fancybox.getInstance()&&!1!==r.hideScrollbar&&!n.fancybox.isMobile&&e.body.scrollHeight>t.innerHeight&&(n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(t.innerWidth-e.documentElement.clientWidth)+"px;}</style>"),n("body").addClass("compensate-for-scrollbar")),s="",n.each(r.buttons,(function(t,e){s+=r.btnTpl[e]||""})),i=n(o.translate(o,r.baseTpl.replace("{{buttons}}",s).replace("{{arrows}}",r.btnTpl.arrowLeft+r.btnTpl.arrowRight))).attr("id","fancybox-container-"+o.id).addClass(r.baseClass).data("FancyBox",o).appendTo(r.parentEl),o.$refs={container:i},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach((function(t){o.$refs[t]=i.find(".fancybox-"+t)})),o.trigger("onInit"),o.activate(),o.jumpTo(o.currIndex)},translate:function(t,e){var n=t.opts.i18n[t.opts.lang]||t.opts.i18n.en;return e.replace(/\{\{(\w+)\}\}/g,(function(t,e){return void 0===n[e]?t:n[e]}))},addContent:function(t){var e,i=this,s=n.makeArray(t);n.each(s,(function(t,e){var s,o,r,a,l,c={},u={};n.isPlainObject(e)?(c=e,u=e.opts||e):"object"===n.type(e)&&n(e).length?(u=(s=n(e)).data()||{},(u=n.extend(!0,{},u,u.options)).$orig=s,c.src=i.opts.src||u.src||s.attr("href"),c.type||c.src||(c.type="inline",c.src=e)):c={type:"html",src:e+""},c.opts=n.extend(!0,{},i.opts,u),n.isArray(u.buttons)&&(c.opts.buttons=u.buttons),n.fancybox.isMobile&&c.opts.mobile&&(c.opts=f(c.opts,c.opts.mobile)),o=c.type||c.opts.type,a=c.src||"",!o&&a&&((r=a.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(o="video",c.opts.video.format||(c.opts.video.format="video/"+("ogv"===r[1]?"ogg":r[1]))):a.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?o="image":a.match(/\.(pdf)((\?|#).*)?$/i)?(o="iframe",c=n.extend(!0,c,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===a.charAt(0)&&(o="inline")),o?c.type=o:i.trigger("objectNeedsType",c),c.contentType||(c.contentType=n.inArray(c.type,["html","inline","ajax"])>-1?"html":c.type),c.index=i.group.length,"auto"==c.opts.smallBtn&&(c.opts.smallBtn=n.inArray(c.type,["html","inline","ajax"])>-1),"auto"===c.opts.toolbar&&(c.opts.toolbar=!c.opts.smallBtn),c.$thumb=c.opts.$thumb||null,c.opts.$trigger&&c.index===i.opts.index&&(c.$thumb=c.opts.$trigger.find("img:first"),c.$thumb.length&&(c.opts.$orig=c.opts.$trigger)),c.$thumb&&c.$thumb.length||!c.opts.$orig||(c.$thumb=c.opts.$orig.find("img:first")),c.$thumb&&!c.$thumb.length&&(c.$thumb=null),c.thumb=c.opts.thumb||(c.$thumb?c.$thumb[0].src:null),"function"===n.type(c.opts.caption)&&(c.opts.caption=c.opts.caption.apply(e,[i,c])),"function"===n.type(i.opts.caption)&&(c.opts.caption=i.opts.caption.apply(e,[i,c])),c.opts.caption instanceof n||(c.opts.caption=void 0===c.opts.caption?"":c.opts.caption+""),"ajax"===c.type&&(l=a.split(/\s+/,2)).length>1&&(c.src=l.shift(),c.opts.filter=l.shift()),c.opts.modal&&(c.opts=n.extend(!0,c.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),i.group.push(c)})),Object.keys(i.slides).length&&(i.updateControls(),(e=i.Thumbs)&&e.isActive&&(e.create(),e.focus()))},addEvents:function(){var e=this;e.removeEvents(),e.$refs.container.on("click.fb-close","[data-fancybox-close]",(function(t){t.stopPropagation(),t.preventDefault(),e.close(t)})).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",(function(t){t.stopPropagation(),t.preventDefault(),e.previous()})).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",(function(t){t.stopPropagation(),t.preventDefault(),e.next()})).on("click.fb","[data-fancybox-zoom]",(function(t){e[e.isScaledDown()?"scaleToActual":"scaleToFit"]()})),a.on("orientationchange.fb resize.fb",(function(t){t&&t.originalEvent&&"resize"===t.originalEvent.type?(e.requestId&&h(e.requestId),e.requestId=u((function(){e.update(t)}))):(e.current&&"iframe"===e.current.type&&e.$refs.stage.hide(),setTimeout((function(){e.$refs.stage.show(),e.update(t)}),n.fancybox.isMobile?600:250))})),l.on("keydown.fb",(function(t){var i=(n.fancybox?n.fancybox.getInstance():null).current,s=t.keyCode||t.which;if(9!=s){if(!(!i.opts.keyboard||t.ctrlKey||t.altKey||t.shiftKey||n(t.target).is("input,textarea,video,audio,select")))return 8===s||27===s?(t.preventDefault(),void e.close(t)):37===s||38===s?(t.preventDefault(),void e.previous()):39===s||40===s?(t.preventDefault(),void e.next()):void e.trigger("afterKeydown",t,s)}else i.opts.trapFocus&&e.focus(t)})),e.group[e.currIndex].opts.idleTime&&(e.idleSecondsCounter=0,l.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",(function(t){e.idleSecondsCounter=0,e.isIdle&&e.showControls(),e.isIdle=!1})),e.idleInterval=t.setInterval((function(){e.idleSecondsCounter++,e.idleSecondsCounter>=e.group[e.currIndex].opts.idleTime&&!e.isDragging&&(e.isIdle=!0,e.idleSecondsCounter=0,e.hideControls())}),1e3))},removeEvents:function(){a.off("orientationchange.fb resize.fb"),l.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(t.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(t){return this.jumpTo(this.currPos-1,t)},next:function(t){return this.jumpTo(this.currPos+1,t)},jumpTo:function(t,e){var i,s,o,r,a,l,c,u,h,d=this,f=d.group.length;if(!(d.isDragging||d.isClosing||d.isAnimating&&d.firstRun)){if(t=parseInt(t,10),!(o=d.current?d.current.opts.loop:d.opts.loop)&&(t<0||t>=f))return!1;if(i=d.firstRun=!Object.keys(d.slides).length,a=d.current,d.prevIndex=d.currIndex,d.prevPos=d.currPos,r=d.createSlide(t),f>1&&((o||r.index<f-1)&&d.createSlide(t+1),(o||r.index>0)&&d.createSlide(t-1)),d.current=r,d.currIndex=r.index,d.currPos=r.pos,d.trigger("beforeShow",i),d.updateControls(),r.forcedDuration=void 0,n.isNumeric(e)?r.forcedDuration=e:e=r.opts[i?"animationDuration":"transitionDuration"],e=parseInt(e,10),s=d.isMoved(r),r.$slide.addClass("fancybox-slide--current"),i)return r.opts.animationEffect&&e&&d.$refs.container.css("transition-duration",e+"ms"),d.$refs.container.addClass("fancybox-is-open").trigger("focus"),d.loadSlide(r),void d.preload("image");l=n.fancybox.getTranslate(a.$slide),c=n.fancybox.getTranslate(d.$refs.stage),n.each(d.slides,(function(t,e){n.fancybox.stop(e.$slide,!0)})),a.pos!==r.pos&&(a.isComplete=!1),a.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),s?(h=l.left-(a.pos*l.width+a.pos*a.opts.gutter),n.each(d.slides,(function(t,i){i.$slide.removeClass("fancybox-animated").removeClass((function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}));var s=i.pos*l.width+i.pos*i.opts.gutter;n.fancybox.setTranslate(i.$slide,{top:0,left:s-c.left+h}),i.pos!==r.pos&&i.$slide.addClass("fancybox-slide--"+(i.pos>r.pos?"next":"previous")),p(i.$slide),n.fancybox.animate(i.$slide,{top:0,left:(i.pos-r.pos)*l.width+(i.pos-r.pos)*i.opts.gutter},e,(function(){i.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),i.pos===d.currPos&&d.complete()}))}))):e&&r.opts.transitionEffect&&(u="fancybox-animated fancybox-fx-"+r.opts.transitionEffect,a.$slide.addClass("fancybox-slide--"+(a.pos>r.pos?"next":"previous")),n.fancybox.animate(a.$slide,u,e,(function(){a.$slide.removeClass(u).removeClass("fancybox-slide--next fancybox-slide--previous")}),!1)),r.isLoaded?d.revealContent(r):d.loadSlide(r),d.preload("image")}},createSlide:function(t){var e,i;return i=(i=t%this.group.length)<0?this.group.length+i:i,!this.slides[t]&&this.group[i]&&(e=n('<div class="fancybox-slide"></div>').appendTo(this.$refs.stage),this.slides[t]=n.extend(!0,{},this.group[i],{pos:t,$slide:e,isLoaded:!1}),this.updateSlide(this.slides[t])),this.slides[t]},scaleToActual:function(t,e,i){var s,o,r,a,l,c=this,u=c.current,h=u.$content,d=n.fancybox.getTranslate(u.$slide).width,p=n.fancybox.getTranslate(u.$slide).height,f=u.width,g=u.height;c.isAnimating||c.isMoved()||!h||"image"!=u.type||!u.isLoaded||u.hasError||(c.isAnimating=!0,n.fancybox.stop(h),t=void 0===t?.5*d:t,e=void 0===e?.5*p:e,(s=n.fancybox.getTranslate(h)).top-=n.fancybox.getTranslate(u.$slide).top,s.left-=n.fancybox.getTranslate(u.$slide).left,a=f/s.width,l=g/s.height,o=.5*d-.5*f,r=.5*p-.5*g,f>d&&((o=s.left*a-(t*a-t))>0&&(o=0),o<d-f&&(o=d-f)),g>p&&((r=s.top*l-(e*l-e))>0&&(r=0),r<p-g&&(r=p-g)),c.updateCursor(f,g),n.fancybox.animate(h,{top:r,left:o,scaleX:a,scaleY:l},i||366,(function(){c.isAnimating=!1})),c.SlideShow&&c.SlideShow.isActive&&c.SlideShow.stop())},scaleToFit:function(t){var e,i=this,s=i.current,o=s.$content;i.isAnimating||i.isMoved()||!o||"image"!=s.type||!s.isLoaded||s.hasError||(i.isAnimating=!0,n.fancybox.stop(o),e=i.getFitPos(s),i.updateCursor(e.width,e.height),n.fancybox.animate(o,{top:e.top,left:e.left,scaleX:e.width/o.width(),scaleY:e.height/o.height()},t||366,(function(){i.isAnimating=!1})))},getFitPos:function(t){var e,i,s,o,r=t.$content,a=t.$slide,l=t.width||t.opts.width,c=t.height||t.opts.height,u={};return!!(t.isLoaded&&r&&r.length)&&(e=n.fancybox.getTranslate(this.$refs.stage).width,i=n.fancybox.getTranslate(this.$refs.stage).height,e-=parseFloat(a.css("paddingLeft"))+parseFloat(a.css("paddingRight"))+parseFloat(r.css("marginLeft"))+parseFloat(r.css("marginRight")),i-=parseFloat(a.css("paddingTop"))+parseFloat(a.css("paddingBottom"))+parseFloat(r.css("marginTop"))+parseFloat(r.css("marginBottom")),l&&c||(l=e,c=i),(l*=s=Math.min(1,e/l,i/c))>e-.5&&(l=e),(c*=s)>i-.5&&(c=i),"image"===t.type?(u.top=Math.floor(.5*(i-c))+parseFloat(a.css("paddingTop")),u.left=Math.floor(.5*(e-l))+parseFloat(a.css("paddingLeft"))):"video"===t.contentType&&(c>l/(o=t.opts.width&&t.opts.height?l/c:t.opts.ratio||16/9)?c=l/o:l>c*o&&(l=c*o)),u.width=l,u.height=c,u)},update:function(t){var e=this;n.each(e.slides,(function(n,i){e.updateSlide(i,t)}))},updateSlide:function(t,e){var i=t&&t.$content,s=t.width||t.opts.width,o=t.height||t.opts.height,r=t.$slide;this.adjustCaption(t),i&&(s||o||"video"===t.contentType)&&!t.hasError&&(n.fancybox.stop(i),n.fancybox.setTranslate(i,this.getFitPos(t)),t.pos===this.currPos&&(this.isAnimating=!1,this.updateCursor())),this.adjustLayout(t),r.length&&(r.trigger("refresh"),t.pos===this.currPos&&this.$refs.toolbar.add(this.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",r.get(0).scrollHeight>r.get(0).clientHeight)),this.trigger("onUpdate",t,e)},centerSlide:function(t){var e=this,i=e.current,s=i.$slide;!e.isClosing&&i&&(s.siblings().css({transform:"",opacity:""}),s.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),n.fancybox.animate(s,{top:0,left:0,opacity:1},void 0===t?0:t,(function(){s.css({transform:"",opacity:""}),i.isComplete||e.complete()}),!1))},isMoved:function(t){var e,i,s=t||this.current;return!!s&&(i=n.fancybox.getTranslate(this.$refs.stage),e=n.fancybox.getTranslate(s.$slide),!s.$slide.hasClass("fancybox-animated")&&(Math.abs(e.top-i.top)>.5||Math.abs(e.left-i.left)>.5))},updateCursor:function(t,e){var i,s,o=this.current,r=this.$refs.container;o&&!this.isClosing&&this.Guestures&&(r.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),s=!!(i=this.canPan(t,e))||this.isZoomable(),r.toggleClass("fancybox-is-zoomable",s),n("[data-fancybox-zoom]").prop("disabled",!s),i?r.addClass("fancybox-can-pan"):s&&("zoom"===o.opts.clickContent||n.isFunction(o.opts.clickContent)&&"zoom"==o.opts.clickContent(o))?r.addClass("fancybox-can-zoomIn"):o.opts.touch&&(o.opts.touch.vertical||this.group.length>1)&&"video"!==o.contentType&&r.addClass("fancybox-can-swipe"))},isZoomable:function(){var t,e=this.current;if(e&&!this.isClosing&&"image"===e.type&&!e.hasError){if(!e.isLoaded)return!0;if((t=this.getFitPos(e))&&(e.width>t.width||e.height>t.height))return!0}return!1},isScaledDown:function(t,e){var i=!1,s=this.current,o=s.$content;return void 0!==t&&void 0!==e?i=t<s.width&&e<s.height:o&&(i=(i=n.fancybox.getTranslate(o)).width<s.width&&i.height<s.height),i},canPan:function(t,e){var i=this.current,s=null,o=!1;return"image"===i.type&&(i.isComplete||t&&e)&&!i.hasError&&(o=this.getFitPos(i),void 0!==t&&void 0!==e?s={width:t,height:e}:i.isComplete&&(s=n.fancybox.getTranslate(i.$content)),s&&o&&(o=Math.abs(s.width-o.width)>1.5||Math.abs(s.height-o.height)>1.5)),o},loadSlide:function(t){var e,i,s,o=this;if(!t.isLoading&&!t.isLoaded){if(t.isLoading=!0,!1===o.trigger("beforeLoad",t))return t.isLoading=!1,!1;switch(e=t.type,(i=t.$slide).off("refresh").trigger("onReset").addClass(t.opts.slideClass),e){case"image":o.setImage(t);break;case"iframe":o.setIframe(t);break;case"html":o.setContent(t,t.src||t.content);break;case"video":o.setContent(t,t.opts.video.tpl.replace(/\{\{src\}\}/gi,t.src).replace("{{format}}",t.opts.videoFormat||t.opts.video.format||"").replace("{{poster}}",t.thumb||""));break;case"inline":n(t.src).length?o.setContent(t,n(t.src)):o.setError(t);break;case"ajax":o.showLoading(t),s=n.ajax(n.extend({},t.opts.ajax.settings,{url:t.src,success:function(e,n){"success"===n&&o.setContent(t,e)},error:function(e,n){e&&"abort"!==n&&o.setError(t)}})),i.one("onReset",(function(){s.abort()}));break;default:o.setError(t)}return!0}},setImage:function(t){var i,s=this;setTimeout((function(){var e=t.$image;s.isClosing||!t.isLoading||e&&e.length&&e[0].complete||t.hasError||s.showLoading(t)}),50),s.checkSrcset(t),t.$content=n('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&t.thumb&&(t.width=t.opts.width,t.height=t.opts.height,(i=e.createElement("img")).onerror=function(){n(this).remove(),t.$ghost=null},i.onload=function(){s.afterLoad(t)},t.$ghost=n(i).addClass("fancybox-image").appendTo(t.$content).attr("src",t.thumb)),s.setBigImage(t)},checkSrcset:function(e){var n,i,s,o,r=e.opts.srcset||e.opts.image.srcset;if(r){s=t.devicePixelRatio||1,o=t.innerWidth*s,(i=r.split(",").map((function(t){var e={};return t.trim().split(/\s+/).forEach((function(t,n){var i=parseInt(t.substring(0,t.length-1),10);if(0===n)return e.url=t;i&&(e.value=i,e.postfix=t[t.length-1])})),e}))).sort((function(t,e){return t.value-e.value}));for(var a=0;a<i.length;a++){var l=i[a];if("w"===l.postfix&&l.value>=o||"x"===l.postfix&&l.value>=s){n=l;break}}!n&&i.length&&(n=i[i.length-1]),n&&(e.src=n.url,e.width&&e.height&&"w"==n.postfix&&(e.height=e.width/e.height*n.value,e.width=n.value),e.opts.srcset=r)}},setBigImage:function(t){var i=this,s=e.createElement("img"),o=n(s);t.$image=o.one("error",(function(){i.setError(t)})).one("load",(function(){var e;t.$ghost||(i.resolveImageSlideSize(t,this.naturalWidth,this.naturalHeight),i.afterLoad(t)),i.isClosing||(t.opts.srcset&&((e=t.opts.sizes)&&"auto"!==e||(e=(t.width/t.height>1&&a.width()/a.height()>1?"100":Math.round(t.width/t.height*100))+"vw"),o.attr("sizes",e).attr("srcset",t.opts.srcset)),t.$ghost&&setTimeout((function(){t.$ghost&&!i.isClosing&&t.$ghost.hide()}),Math.min(300,Math.max(1e3,t.height/1600))),i.hideLoading(t))})).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(s.complete||"complete"==s.readyState)&&o.naturalWidth&&o.naturalHeight?o.trigger("load"):s.error&&o.trigger("error")},resolveImageSlideSize:function(t,e,n){var i=parseInt(t.opts.width,10),s=parseInt(t.opts.height,10);t.width=e,t.height=n,i>0&&(t.width=i,t.height=Math.floor(i*n/e)),s>0&&(t.width=Math.floor(s*e/n),t.height=s)},setIframe:function(t){var e,i=this,s=t.opts.iframe,o=t.$slide;t.$content=n('<div class="fancybox-content'+(s.preload?" fancybox-is-hidden":"")+'"></div>').css(s.css).appendTo(o),o.addClass("fancybox-slide--"+t.contentType),t.$iframe=e=n(s.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(s.attr).appendTo(t.$content),s.preload?(i.showLoading(t),e.on("load.fb error.fb",(function(e){this.isReady=1,t.$slide.trigger("refresh"),i.afterLoad(t)})),o.on("refresh.fb",(function(){var n,i=t.$content,r=s.css.width,a=s.css.height;if(1===e[0].isReady){try{n=e.contents().find("body")}catch(t){}n&&n.length&&n.children().length&&(o.css("overflow","visible"),i.css({width:"100%","max-width":"100%",height:"9999px"}),void 0===r&&(r=Math.ceil(Math.max(n[0].clientWidth,n.outerWidth(!0)))),i.css("width",r||"").css("max-width",""),void 0===a&&(a=Math.ceil(Math.max(n[0].clientHeight,n.outerHeight(!0)))),i.css("height",a||""),o.css("overflow","auto")),i.removeClass("fancybox-is-hidden")}}))):i.afterLoad(t),e.attr("src",t.src),o.one("onReset",(function(){try{n(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(t){}n(this).off("refresh.fb").empty(),t.isLoaded=!1,t.isRevealed=!1}))},setContent:function(t,e){var i;this.isClosing||(this.hideLoading(t),t.$content&&n.fancybox.stop(t.$content),t.$slide.empty(),(i=e)&&i.hasOwnProperty&&i instanceof n&&e.parent().length?((e.hasClass("fancybox-content")||e.parent().hasClass("fancybox-content"))&&e.parents(".fancybox-slide").trigger("onReset"),t.$placeholder=n("<div>").hide().insertAfter(e),e.css("display","inline-block")):t.hasError||("string"===n.type(e)&&(e=n("<div>").append(n.trim(e)).contents()),t.opts.filter&&(e=n("<div>").html(e).find(t.opts.filter))),t.$slide.one("onReset",(function(){n(this).find("video,audio").trigger("pause"),t.$placeholder&&(t.$placeholder.after(e.removeClass("fancybox-content").hide()).remove(),t.$placeholder=null),t.$smallBtn&&(t.$smallBtn.remove(),t.$smallBtn=null),t.hasError||(n(this).empty(),t.isLoaded=!1,t.isRevealed=!1)})),n(e).appendTo(t.$slide),n(e).is("video,audio")&&(n(e).addClass("fancybox-video"),n(e).wrap("<div></div>"),t.contentType="video",t.opts.width=t.opts.width||n(e).attr("width"),t.opts.height=t.opts.height||n(e).attr("height")),t.$content=t.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),t.$content.siblings().hide(),t.$content.length||(t.$content=t.$slide.wrapInner("<div></div>").children().first()),t.$content.addClass("fancybox-content"),t.$slide.addClass("fancybox-slide--"+t.contentType),this.afterLoad(t))},setError:function(t){t.hasError=!0,t.$slide.trigger("onReset").removeClass("fancybox-slide--"+t.contentType).addClass("fancybox-slide--error"),t.contentType="html",this.setContent(t,this.translate(t,t.opts.errorTpl)),t.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(t){(t=t||this.current)&&!t.$spinner&&(t.$spinner=n(this.translate(this,this.opts.spinnerTpl)).appendTo(t.$slide).hide().fadeIn("fast"))},hideLoading:function(t){(t=t||this.current)&&t.$spinner&&(t.$spinner.stop().remove(),delete t.$spinner)},afterLoad:function(t){this.isClosing||(t.isLoading=!1,t.isLoaded=!0,this.trigger("afterLoad",t),this.hideLoading(t),!t.opts.smallBtn||t.$smallBtn&&t.$smallBtn.length||(t.$smallBtn=n(this.translate(t,t.opts.btnTpl.smallBtn)).appendTo(t.$content)),t.opts.protect&&t.$content&&!t.hasError&&(t.$content.on("contextmenu.fb",(function(t){return 2==t.button&&t.preventDefault(),!0})),"image"===t.type&&n('<div class="fancybox-spaceball"></div>').appendTo(t.$content)),this.adjustCaption(t),this.adjustLayout(t),t.pos===this.currPos&&this.updateCursor(),this.revealContent(t))},adjustCaption:function(t){var e,n=t||this.current,i=n.opts.caption,s=n.opts.preventCaptionOverlap,o=this.$refs.caption,r=!1;o.toggleClass("fancybox-caption--separate",s),s&&i&&i.length&&(n.pos!==this.currPos?((e=o.clone().appendTo(o.parent())).children().eq(0).empty().html(i),r=e.outerHeight(!0),e.empty().remove()):this.$caption&&(r=this.$caption.outerHeight(!0)),n.$slide.css("padding-bottom",r||""))},adjustLayout:function(t){var e,n,i,s,o=t||this.current;o.isLoaded&&!0!==o.opts.disableLayoutFix&&(o.$content.css("margin-bottom",""),o.$content.outerHeight()>o.$slide.height()+.5&&(i=o.$slide[0].style["padding-bottom"],s=o.$slide.css("padding-bottom"),parseFloat(s)>0&&(e=o.$slide[0].scrollHeight,o.$slide.css("padding-bottom",0),Math.abs(e-o.$slide[0].scrollHeight)<1&&(n=s),o.$slide.css("padding-bottom",i))),o.$content.css("margin-bottom",n))},revealContent:function(t){var e,i,s,o,r=this,a=t.$slide,l=!1,c=!1,u=r.isMoved(t),h=t.isRevealed;return t.isRevealed=!0,e=t.opts[r.firstRun?"animationEffect":"transitionEffect"],s=t.opts[r.firstRun?"animationDuration":"transitionDuration"],s=parseInt(void 0===t.forcedDuration?s:t.forcedDuration,10),!u&&t.pos===r.currPos&&s||(e=!1),"zoom"===e&&(t.pos===r.currPos&&s&&"image"===t.type&&!t.hasError&&(c=r.getThumbPos(t))?l=r.getFitPos(t):e="fade"),"zoom"===e?(r.isAnimating=!0,l.scaleX=l.width/c.width,l.scaleY=l.height/c.height,"auto"==(o=t.opts.zoomOpacity)&&(o=Math.abs(t.width/t.height-c.width/c.height)>.1),o&&(c.opacity=.1,l.opacity=1),n.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"),c),p(t.$content),void n.fancybox.animate(t.$content,l,s,(function(){r.isAnimating=!1,r.complete()}))):(r.updateSlide(t),e?(n.fancybox.stop(a),i="fancybox-slide--"+(t.pos>=r.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+e,a.addClass(i).removeClass("fancybox-slide--current"),t.$content.removeClass("fancybox-is-hidden"),p(a),"image"!==t.type&&t.$content.hide().show(0),void n.fancybox.animate(a,"fancybox-slide--current",s,(function(){a.removeClass(i).css({transform:"",opacity:""}),t.pos===r.currPos&&r.complete()}),!0)):(t.$content.removeClass("fancybox-is-hidden"),h||!u||"image"!==t.type||t.hasError||t.$content.hide().fadeIn("fast"),void(t.pos===r.currPos&&r.complete())))},getThumbPos:function(t){var i,s,o,r,a,l,c=t.$thumb;return!(!c||!function(t){var i,s;return!(!t||t.ownerDocument!==e)&&(n(".fancybox-container").css("pointer-events","none"),i={x:t.getBoundingClientRect().left+t.offsetWidth/2,y:t.getBoundingClientRect().top+t.offsetHeight/2},s=e.elementFromPoint(i.x,i.y)===t,n(".fancybox-container").css("pointer-events",""),s)}(c[0]))&&(s=n.fancybox.getTranslate(c),o=parseFloat(c.css("border-top-width")||0),r=parseFloat(c.css("border-right-width")||0),a=parseFloat(c.css("border-bottom-width")||0),l=parseFloat(c.css("border-left-width")||0),i={top:s.top+o,left:s.left+l,width:s.width-r-l,height:s.height-o-a,scaleX:1,scaleY:1},s.width>0&&s.height>0&&i)},complete:function(){var t,e=this,i=e.current,s={};!e.isMoved()&&i.isLoaded&&(i.isComplete||(i.isComplete=!0,i.$slide.siblings().trigger("onReset"),e.preload("inline"),p(i.$slide),i.$slide.addClass("fancybox-slide--complete"),n.each(e.slides,(function(t,i){i.pos>=e.currPos-1&&i.pos<=e.currPos+1?s[i.pos]=i:i&&(n.fancybox.stop(i.$slide),i.$slide.off().remove())})),e.slides=s),e.isAnimating=!1,e.updateCursor(),e.trigger("afterShow"),i.opts.video.autoStart&&i.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",(function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),e.next()})),i.opts.autoFocus&&"html"===i.contentType&&((t=i.$content.find("input[autofocus]:enabled:visible:first")).length?t.trigger("focus"):e.focus(null,!0)),i.$slide.scrollTop(0).scrollLeft(0))},preload:function(t){var e,n;this.group.length<2||(n=this.slides[this.currPos+1],(e=this.slides[this.currPos-1])&&e.type===t&&this.loadSlide(e),n&&n.type===t&&this.loadSlide(n))},focus:function(t,i){var s,o,r=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");this.isClosing||((s=(s=!t&&this.current&&this.current.isComplete?this.current.$slide.find("*:visible"+(i?":not(.fancybox-close-small)":"")):this.$refs.container.find("*:visible")).filter(r).filter((function(){return"hidden"!==n(this).css("visibility")&&!n(this).hasClass("disabled")}))).length?(o=s.index(e.activeElement),t&&t.shiftKey?(o<0||0==o)&&(t.preventDefault(),s.eq(s.length-1).trigger("focus")):(o<0||o==s.length-1)&&(t&&t.preventDefault(),s.eq(0).trigger("focus"))):this.$refs.container.trigger("focus"))},activate:function(){var t=this;n(".fancybox-container").each((function(){var e=n(this).data("FancyBox");e&&e.id!==t.id&&!e.isClosing&&(e.trigger("onDeactivate"),e.removeEvents(),e.isVisible=!1)})),t.isVisible=!0,(t.current||t.isIdle)&&(t.update(),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(t,e){var i,s,o,r,a,l,c,h=this,d=h.current,f=function(){h.cleanUp(t)};return!h.isClosing&&(h.isClosing=!0,!1===h.trigger("beforeClose",t)?(h.isClosing=!1,u((function(){h.update()})),!1):(h.removeEvents(),o=d.$content,i=d.opts.animationEffect,s=n.isNumeric(e)?e:i?d.opts.animationDuration:0,d.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==t?n.fancybox.stop(d.$slide):i=!1,d.$slide.siblings().trigger("onReset").remove(),s&&h.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",s+"ms"),h.hideLoading(d),h.hideControls(!0),h.updateCursor(),"zoom"!==i||o&&s&&"image"===d.type&&!h.isMoved()&&!d.hasError&&(c=h.getThumbPos(d))||(i="fade"),"zoom"===i?(n.fancybox.stop(o),l={top:(r=n.fancybox.getTranslate(o)).top,left:r.left,scaleX:r.width/c.width,scaleY:r.height/c.height,width:c.width,height:c.height},"auto"==(a=d.opts.zoomOpacity)&&(a=Math.abs(d.width/d.height-c.width/c.height)>.1),a&&(c.opacity=0),n.fancybox.setTranslate(o,l),p(o),n.fancybox.animate(o,c,s,f),!0):(i&&s?n.fancybox.animate(d.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+i,s,f):!0===t?setTimeout(f,s):f(),!0)))},cleanUp:function(e){var i,s,o,r=this.current.opts.$orig;this.current.$slide.trigger("onReset"),this.$refs.container.empty().remove(),this.trigger("afterClose",e),this.current.opts.backFocus&&(r&&r.length&&r.is(":visible")||(r=this.$trigger),r&&r.length&&(s=t.scrollX,o=t.scrollY,r.trigger("focus"),n("html, body").scrollTop(o).scrollLeft(s))),this.current=null,(i=n.fancybox.getInstance())?i.activate():(n("body").removeClass("fancybox-active compensate-for-scrollbar"),n("#fancybox-style-noscroll").remove())},trigger:function(t,e){var i,s=Array.prototype.slice.call(arguments,1),o=this,r=e&&e.opts?e:o.current;if(r?s.unshift(r):r=o,s.unshift(o),n.isFunction(r.opts[t])&&(i=r.opts[t].apply(r,s)),!1===i)return i;"afterClose"!==t&&o.$refs?o.$refs.container.trigger(t+".fb",s):l.trigger(t+".fb",s)},updateControls:function(){var t=this.current,i=t.index,s=this.$refs.container,o=this.$refs.caption,r=t.opts.caption;t.$slide.trigger("refresh"),r&&r.length?(this.$caption=o,o.children().eq(0).html(r)):this.$caption=null,this.hasHiddenControls||this.isIdle||this.showControls(),s.find("[data-fancybox-count]").html(this.group.length),s.find("[data-fancybox-index]").html(i+1),s.find("[data-fancybox-prev]").prop("disabled",!t.opts.loop&&i<=0),s.find("[data-fancybox-next]").prop("disabled",!t.opts.loop&&i>=this.group.length-1),"image"===t.type?s.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",t.opts.image.src||t.src).show():t.opts.toolbar&&s.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),n(e.activeElement).is(":hidden,[disabled]")&&this.$refs.container.trigger("focus")},hideControls:function(t){var e=["infobar","toolbar","nav"];!t&&this.current.opts.preventCaptionOverlap||e.push("caption"),this.$refs.container.removeClass(e.map((function(t){return"fancybox-show-"+t})).join(" ")),this.hasHiddenControls=!0},showControls:function(){var t=this.current?this.current.opts:this.opts,e=this.$refs.container;this.hasHiddenControls=!1,this.idleSecondsCounter=0,e.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&this.group.length>1)).toggleClass("fancybox-show-caption",!!this.$caption).toggleClass("fancybox-show-nav",!!(t.arrows&&this.group.length>1)).toggleClass("fancybox-is-modal",!!t.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),n.fancybox={version:"3.5.7",defaults:r,getInstance:function(t){var e=n('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return e instanceof g&&("string"===n.type(t)?e[t].apply(e,i):"function"===n.type(t)&&t.apply(e,i),e)},open:function(t,e,n){return new g(t,e,n)},close:function(t){var e=this.getInstance();e&&(e.close(),!0===t&&this.close(t))},destroy:function(){this.close(!0),l.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(s=e.createElement("div"),t.getComputedStyle&&t.getComputedStyle(s)&&t.getComputedStyle(s).getPropertyValue("transform")&&!(e.documentMode&&e.documentMode<11)),getTranslate:function(t){var e;return!(!t||!t.length)&&{top:(e=t[0].getBoundingClientRect()).top||0,left:e.left||0,width:e.width,height:e.height,opacity:parseFloat(t.css("opacity"))}},setTranslate:function(t,e){var n="",i={};if(t&&e)return void 0===e.left&&void 0===e.top||(n=(void 0===e.left?t.position().left:e.left)+"px, "+(void 0===e.top?t.position().top:e.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),void 0!==e.scaleX&&void 0!==e.scaleY?n+=" scale("+e.scaleX+", "+e.scaleY+")":void 0!==e.scaleX&&(n+=" scaleX("+e.scaleX+")"),n.length&&(i.transform=n),void 0!==e.opacity&&(i.opacity=e.opacity),void 0!==e.width&&(i.width=e.width),void 0!==e.height&&(i.height=e.height),t.css(i)},animate:function(t,e,i,s,o){var r,a=this;n.isFunction(i)&&(s=i,i=null),a.stop(t),r=a.getTranslate(t),t.on(d,(function(l){(!l||!l.originalEvent||t.is(l.originalEvent.target)&&"z-index"!=l.originalEvent.propertyName)&&(a.stop(t),n.isNumeric(i)&&t.css("transition-duration",""),n.isPlainObject(e)?void 0!==e.scaleX&&void 0!==e.scaleY&&a.setTranslate(t,{top:e.top,left:e.left,width:r.width*e.scaleX,height:r.height*e.scaleY,scaleX:1,scaleY:1}):!0!==o&&t.removeClass(e),n.isFunction(s)&&s(l))})),n.isNumeric(i)&&t.css("transition-duration",i+"ms"),n.isPlainObject(e)?(void 0!==e.scaleX&&void 0!==e.scaleY&&(delete e.width,delete e.height,t.parent().hasClass("fancybox-slide--image")&&t.parent().addClass("fancybox-is-scaling")),n.fancybox.setTranslate(t,e)):t.addClass(e),t.data("timer",setTimeout((function(){t.trigger(d)}),i+33))},stop:function(t,e){t&&t.length&&(clearTimeout(t.data("timer")),e&&t.trigger(d),t.off(d).css("transition-duration",""),t.parent().removeClass("fancybox-is-scaling"))}},n.fn.fancybox=function(t){var e;return(e=(t=t||{}).selector||!1)?n("body").off("click.fb-start",e).on("click.fb-start",e,{options:t},m):this.off("click.fb-start").on("click.fb-start",{items:this,options:t},m),this},l.on("click.fb-start","[data-fancybox]",m),l.on("click.fb-start","[data-fancybox-trigger]",(function(t){n('[data-fancybox="'+n(this).attr("data-fancybox-trigger")+'"]').eq(n(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:n(this)})})),o=null,l.on("mousedown mouseup focus blur",".fancybox-button",(function(t){switch(t.type){case"mousedown":o=n(this);break;case"mouseup":o=null;break;case"focusin":n(".fancybox-button").removeClass("fancybox-focus"),n(this).is(o)||n(this).is("[disabled]")||n(this).addClass("fancybox-focus");break;case"focusout":n(".fancybox-button").removeClass("fancybox-focus")}}))}function m(t,e){var i,s,o,r=[],a=0;t&&t.isDefaultPrevented()||(t.preventDefault(),e=e||{},t&&t.data&&(e=f(t.data.options,e)),i=e.$target||n(t.currentTarget).trigger("blur"),(o=n.fancybox.getInstance())&&o.$trigger&&o.$trigger.is(i)||(r=e.selector?n(e.selector):(s=i.attr("data-fancybox")||"")?(r=t.data?t.data.items:[]).length?r.filter('[data-fancybox="'+s+'"]'):n('[data-fancybox="'+s+'"]'):[i],(a=n(r).index(i))<0&&(a=0),(o=n.fancybox.open(r,e,a)).$trigger=i))}}(window,document,t),function(t){"use strict";var e={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/?ll="+(t[9]?t[9]+"&z="+Math.floor(t[10])+(t[12]?t[12].replace(/^\//,"&"):""):t[12]+"").replace(/\?/,"&")+"&output="+(t[12]&&t[12].indexOf("layer=c")>0?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/maps?q="+t[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}},n=function(e,n,i){if(e)return i=i||"","object"===t.type(i)&&(i=t.param(i,!0)),t.each(n,(function(t,n){e=e.replace("$"+t,n||"")})),i.length&&(e+=(e.indexOf("?")>0?"&":"?")+i),e};t(document).on("objectNeedsType.fb",(function(i,s,o){var r,a,l,c,u,h,d,p=o.src||"",f=!1;r=t.extend(!0,{},e,o.opts.media),t.each(r,(function(e,i){if(l=p.match(i.matcher)){if(f=i.type,d=e,h={},i.paramPlace&&l[i.paramPlace]){"?"==(u=l[i.paramPlace])[0]&&(u=u.substring(1)),u=u.split("&");for(var s=0;s<u.length;++s){var r=u[s].split("=",2);2==r.length&&(h[r[0]]=decodeURIComponent(r[1].replace(/\+/g," ")))}}return c=t.extend(!0,{},i.params,o.opts[e],h),p="function"===t.type(i.url)?i.url.call(this,l,c,o):n(i.url,l,c),a="function"===t.type(i.thumb)?i.thumb.call(this,l,c,o):n(i.thumb,l),"youtube"===e?p=p.replace(/&t=((\d+)m)?(\d+)s/,(function(t,e,n,i){return"&start="+((n?60*parseInt(n,10):0)+parseInt(i,10))})):"vimeo"===e&&(p=p.replace("&%23","#")),!1}})),f?(o.opts.thumb||o.opts.$thumb&&o.opts.$thumb.length||(o.opts.thumb=a),"iframe"===f&&(o.opts=t.extend(!0,o.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),t.extend(o,{type:f,src:p,origSrc:o.src,contentSource:d,contentType:"image"===f?"image":"gmap_place"==d||"gmap_search"==d?"map":"video"})):p&&(o.type=o.opts.defaultType)}));var i={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(t){var e,n=this;this[t].loaded?setTimeout((function(){n.done(t)})):this[t].loading||(this[t].loading=!0,(e=document.createElement("script")).type="text/javascript",e.src=this[t].src,"youtube"===t?window.onYouTubeIframeAPIReady=function(){n[t].loaded=!0,n.done(t)}:e.onload=function(){n[t].loaded=!0,n.done(t)},document.body.appendChild(e))},done:function(e){var n,i;"youtube"===e&&delete window.onYouTubeIframeAPIReady,(n=t.fancybox.getInstance())&&(i=n.current.$content.find("iframe"),"youtube"===e&&void 0!==YT&&YT?new YT.Player(i.attr("id"),{events:{onStateChange:function(t){0==t.data&&n.next()}}}):"vimeo"===e&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(i).on("ended",(function(){n.next()})))}};t(document).on({"afterShow.fb":function(t,e,n){e.group.length>1&&("youtube"===n.contentSource||"vimeo"===n.contentSource)&&i.load(n.contentSource)}})}(t),function(t,e,n){"use strict";var i=t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||function(e){return t.setTimeout(e,1e3/60)},s=t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.mozCancelAnimationFrame||t.oCancelAnimationFrame||function(e){t.clearTimeout(e)},o=function(e){var n=[];for(var i in e=(e=e.originalEvent||e||t.e).touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e])e[i].pageX?n.push({x:e[i].pageX,y:e[i].pageY}):e[i].clientX&&n.push({x:e[i].clientX,y:e[i].clientY});return n},r=function(t,e,n){return e&&t?"x"===n?t.x-e.x:"y"===n?t.y-e.y:Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)):0},a=function(t){if(t.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||n.isFunction(t.get(0).onclick)||t.data("selectable"))return!0;for(var e=0,i=t[0].attributes,s=i.length;e<s;e++)if("data-fancybox-"===i[e].nodeName.substr(0,14))return!0;return!1},l=function(e){for(var n,i,s,o,r,a=!1;n=e.get(0),i=void 0,s=void 0,o=void 0,r=void 0,i=t.getComputedStyle(n)["overflow-y"],s=t.getComputedStyle(n)["overflow-x"],o=("scroll"===i||"auto"===i)&&n.scrollHeight>n.clientHeight,r=("scroll"===s||"auto"===s)&&n.scrollWidth>n.clientWidth,!(a=o||r)&&(e=e.parent()).length&&!e.hasClass("fancybox-stage")&&!e.is("body"););return a},c=function(t){this.instance=t,this.$bg=t.$refs.bg,this.$stage=t.$refs.stage,this.$container=t.$refs.container,this.destroy(),this.$container.on("touchstart.fb.touch mousedown.fb.touch",n.proxy(this,"ontouchstart"))};c.prototype.destroy=function(){this.$container.off(".fb.touch"),n(e).off(".fb.touch"),this.requestId&&(s(this.requestId),this.requestId=null),this.tapped&&(clearTimeout(this.tapped),this.tapped=null)},c.prototype.ontouchstart=function(i){var s=n(i.target),c=this.instance,u=c.current,h=u.$slide,d=u.$content,p="touchstart"==i.type;if(p&&this.$container.off("mousedown.fb.touch"),(!i.originalEvent||2!=i.originalEvent.button)&&h.length&&s.length&&!a(s)&&!a(s.parent())&&(s.is("img")||!(i.originalEvent.clientX>s[0].clientWidth+s.offset().left))){if(!u||c.isAnimating||u.$slide.hasClass("fancybox-animated"))return i.stopPropagation(),void i.preventDefault();this.realPoints=this.startPoints=o(i),this.startPoints.length&&(u.touch&&i.stopPropagation(),this.startEvent=i,this.canTap=!0,this.$target=s,this.$content=d,this.opts=u.opts.touch,this.isPanning=!1,this.isSwiping=!1,this.isZooming=!1,this.isScrolling=!1,this.canPan=c.canPan(),this.startTime=(new Date).getTime(),this.distanceX=this.distanceY=this.distance=0,this.canvasWidth=Math.round(h[0].clientWidth),this.canvasHeight=Math.round(h[0].clientHeight),this.contentLastPos=null,this.contentStartPos=n.fancybox.getTranslate(this.$content)||{top:0,left:0},this.sliderStartPos=n.fancybox.getTranslate(h),this.stagePos=n.fancybox.getTranslate(c.$refs.stage),this.sliderStartPos.top-=this.stagePos.top,this.sliderStartPos.left-=this.stagePos.left,this.contentStartPos.top-=this.stagePos.top,this.contentStartPos.left-=this.stagePos.left,n(e).off(".fb.touch").on(p?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",n.proxy(this,"ontouchend")).on(p?"touchmove.fb.touch":"mousemove.fb.touch",n.proxy(this,"ontouchmove")),n.fancybox.isMobile&&e.addEventListener("scroll",this.onscroll,!0),((this.opts||this.canPan)&&(s.is(this.$stage)||this.$stage.find(s).length)||(s.is(".fancybox-image")&&i.preventDefault(),n.fancybox.isMobile&&s.parents(".fancybox-caption").length))&&(this.isScrollable=l(s)||l(s.parent()),n.fancybox.isMobile&&this.isScrollable||i.preventDefault(),(1===this.startPoints.length||u.hasError)&&(this.canPan?(n.fancybox.stop(this.$content),this.isPanning=!0):this.isSwiping=!0,this.$container.addClass("fancybox-is-grabbing")),2===this.startPoints.length&&"image"===u.type&&(u.isLoaded||u.$ghost)&&(this.canTap=!1,this.isSwiping=!1,this.isPanning=!1,this.isZooming=!0,n.fancybox.stop(this.$content),this.centerPointStartX=.5*(this.startPoints[0].x+this.startPoints[1].x)-n(t).scrollLeft(),this.centerPointStartY=.5*(this.startPoints[0].y+this.startPoints[1].y)-n(t).scrollTop(),this.percentageOfImageAtPinchPointX=(this.centerPointStartX-this.contentStartPos.left)/this.contentStartPos.width,this.percentageOfImageAtPinchPointY=(this.centerPointStartY-this.contentStartPos.top)/this.contentStartPos.height,this.startDistanceBetweenFingers=r(this.startPoints[0],this.startPoints[1]))))}},c.prototype.onscroll=function(t){this.isScrolling=!0,e.removeEventListener("scroll",this.onscroll,!0)},c.prototype.ontouchmove=function(t){void 0===t.originalEvent.buttons||0!==t.originalEvent.buttons?this.isScrolling?this.canTap=!1:(this.newPoints=o(t),(this.opts||this.canPan)&&this.newPoints.length&&this.newPoints.length&&(this.isSwiping&&!0===this.isSwiping||t.preventDefault(),this.distanceX=r(this.newPoints[0],this.startPoints[0],"x"),this.distanceY=r(this.newPoints[0],this.startPoints[0],"y"),this.distance=r(this.newPoints[0],this.startPoints[0]),this.distance>0&&(this.isSwiping?this.onSwipe(t):this.isPanning?this.onPan():this.isZooming&&this.onZoom()))):this.ontouchend(t)},c.prototype.onSwipe=function(e){var o,r=this,a=r.instance,l=r.isSwiping,c=r.sliderStartPos.left||0;if(!0!==l)"x"==l&&(r.distanceX>0&&(r.instance.group.length<2||0===r.instance.current.index&&!r.instance.current.opts.loop)?c+=Math.pow(r.distanceX,.8):r.distanceX<0&&(r.instance.group.length<2||r.instance.current.index===r.instance.group.length-1&&!r.instance.current.opts.loop)?c-=Math.pow(-r.distanceX,.8):c+=r.distanceX),r.sliderLastPos={top:"x"==l?0:r.sliderStartPos.top+r.distanceY,left:c},r.requestId&&(s(r.requestId),r.requestId=null),r.requestId=i((function(){r.sliderLastPos&&(n.each(r.instance.slides,(function(t,e){var i=e.pos-r.instance.currPos;n.fancybox.setTranslate(e.$slide,{top:r.sliderLastPos.top,left:r.sliderLastPos.left+i*r.canvasWidth+i*e.opts.gutter})})),r.$container.addClass("fancybox-is-sliding"))}));else if(Math.abs(r.distance)>10){if(r.canTap=!1,a.group.length<2&&r.opts.vertical?r.isSwiping="y":a.isDragging||!1===r.opts.vertical||"auto"===r.opts.vertical&&n(t).width()>800?r.isSwiping="x":(o=Math.abs(180*Math.atan2(r.distanceY,r.distanceX)/Math.PI),r.isSwiping=o>45&&o<135?"y":"x"),"y"===r.isSwiping&&n.fancybox.isMobile&&r.isScrollable)return void(r.isScrolling=!0);a.isDragging=r.isSwiping,r.startPoints=r.newPoints,n.each(a.slides,(function(t,e){var i,s;n.fancybox.stop(e.$slide),i=n.fancybox.getTranslate(e.$slide),s=n.fancybox.getTranslate(a.$refs.stage),e.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass((function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")})),e.pos===a.current.pos&&(r.sliderStartPos.top=i.top-s.top,r.sliderStartPos.left=i.left-s.left),n.fancybox.setTranslate(e.$slide,{top:i.top-s.top,left:i.left-s.left})})),a.SlideShow&&a.SlideShow.isActive&&a.SlideShow.stop()}},c.prototype.onPan=function(){var t=this;r(t.newPoints[0],t.realPoints[0])<(n.fancybox.isMobile?10:5)?t.startPoints=t.newPoints:(t.canTap=!1,t.contentLastPos=t.limitMovement(),t.requestId&&s(t.requestId),t.requestId=i((function(){n.fancybox.setTranslate(t.$content,t.contentLastPos)})))},c.prototype.limitMovement=function(){var t,e,n,i,s,o,r=this.canvasWidth,a=this.canvasHeight,l=this.distanceX,c=this.distanceY,u=this.contentStartPos,h=u.left,d=u.top,p=u.width,f=u.height;return s=p>r?h+l:h,o=d+c,t=Math.max(0,.5*r-.5*p),e=Math.max(0,.5*a-.5*f),n=Math.min(r-p,.5*r-.5*p),i=Math.min(a-f,.5*a-.5*f),l>0&&s>t&&(s=t-1+Math.pow(-t+h+l,.8)||0),l<0&&s<n&&(s=n+1-Math.pow(n-h-l,.8)||0),c>0&&o>e&&(o=e-1+Math.pow(-e+d+c,.8)||0),c<0&&o<i&&(o=i+1-Math.pow(i-d-c,.8)||0),{top:o,left:s}},c.prototype.limitPosition=function(t,e,n,i){var s=this.canvasWidth,o=this.canvasHeight;return t=n>s?(t=t>0?0:t)<s-n?s-n:t:Math.max(0,s/2-n/2),{top:e=i>o?(e=e>0?0:e)<o-i?o-i:e:Math.max(0,o/2-i/2),left:t}},c.prototype.onZoom=function(){var e=this,o=e.contentStartPos,a=o.width,l=o.height,c=o.left,u=o.top,h=r(e.newPoints[0],e.newPoints[1])/e.startDistanceBetweenFingers,d=Math.floor(a*h),p=Math.floor(l*h),f=(a-d)*e.percentageOfImageAtPinchPointX,g=(l-p)*e.percentageOfImageAtPinchPointY,m=(e.newPoints[0].x+e.newPoints[1].x)/2-n(t).scrollLeft(),v=(e.newPoints[0].y+e.newPoints[1].y)/2-n(t).scrollTop(),y=m-e.centerPointStartX,b={top:u+(g+(v-e.centerPointStartY)),left:c+(f+y),scaleX:h,scaleY:h};e.canTap=!1,e.newWidth=d,e.newHeight=p,e.contentLastPos=b,e.requestId&&s(e.requestId),e.requestId=i((function(){n.fancybox.setTranslate(e.$content,e.contentLastPos)}))},c.prototype.ontouchend=function(t){var i=this.isSwiping,r=this.isPanning,a=this.isZooming,l=this.isScrolling;if(this.endPoints=o(t),this.dMs=Math.max((new Date).getTime()-this.startTime,1),this.$container.removeClass("fancybox-is-grabbing"),n(e).off(".fb.touch"),e.removeEventListener("scroll",this.onscroll,!0),this.requestId&&(s(this.requestId),this.requestId=null),this.isSwiping=!1,this.isPanning=!1,this.isZooming=!1,this.isScrolling=!1,this.instance.isDragging=!1,this.canTap)return this.onTap(t);this.speed=100,this.velocityX=this.distanceX/this.dMs*.5,this.velocityY=this.distanceY/this.dMs*.5,r?this.endPanning():a?this.endZooming():this.endSwiping(i,l)},c.prototype.endSwiping=function(t,e){var i=!1,s=this.instance.group.length,o=Math.abs(this.distanceX),r="x"==t&&s>1&&(this.dMs>130&&o>10||o>50);this.sliderLastPos=null,"y"==t&&!e&&Math.abs(this.distanceY)>50?(n.fancybox.animate(this.instance.current.$slide,{top:this.sliderStartPos.top+this.distanceY+150*this.velocityY,opacity:0},200),i=this.instance.close(!0,250)):r&&this.distanceX>0?i=this.instance.previous(300):r&&this.distanceX<0&&(i=this.instance.next(300)),!1!==i||"x"!=t&&"y"!=t||this.instance.centerSlide(200),this.$container.removeClass("fancybox-is-sliding")},c.prototype.endPanning=function(){var t,e,i;this.contentLastPos&&(!1===this.opts.momentum||this.dMs>350?(t=this.contentLastPos.left,e=this.contentLastPos.top):(t=this.contentLastPos.left+500*this.velocityX,e=this.contentLastPos.top+500*this.velocityY),(i=this.limitPosition(t,e,this.contentStartPos.width,this.contentStartPos.height)).width=this.contentStartPos.width,i.height=this.contentStartPos.height,n.fancybox.animate(this.$content,i,366))},c.prototype.endZooming=function(){var t,e,i,s,o=this.instance.current,r=this.newWidth,a=this.newHeight;this.contentLastPos&&(t=this.contentLastPos.left,s={top:e=this.contentLastPos.top,left:t,width:r,height:a,scaleX:1,scaleY:1},n.fancybox.setTranslate(this.$content,s),r<this.canvasWidth&&a<this.canvasHeight?this.instance.scaleToFit(150):r>o.width||a>o.height?this.instance.scaleToActual(this.centerPointStartX,this.centerPointStartY,150):(i=this.limitPosition(t,e,r,a),n.fancybox.animate(this.$content,i,150)))},c.prototype.onTap=function(e){var i,s=this,r=n(e.target),a=s.instance,l=a.current,c=e&&o(e)||s.startPoints,u=c[0]?c[0].x-n(t).scrollLeft()-s.stagePos.left:0,h=c[0]?c[0].y-n(t).scrollTop()-s.stagePos.top:0,d=function(t){var i=l.opts[t];if(n.isFunction(i)&&(i=i.apply(a,[l,e])),i)switch(i){case"close":a.close(s.startEvent);break;case"toggleControls":a.toggleControls();break;case"next":a.next();break;case"nextOrClose":a.group.length>1?a.next():a.close(s.startEvent);break;case"zoom":"image"==l.type&&(l.isLoaded||l.$ghost)&&(a.canPan()?a.scaleToFit():a.isScaledDown()?a.scaleToActual(u,h):a.group.length<2&&a.close(s.startEvent))}};if((!e.originalEvent||2!=e.originalEvent.button)&&(r.is("img")||!(u>r[0].clientWidth+r.offset().left))){if(r.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))i="Outside";else if(r.is(".fancybox-slide"))i="Slide";else{if(!a.current.$content||!a.current.$content.find(r).addBack().filter(r).length)return;i="Content"}if(s.tapped){if(clearTimeout(s.tapped),s.tapped=null,Math.abs(u-s.tapX)>50||Math.abs(h-s.tapY)>50)return this;d("dblclick"+i)}else s.tapX=u,s.tapY=h,l.opts["dblclick"+i]&&l.opts["dblclick"+i]!==l.opts["click"+i]?s.tapped=setTimeout((function(){s.tapped=null,a.isAnimating||d("click"+i)}),500):d("click"+i);return this}},n(e).on("onActivate.fb",(function(t,e){e&&!e.Guestures&&(e.Guestures=new c(e))})).on("beforeClose.fb",(function(t,e){e&&e.Guestures&&e.Guestures.destroy()}))}(window,document,t),function(t,e){"use strict";e.extend(!0,e.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});var n=function(t){this.instance=t,this.init()};e.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var t=this,n=t.instance,i=n.group[n.currIndex].opts.slideShow;t.$button=n.$refs.toolbar.find("[data-fancybox-play]").on("click",(function(){t.toggle()})),n.group.length<2||!i?t.$button.hide():i.progress&&(t.$progress=e('<div class="fancybox-progress"></div>').appendTo(n.$refs.inner))},set:function(t){var n=this.instance,i=n.current;i&&(!0===t||i.opts.loop||n.currIndex<n.group.length-1)?this.isActive&&"video"!==i.contentType&&(this.$progress&&e.fancybox.animate(this.$progress.show(),{scaleX:1},i.opts.slideShow.speed),this.timer=setTimeout((function(){n.current.opts.loop||n.current.index!=n.group.length-1?n.next():n.jumpTo(0)}),i.opts.slideShow.speed)):(this.stop(),n.idleSecondsCounter=0,n.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var t=this.instance.current;t&&(this.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),this.isActive=!0,t.isComplete&&this.set(!0),this.instance.trigger("onSlideShowChange",!0))},stop:function(){var t=this.instance.current;this.clear(),this.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),this.isActive=!1,this.instance.trigger("onSlideShowChange",!1),this.$progress&&this.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),e(t).on({"onInit.fb":function(t,e){e&&!e.SlideShow&&(e.SlideShow=new n(e))},"beforeShow.fb":function(t,e,n,i){var s=e&&e.SlideShow;i?s&&n.opts.slideShow.autoStart&&s.start():s&&s.isActive&&s.clear()},"afterShow.fb":function(t,e,n){var i=e&&e.SlideShow;i&&i.isActive&&i.set()},"afterKeydown.fb":function(n,i,s,o,r){var a=i&&i.SlideShow;!a||!s.opts.slideShow||80!==r&&32!==r||e(t.activeElement).is("button,a,input")||(o.preventDefault(),a.toggle())},"beforeClose.fb onDeactivate.fb":function(t,e){var n=e&&e.SlideShow;n&&n.stop()}}),e(t).on("visibilitychange",(function(){var n=e.fancybox.getInstance(),i=n&&n.SlideShow;i&&i.isActive&&(t.hidden?i.clear():i.set())}))}(document,t),function(t,e){"use strict";var n=function(){for(var e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],n={},i=0;i<e.length;i++){var s=e[i];if(s&&s[1]in t){for(var o=0;o<s.length;o++)n[e[0][o]]=s[o];return n}}return!1}();if(n){var i={request:function(e){(e=e||t.documentElement)[n.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){t[n.exitFullscreen]()},toggle:function(e){e=e||t.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(t[n.fullscreenElement])},enabled:function(){return Boolean(t[n.fullscreenEnabled])}};e.extend(!0,e.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),e(t).on(n.fullscreenchange,(function(){var t=i.isFullscreen(),n=e.fancybox.getInstance();n&&(n.current&&"image"===n.current.type&&n.isAnimating&&(n.isAnimating=!1,n.update(!0,!0,0),n.isComplete||n.complete()),n.trigger("onFullscreenChange",t),n.$refs.container.toggleClass("fancybox-is-fullscreen",t),n.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!t).toggleClass("fancybox-button--fsexit",t))}))}e(t).on({"onInit.fb":function(t,e){n?e&&e.group[e.currIndex].opts.fullScreen?(e.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",(function(t){t.stopPropagation(),t.preventDefault(),i.toggle()})),e.opts.fullScreen&&!0===e.opts.fullScreen.autoStart&&i.request(),e.FullScreen=i):e&&e.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():e.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(t,e,n,i,s){e&&e.FullScreen&&70===s&&(i.preventDefault(),e.FullScreen.toggle())},"beforeClose.fb":function(t,e){e&&e.FullScreen&&e.$refs.container.hasClass("fancybox-is-fullscreen")&&i.exit()}})}(document,t),function(t,e){"use strict";var n="fancybox-thumbs";e.fancybox.defaults=e.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},e.fancybox.defaults);var i=function(t){this.init(t)};e.extend(i.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(t){var e=this,n=t.group,i=0;e.instance=t,e.opts=n[t.currIndex].opts.thumbs,t.Thumbs=e,e.$button=t.$refs.toolbar.find("[data-fancybox-thumbs]");for(var s=0,o=n.length;s<o&&(n[s].thumb&&i++,!(i>1));s++);i>1&&e.opts?(e.$button.removeAttr("style").on("click",(function(){e.toggle()})),e.isActive=!0):e.$button.hide()},create:function(){var t,i=this.instance,s=this.opts.parentEl,o=[];this.$grid||(this.$grid=e('<div class="'+n+" "+n+"-"+this.opts.axis+'"></div>').appendTo(i.$refs.container.find(s).addBack().filter(s)),this.$grid.on("click","a",(function(){i.jumpTo(e(this).attr("data-index"))}))),this.$list||(this.$list=e('<div class="'+n+'__list">').appendTo(this.$grid)),e.each(i.group,(function(e,n){(t=n.thumb)||"image"!==n.type||(t=n.src),o.push('<a href="javascript:;" tabindex="0" data-index="'+e+'"'+(t&&t.length?' style="background-image:url('+t+')"':'class="fancybox-thumbs-missing"')+"></a>")})),this.$list[0].innerHTML=o.join(""),"x"===this.opts.axis&&this.$list.width(parseInt(this.$grid.css("padding-right"),10)+i.group.length*this.$list.children().eq(0).outerWidth(!0))},focus:function(t){var e,n,i=this.$list,s=this.$grid;this.instance.current&&(n=(e=i.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+this.instance.current.index+'"]').addClass("fancybox-thumbs-active")).position(),"y"===this.opts.axis&&(n.top<0||n.top>i.height()-e.outerHeight())?i.stop().animate({scrollTop:i.scrollTop()+n.top},t):"x"===this.opts.axis&&(n.left<s.scrollLeft()||n.left>s.scrollLeft()+(s.width()-e.outerWidth()))&&i.parent().stop().animate({scrollLeft:n.left},t))},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),this.focus(0)):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),e(t).on({"onInit.fb":function(t,e){var n;e&&!e.Thumbs&&(n=new i(e)).isActive&&!0===n.opts.autoStart&&n.show()},"beforeShow.fb":function(t,e,n,i){var s=e&&e.Thumbs;s&&s.isVisible&&s.focus(i?0:250)},"afterKeydown.fb":function(t,e,n,i,s){var o=e&&e.Thumbs;o&&o.isActive&&71===s&&(i.preventDefault(),o.toggle())},"beforeClose.fb":function(t,e){var n=e&&e.Thumbs;n&&n.isVisible&&!1!==n.opts.hideOnClose&&n.$grid.hide()}})}(document,t),function(t,e){"use strict";e.extend(!0,e.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(t,e){return!t.currentHash&&"inline"!==e.type&&"html"!==e.type&&(e.origSrc||e.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),e(t).on("click","[data-fancybox-share]",(function(){var t,n,i,s,o=e.fancybox.getInstance(),r=o.current||null;r&&("function"===e.type(r.opts.share.url)&&(t=r.opts.share.url.apply(r,[o,r])),n=r.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===r.type?encodeURIComponent(r.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(t)).replace(/\{\{url_raw\}\}/g,(i=t,s={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(i).replace(/[&<>"'`=\/]/g,(function(t){return s[t]})))).replace(/\{\{descr\}\}/g,o.$caption?encodeURIComponent(o.$caption.text()):""),e.fancybox.open({src:o.translate(o,n),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(t,e){o.$refs.container.one("beforeClose.fb",(function(){t.close(null,0)})),e.$content.find(".fancybox-share__button").click((function(){return window.open(this.href,"Share","width=550, height=450"),!1}))},mobile:{autoFocus:!1}}}))}))}(document,t),function(t,e,n){"use strict";function i(){var e=t.location.hash.substr(1),n=e.split("-"),i=n.length>1&&/^\+?\d+$/.test(n[n.length-1])&&parseInt(n.pop(-1),10)||1;return{hash:e,index:i<1?1:i,gallery:n.join("-")}}function s(t){""!==t.gallery&&n("[data-fancybox='"+n.escapeSelector(t.gallery)+"']").eq(t.index-1).focus().trigger("click.fb-start")}function o(t){var e,n;return!!t&&(""!==(n=(e=t.current?t.current.opts:t.opts).hash||(e.$orig?e.$orig.data("fancybox")||e.$orig.data("fancybox-trigger"):""))&&n)}n.escapeSelector||(n.escapeSelector=function(t){return(t+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,(function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t}))}),n((function(){!1!==n.fancybox.defaults.hash&&(n(e).on({"onInit.fb":function(t,e){var n,s;!1!==e.group[e.currIndex].opts.hash&&(n=i(),(s=o(e))&&n.gallery&&s==n.gallery&&(e.currIndex=n.index-1))},"beforeShow.fb":function(n,i,s,r){var a;s&&!1!==s.opts.hash&&(a=o(i))&&(i.currentHash=a+(i.group.length>1?"-"+(s.index+1):""),t.location.hash!=="#"+i.currentHash&&(r&&!i.origHash&&(i.origHash=t.location.hash),i.hashTimer&&clearTimeout(i.hashTimer),i.hashTimer=setTimeout((function(){"replaceState"in t.history?(t.history[r?"pushState":"replaceState"]({},e.title,t.location.pathname+t.location.search+"#"+i.currentHash),r&&(i.hasCreatedHistory=!0)):t.location.hash=i.currentHash,i.hashTimer=null}),300)))},"beforeClose.fb":function(n,i,s){s&&!1!==s.opts.hash&&(clearTimeout(i.hashTimer),i.currentHash&&i.hasCreatedHistory?t.history.back():i.currentHash&&("replaceState"in t.history?t.history.replaceState({},e.title,t.location.pathname+t.location.search+(i.origHash||"")):t.location.hash=i.origHash),i.currentHash=null)}}),n(t).on("hashchange.fb",(function(){var t=i(),e=null;n.each(n(".fancybox-container").get().reverse(),(function(t,i){var s=n(i).data("FancyBox");if(s&&s.currentHash)return e=s,!1})),e?e.currentHash===t.gallery+"-"+t.index||1===t.index&&e.currentHash==t.gallery||(e.currentHash=null,e.close()):""!==t.gallery&&s(t)})),setTimeout((function(){n.fancybox.getInstance()||s(i())}),50))}))}(window,document,t),function(t,e){"use strict";var n=(new Date).getTime();e(t).on({"onInit.fb":function(t,e,i){e.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",(function(t){var i=e.current,s=(new Date).getTime();e.group.length<2||!1===i.opts.wheel||"auto"===i.opts.wheel&&"image"!==i.type||(t.preventDefault(),t.stopPropagation(),i.$slide.hasClass("fancybox-animated")||(t=t.originalEvent||t,s-n<250||(n=s,e[(-t.deltaY||-t.deltaX||t.wheelDelta||-t.detail)<0?"next":"previous"]())))}))}})}(document,t)}).call(this,n(0))},,,function(t,e,n){(function(i){var s,o,r;window.Zepto,o=[n(0)],void 0===(r="function"==typeof(s=function(t){"use strict";var e=function(e,n,i){var s={invalid:[],getCaret:function(){try{var t,n=0,i=e.get(0),o=document.selection,r=i.selectionStart;return o&&-1===navigator.appVersion.indexOf("MSIE 10")?((t=o.createRange()).moveStart("character",-s.val().length),n=t.text.length):(r||"0"===r)&&(n=r),n}catch(t){}},setCaret:function(t){try{if(e.is(":focus")){var n,i=e.get(0);i.setSelectionRange?i.setSelectionRange(t,t):((n=i.createTextRange()).collapse(!0),n.moveEnd("character",t),n.moveStart("character",t),n.select())}}catch(t){}},events:function(){e.on("keydown.mask",(function(t){e.data("mask-keycode",t.keyCode||t.which),e.data("mask-previus-value",e.val()),e.data("mask-previus-caret-pos",s.getCaret()),s.maskDigitPosMapOld=s.maskDigitPosMap})).on(t.jMaskGlobals.useInput?"input.mask":"keyup.mask",s.behaviour).on("paste.mask drop.mask",(function(){setTimeout((function(){e.keydown().keyup()}),100)})).on("change.mask",(function(){e.data("changed",!0)})).on("blur.mask",(function(){a===s.val()||e.data("changed")||e.trigger("change"),e.data("changed",!1)})).on("blur.mask",(function(){a=s.val()})).on("focus.mask",(function(e){!0===i.selectOnFocus&&t(e.target).select()})).on("focusout.mask",(function(){i.clearIfNotMatch&&!o.test(s.val())&&s.val("")}))},getRegexMask:function(){for(var t,e,i,s,o,a,l=[],c=0;c<n.length;c++)(t=r.translation[n.charAt(c)])?(e=t.pattern.toString().replace(/.{1}$|^.{1}/g,""),i=t.optional,(s=t.recursive)?(l.push(n.charAt(c)),o={digit:n.charAt(c),pattern:e}):l.push(i||s?e+"?":e)):l.push(n.charAt(c).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));return a=l.join(""),o&&(a=a.replace(new RegExp("("+o.digit+"(.*"+o.digit+")?)"),"($1)?").replace(new RegExp(o.digit,"g"),o.pattern)),new RegExp(a)},destroyEvents:function(){e.off(["input","keydown","keyup","paste","drop","blur","focusout",""].join(".mask "))},val:function(t){var n,i=e.is("input"),s=i?"val":"text";return arguments.length>0?(e[s]()!==t&&e[s](t),n=e):n=e[s](),n},calculateCaretPosition:function(t){var n=s.getMasked(),i=s.getCaret();if(t!==n){var o=e.data("mask-previus-caret-pos")||0,r=n.length,a=t.length,l=0,c=0,u=0,h=0,d=0;for(d=i;d<r&&s.maskDigitPosMap[d];d++)c++;for(d=i-1;d>=0&&s.maskDigitPosMap[d];d--)l++;for(d=i-1;d>=0;d--)s.maskDigitPosMap[d]&&u++;for(d=o-1;d>=0;d--)s.maskDigitPosMapOld[d]&&h++;if(i>a)i=10*r;else if(o>=i&&o!==a){if(!s.maskDigitPosMapOld[i]){var p=i;i-=h-u,i-=l,s.maskDigitPosMap[i]&&(i=p)}}else i>o&&(i+=u-h,i+=c)}return i},behaviour:function(n){n=n||window.event,s.invalid=[];var i=e.data("mask-keycode");if(-1===t.inArray(i,r.byPassKeys)){var o=s.getMasked(),a=s.getCaret(),l=e.data("mask-previus-value")||"";return setTimeout((function(){s.setCaret(s.calculateCaretPosition(l))}),t.jMaskGlobals.keyStrokeCompensation),s.val(o),s.setCaret(a),s.callbacks(n)}},getMasked:function(t,e){var o,a,l,c=[],u=void 0===e?s.val():e+"",h=0,d=n.length,p=0,f=u.length,g=1,m="push",v=-1,y=0,b=[];for(i.reverse?(m="unshift",g=-1,o=0,h=d-1,p=f-1,a=function(){return h>-1&&p>-1}):(o=d-1,a=function(){return h<d&&p<f});a();){var x=n.charAt(h),w=u.charAt(p),_=r.translation[x];_?(w.match(_.pattern)?(c[m](w),_.recursive&&(-1===v?v=h:h===o&&h!==v&&(h=v-g),o===v&&(h-=g)),h+=g):w===l?(y--,l=void 0):_.optional?(h+=g,p-=g):_.fallback?(c[m](_.fallback),h+=g,p-=g):s.invalid.push({p,v:w,e:_.pattern}),p+=g):(t||c[m](x),w===x?(b.push(p),p+=g):(l=x,b.push(p+y),y++),h+=g)}var C=n.charAt(o);d!==f+1||r.translation[C]||c.push(C);var $=c.join("");return s.mapMaskdigitPositions($,b,f),$},mapMaskdigitPositions:function(t,e,n){var o=i.reverse?t.length-n:0;s.maskDigitPosMap={};for(var r=0;r<e.length;r++)s.maskDigitPosMap[e[r]+o]=1},callbacks:function(t){var o=s.val(),r=o!==a,l=[o,t,e,i],c=function(t,e,n){"function"==typeof i[t]&&e&&i[t].apply(this,n)};c("onChange",!0===r,l),c("onKeyPress",!0===r,l),c("onComplete",o.length===n.length,l),c("onInvalid",s.invalid.length>0,[o,t,e,s.invalid,i])}};e=t(e);var o,r=this,a=s.val();n="function"==typeof n?n(s.val(),void 0,e,i):n,r.mask=n,r.options=i,r.remove=function(){var t=s.getCaret();return r.options.placeholder&&e.removeAttr("placeholder"),e.data("mask-maxlength")&&e.removeAttr("maxlength"),s.destroyEvents(),s.val(r.getCleanVal()),s.setCaret(t),e},r.getCleanVal=function(){return s.getMasked(!0)},r.getMaskedVal=function(t){return s.getMasked(!1,t)},r.init=function(a){if(a=a||!1,i=i||{},r.clearIfNotMatch=t.jMaskGlobals.clearIfNotMatch,r.byPassKeys=t.jMaskGlobals.byPassKeys,r.translation=t.extend({},t.jMaskGlobals.translation,i.translation),r=t.extend(!0,{},r,i),o=s.getRegexMask(),a)s.events(),s.val(s.getMasked());else{i.placeholder&&e.attr("placeholder",i.placeholder),e.data("mask")&&e.attr("autocomplete","off");for(var l=0,c=!0;l<n.length;l++){var u=r.translation[n.charAt(l)];if(u&&u.recursive){c=!1;break}}c&&e.attr("maxlength",n.length).data("mask-maxlength",!0),s.destroyEvents(),s.events();var h=s.getCaret();s.val(s.getMasked()),s.setCaret(h)}},r.init(!e.is("input"))};t.maskWatchers={};var n=function(){var n=t(this),s={},o=n.attr("data-mask");if(n.attr("data-mask-reverse")&&(s.reverse=!0),n.attr("data-mask-clearifnotmatch")&&(s.clearIfNotMatch=!0),"true"===n.attr("data-mask-selectonfocus")&&(s.selectOnFocus=!0),i(n,o,s))return n.data("mask",new e(this,o,s))},i=function(e,n,i){i=i||{};var s=t(e).data("mask"),o=JSON.stringify,r=t(e).val()||t(e).text();try{return"function"==typeof n&&(n=n(r)),"object"!=typeof s||o(s.options)!==o(i)||s.mask!==n}catch(t){}};t.fn.mask=function(n,s){s=s||{};var o=this.selector,r=t.jMaskGlobals,a=r.watchInterval,l=s.watchInputs||r.watchInputs,c=function(){if(i(this,n,s))return t(this).data("mask",new e(this,n,s))};return t(this).each(c),o&&""!==o&&l&&(clearInterval(t.maskWatchers[o]),t.maskWatchers[o]=setInterval((function(){t(document).find(o).each(c)}),a)),this},t.fn.masked=function(t){return this.data("mask").getMaskedVal(t)},t.fn.unmask=function(){return clearInterval(t.maskWatchers[this.selector]),delete t.maskWatchers[this.selector],this.each((function(){var e=t(this).data("mask");e&&e.remove().removeData("mask")}))},t.fn.cleanVal=function(){return this.data("mask").getCleanVal()},t.applyDataMask=function(e){((e=e||t.jMaskGlobals.maskElements)instanceof t?e:t(e)).filter(t.jMaskGlobals.dataMaskAttr).each(n)};var s,o,r,a={maskElements:"input,td,span,div",dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,keyStrokeCompensation:10,useInput:!/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent)&&(s="input",r=document.createElement("div"),(o=(s="on"+s)in r)||(r.setAttribute(s,"return;"),o="function"==typeof r[s]),r=null,o),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};t.jMaskGlobals=t.jMaskGlobals||{},(a=t.jMaskGlobals=t.extend(!0,{},a,t.jMaskGlobals)).dataMask&&t.applyDataMask(),setInterval((function(){t.jMaskGlobals.watchDataMask&&t.applyDataMask()}),a.watchInterval)})?s.apply(e,o):s)||(t.exports=r)}).call(this,n(0))},function(t,e,n){var i,s,o;s=[n(0),n(1)],void 0===(o="function"==typeof(i=function(t){return function(){function e(t){return t.replace(/<.[^<>]*?>/g," ").replace(/&nbsp;|&#160;/gi," ").replace(/[.(),;:!?%#$'\"_+=\/\-âââ]*/g,"")}t.validator.addMethod("maxWords",(function(t,n,i){return this.optional(n)||e(t).match(/\b\w+\b/g).length<=i}),t.validator.format("Please enter {0} words or less.")),t.validator.addMethod("minWords",(function(t,n,i){return this.optional(n)||e(t).match(/\b\w+\b/g).length>=i}),t.validator.format("Please enter at least {0} words.")),t.validator.addMethod("rangeWords",(function(t,n,i){var s=e(t),o=/\b\w+\b/g;return this.optional(n)||s.match(o).length>=i[0]&&s.match(o).length<=i[1]}),t.validator.format("Please enter between {0} and {1} words."))}(),t.validator.addMethod("abaRoutingNumber",(function(t){var e=0,n=t.split(""),i=n.length;if(9!==i)return!1;for(var s=0;s<i;s+=3)e+=3*parseInt(n[s],10)+7*parseInt(n[s+1],10)+parseInt(n[s+2],10);return 0!==e&&e%10==0}),"Please enter a valid routing number."),t.validator.addMethod("accept",(function(e,n,i){var s,o,r="string"==typeof i?i.replace(/\s/g,""):"image/*",a=this.optional(n);if(a)return a;if("file"===t(n).attr("type")&&(r=r.replace(/[\-\[\]\/\{\}\(\)\+\?\.\\\^\$\|]/g,"\\$&").replace(/,/g,"|").replace(/\/\*/g,"/.*"),n.files&&n.files.length))for(o=new RegExp(".?("+r+")$","i"),s=0;s<n.files.length;s++)if(!n.files[s].type.match(o))return!1;return!0}),t.validator.format("Please enter a value with a valid mimetype.")),t.validator.addMethod("alphanumeric",(function(t,e){return this.optional(e)||/^\w+$/i.test(t)}),"Letters, numbers, and underscores only please"),t.validator.addMethod("bankaccountNL",(function(t,e){if(this.optional(e))return!0;if(!/^[0-9]{9}|([0-9]{2} ){3}[0-9]{3}$/.test(t))return!1;var n,i=t.replace(/ /g,""),s=0,o=i.length;for(n=0;n<o;n++)s+=(o-n)*i.substring(n,n+1);return s%11==0}),"Please specify a valid bank account number"),t.validator.addMethod("bankorgiroaccountNL",(function(e,n){return this.optional(n)||t.validator.methods.bankaccountNL.call(this,e,n)||t.validator.methods.giroaccountNL.call(this,e,n)}),"Please specify a valid bank or giro account number"),t.validator.addMethod("bic",(function(t,e){return this.optional(e)||/^([A-Z]{6}[A-Z2-9][A-NP-Z1-9])(X{3}|[A-WY-Z0-9][A-Z0-9]{2})?$/.test(t.toUpperCase())}),"Please specify a valid BIC code"),t.validator.addMethod("cifES",(function(t,e){"use strict";if(this.optional(e))return!0;var n,i,s,o,r=new RegExp(/^([ABCDEFGHJKLMNPQRSUVW])(\d{7})([0-9A-J])$/gi),a=t.substring(0,1),l=t.substring(1,8),c=t.substring(8,9),u=0,h=0;function d(t){return t%2==0}if(9!==t.length||!r.test(t))return!1;for(n=0;n<l.length;n++)i=parseInt(l[n],10),d(n)?h+=(i*=2)<10?i:i-9:u+=i;return s=(10-(u+h).toString().substr(-1)).toString(),s=parseInt(s,10)>9?"0":s,o="JABCDEFGHI".substr(s,1).toString(),a.match(/[ABEH]/)?c===s:a.match(/[KPQS]/)?c===o:c===s||c===o}),"Please specify a valid CIF number."),t.validator.addMethod("cnhBR",(function(t){if(11!==(t=t.replace(/([~!@#$%^&*()_+=`{}\[\]\-|\\:;'<>,.\/? ])+/g,"")).length)return!1;var e,n,i,s,o,r=0,a=0;if(e=t.charAt(0),new Array(12).join(e)===t)return!1;for(s=0,o=9;s<9;++s,--o)r+=+t.charAt(s)*o;for((n=r%11)>=10&&(n=0,a=2),r=0,s=0,o=1;s<9;++s,++o)r+=+t.charAt(s)*o;return(i=r%11)>=10?i=0:i-=a,String(n).concat(i)===t.substr(-2)}),"Please specify a valid CNH number"),t.validator.addMethod("cnpjBR",(function(t,e){"use strict";if(this.optional(e))return!0;if(14!==(t=t.replace(/[^\d]+/g,"")).length)return!1;if("00000000000000"===t||"11111111111111"===t||"22222222222222"===t||"33333333333333"===t||"44444444444444"===t||"55555555555555"===t||"66666666666666"===t||"77777777777777"===t||"88888888888888"===t||"99999999999999"===t)return!1;for(var n=t.length-2,i=t.substring(0,n),s=t.substring(n),o=0,r=n-7,a=n;a>=1;a--)o+=i.charAt(n-a)*r--,r<2&&(r=9);var l=o%11<2?0:11-o%11;if(l!==parseInt(s.charAt(0),10))return!1;n+=1,i=t.substring(0,n),o=0,r=n-7;for(var c=n;c>=1;c--)o+=i.charAt(n-c)*r--,r<2&&(r=9);return(l=o%11<2?0:11-o%11)===parseInt(s.charAt(1),10)}),"Please specify a CNPJ value number"),t.validator.addMethod("cpfBR",(function(t,e){"use strict";if(this.optional(e))return!0;if(11!==(t=t.replace(/([~!@#$%^&*()_+=`{}\[\]\-|\\:;'<>,.\/? ])+/g,"")).length)return!1;var n,i,s,o,r=0;if(n=parseInt(t.substring(9,10),10),i=parseInt(t.substring(10,11),10),s=function(t,e){var n=10*t%11;return 10!==n&&11!==n||(n=0),n===e},""===t||"00000000000"===t||"11111111111"===t||"22222222222"===t||"33333333333"===t||"44444444444"===t||"55555555555"===t||"66666666666"===t||"77777777777"===t||"88888888888"===t||"99999999999"===t)return!1;for(o=1;o<=9;o++)r+=parseInt(t.substring(o-1,o),10)*(11-o);if(s(r,n)){for(r=0,o=1;o<=10;o++)r+=parseInt(t.substring(o-1,o),10)*(12-o);return s(r,i)}return!1}),"Please specify a valid CPF number"),t.validator.addMethod("creditcard",(function(t,e){if(this.optional(e))return"dependency-mismatch";if(/[^0-9 \-]+/.test(t))return!1;var n,i,s=0,o=0,r=!1;if((t=t.replace(/\D/g,"")).length<13||t.length>19)return!1;for(n=t.length-1;n>=0;n--)i=t.charAt(n),o=parseInt(i,10),r&&(o*=2)>9&&(o-=9),s+=o,r=!r;return s%10==0}),"Please enter a valid credit card number."),t.validator.addMethod("creditcardtypes",(function(t,e,n){if(/[^0-9\-]+/.test(t))return!1;t=t.replace(/\D/g,"");var i=0;return n.mastercard&&(i|=1),n.visa&&(i|=2),n.amex&&(i|=4),n.dinersclub&&(i|=8),n.enroute&&(i|=16),n.discover&&(i|=32),n.jcb&&(i|=64),n.unknown&&(i|=128),n.all&&(i=255),1&i&&(/^(5[12345])/.test(t)||/^(2[234567])/.test(t))?16===t.length:2&i&&/^(4)/.test(t)?16===t.length:4&i&&/^(3[47])/.test(t)?15===t.length:8&i&&/^(3(0[012345]|[68]))/.test(t)?14===t.length:16&i&&/^(2(014|149))/.test(t)?15===t.length:32&i&&/^(6011)/.test(t)?16===t.length:64&i&&/^(3)/.test(t)?16===t.length:64&i&&/^(2131|1800)/.test(t)?15===t.length:!!(128&i)}),"Please enter a valid credit card number."),t.validator.addMethod("currency",(function(t,e,n){var i,s="string"==typeof n,o=s?n:n[0],r=!!s||n[1];return o=o.replace(/,/g,""),i="^["+(o=r?o+"]":o+"]?")+"([1-9]{1}[0-9]{0,2}(\\,[0-9]{3})*(\\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\\.[0-9]{0,2})?|0(\\.[0-9]{0,2})?|(\\.[0-9]{1,2})?)$",i=new RegExp(i),this.optional(e)||i.test(t)}),"Please specify a valid currency"),t.validator.addMethod("dateFA",(function(t,e){return this.optional(e)||/^[1-4]\d{3}\/((0?[1-6]\/((3[0-1])|([1-2][0-9])|(0?[1-9])))|((1[0-2]|(0?[7-9]))\/(30|([1-2][0-9])|(0?[1-9]))))$/.test(t)}),t.validator.messages.date),t.validator.addMethod("dateITA",(function(t,e){var n,i,s,o,r,a=!1;return/^\d{1,2}\/\d{1,2}\/\d{4}$/.test(t)?(n=t.split("/"),i=parseInt(n[0],10),s=parseInt(n[1],10),o=parseInt(n[2],10),a=(r=new Date(Date.UTC(o,s-1,i,12,0,0,0))).getUTCFullYear()===o&&r.getUTCMonth()===s-1&&r.getUTCDate()===i):a=!1,this.optional(e)||a}),t.validator.messages.date),t.validator.addMethod("dateNL",(function(t,e){return this.optional(e)||/^(0?[1-9]|[12]\d|3[01])[\.\/\-](0?[1-9]|1[012])[\.\/\-]([12]\d)?(\d\d)$/.test(t)}),t.validator.messages.date),t.validator.addMethod("extension",(function(t,e,n){return n="string"==typeof n?n.replace(/,/g,"|"):"png|jpe?g|gif",this.optional(e)||t.match(new RegExp("\\.("+n+")$","i"))}),t.validator.format("Please enter a value with a valid extension.")),t.validator.addMethod("giroaccountNL",(function(t,e){return this.optional(e)||/^[0-9]{1,7}$/.test(t)}),"Please specify a valid giro account number"),t.validator.addMethod("greaterThan",(function(e,n,i){var s=t(i);return this.settings.onfocusout&&s.not(".validate-greaterThan-blur").length&&s.addClass("validate-greaterThan-blur").on("blur.validate-greaterThan",(function(){t(n).valid()})),e>s.val()}),"Please enter a greater value."),t.validator.addMethod("greaterThanEqual",(function(e,n,i){var s=t(i);return this.settings.onfocusout&&s.not(".validate-greaterThanEqual-blur").length&&s.addClass("validate-greaterThanEqual-blur").on("blur.validate-greaterThanEqual",(function(){t(n).valid()})),e>=s.val()}),"Please enter a greater value."),t.validator.addMethod("iban",(function(t,e){if(this.optional(e))return!0;var n,i,s,o,r,a=t.replace(/ /g,"").toUpperCase(),l="",c=!0,u="";if(a.length<5)return!1;if(void 0!==(s={AL:"\\d{8}[\\dA-Z]{16}",AD:"\\d{8}[\\dA-Z]{12}",AT:"\\d{16}",AZ:"[\\dA-Z]{4}\\d{20}",BE:"\\d{12}",BH:"[A-Z]{4}[\\dA-Z]{14}",BA:"\\d{16}",BR:"\\d{23}[A-Z][\\dA-Z]",BG:"[A-Z]{4}\\d{6}[\\dA-Z]{8}",CR:"\\d{17}",HR:"\\d{17}",CY:"\\d{8}[\\dA-Z]{16}",CZ:"\\d{20}",DK:"\\d{14}",DO:"[A-Z]{4}\\d{20}",EE:"\\d{16}",FO:"\\d{14}",FI:"\\d{14}",FR:"\\d{10}[\\dA-Z]{11}\\d{2}",GE:"[\\dA-Z]{2}\\d{16}",DE:"\\d{18}",GI:"[A-Z]{4}[\\dA-Z]{15}",GR:"\\d{7}[\\dA-Z]{16}",GL:"\\d{14}",GT:"[\\dA-Z]{4}[\\dA-Z]{20}",HU:"\\d{24}",IS:"\\d{22}",IE:"[\\dA-Z]{4}\\d{14}",IL:"\\d{19}",IT:"[A-Z]\\d{10}[\\dA-Z]{12}",KZ:"\\d{3}[\\dA-Z]{13}",KW:"[A-Z]{4}[\\dA-Z]{22}",LV:"[A-Z]{4}[\\dA-Z]{13}",LB:"\\d{4}[\\dA-Z]{20}",LI:"\\d{5}[\\dA-Z]{12}",LT:"\\d{16}",LU:"\\d{3}[\\dA-Z]{13}",MK:"\\d{3}[\\dA-Z]{10}\\d{2}",MT:"[A-Z]{4}\\d{5}[\\dA-Z]{18}",MR:"\\d{23}",MU:"[A-Z]{4}\\d{19}[A-Z]{3}",MC:"\\d{10}[\\dA-Z]{11}\\d{2}",MD:"[\\dA-Z]{2}\\d{18}",ME:"\\d{18}",NL:"[A-Z]{4}\\d{10}",NO:"\\d{11}",PK:"[\\dA-Z]{4}\\d{16}",PS:"[\\dA-Z]{4}\\d{21}",PL:"\\d{24}",PT:"\\d{21}",RO:"[A-Z]{4}[\\dA-Z]{16}",SM:"[A-Z]\\d{10}[\\dA-Z]{12}",SA:"\\d{2}[\\dA-Z]{18}",RS:"\\d{18}",SK:"\\d{20}",SI:"\\d{15}",ES:"\\d{20}",SE:"\\d{20}",CH:"\\d{5}[\\dA-Z]{12}",TN:"\\d{20}",TR:"\\d{5}[\\dA-Z]{17}",AE:"\\d{3}\\d{16}",GB:"[A-Z]{4}\\d{14}",VG:"[\\dA-Z]{4}\\d{16}"}[a.substring(0,2)])&&!new RegExp("^[A-Z]{2}\\d{2}"+s+"$","").test(a))return!1;for(n=a.substring(4,a.length)+a.substring(0,4),o=0;o<n.length;o++)"0"!==(i=n.charAt(o))&&(c=!1),c||(l+="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(i));for(r=0;r<l.length;r++)u=(""+u+l.charAt(r))%97;return 1===u}),"Please specify a valid IBAN"),t.validator.addMethod("integer",(function(t,e){return this.optional(e)||/^-?\d+$/.test(t)}),"A positive or negative non-decimal number please"),t.validator.addMethod("ipv4",(function(t,e){return this.optional(e)||/^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/i.test(t)}),"Please enter a valid IP v4 address."),t.validator.addMethod("ipv6",(function(t,e){return this.optional(e)||/^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(t)}),"Please enter a valid IP v6 address."),t.validator.addMethod("lessThan",(function(e,n,i){var s=t(i);return this.settings.onfocusout&&s.not(".validate-lessThan-blur").length&&s.addClass("validate-lessThan-blur").on("blur.validate-lessThan",(function(){t(n).valid()})),e<s.val()}),"Please enter a lesser value."),t.validator.addMethod("lessThanEqual",(function(e,n,i){var s=t(i);return this.settings.onfocusout&&s.not(".validate-lessThanEqual-blur").length&&s.addClass("validate-lessThanEqual-blur").on("blur.validate-lessThanEqual",(function(){t(n).valid()})),e<=s.val()}),"Please enter a lesser value."),t.validator.addMethod("lettersonly",(function(t,e){return this.optional(e)||/^[a-z]+$/i.test(t)}),"Letters only please"),t.validator.addMethod("letterswithbasicpunc",(function(t,e){return this.optional(e)||/^[a-z\-.,()'"\s]+$/i.test(t)}),"Letters or punctuation only please"),t.validator.addMethod("maxfiles",(function(e,n,i){return!!this.optional(n)||!("file"===t(n).attr("type")&&n.files&&n.files.length>i)}),t.validator.format("Please select no more than {0} files.")),t.validator.addMethod("maxsize",(function(e,n,i){if(this.optional(n))return!0;if("file"===t(n).attr("type")&&n.files&&n.files.length)for(var s=0;s<n.files.length;s++)if(n.files[s].size>i)return!1;return!0}),t.validator.format("File size must not exceed {0} bytes each.")),t.validator.addMethod("maxsizetotal",(function(e,n,i){if(this.optional(n))return!0;if("file"===t(n).attr("type")&&n.files&&n.files.length)for(var s=0,o=0;o<n.files.length;o++)if((s+=n.files[o].size)>i)return!1;return!0}),t.validator.format("Total size of all files must not exceed {0} bytes.")),t.validator.addMethod("mobileNL",(function(t,e){return this.optional(e)||/^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)6((\s|\s?\-\s?)?[0-9]){8}$/.test(t)}),"Please specify a valid mobile number"),t.validator.addMethod("mobileRU",(function(t,e){var n=t.replace(/\(|\)|\s+|-/g,"");return this.optional(e)||n.length>9&&/^((\+7|7|8)+([0-9]){10})$/.test(n)}),"Please specify a valid mobile number"),t.validator.addMethod("mobileUK",(function(t,e){return t=t.replace(/\(|\)|\s+|-/g,""),this.optional(e)||t.length>9&&t.match(/^(?:(?:(?:00\s?|\+)44\s?|0)7(?:[1345789]\d{2}|624)\s?\d{3}\s?\d{3})$/)}),"Please specify a valid mobile number"),t.validator.addMethod("netmask",(function(t,e){return this.optional(e)||/^(254|252|248|240|224|192|128)\.0\.0\.0|255\.(254|252|248|240|224|192|128|0)\.0\.0|255\.255\.(254|252|248|240|224|192|128|0)\.0|255\.255\.255\.(254|252|248|240|224|192|128|0)/i.test(t)}),"Please enter a valid netmask."),t.validator.addMethod("nieES",(function(t,e){"use strict";if(this.optional(e))return!0;var n,i=new RegExp(/^[MXYZ]{1}[0-9]{7,8}[TRWAGMYFPDXBNJZSQVHLCKET]{1}$/gi),s=t.substr(t.length-1).toUpperCase();return!((t=t.toString().toUpperCase()).length>10||t.length<9||!i.test(t))&&(n=9===(t=t.replace(/^[X]/,"0").replace(/^[Y]/,"1").replace(/^[Z]/,"2")).length?t.substr(0,8):t.substr(0,9),"TRWAGMYFPDXBNJZSQVHLCKET".charAt(parseInt(n,10)%23)===s)}),"Please specify a valid NIE number."),t.validator.addMethod("nifES",(function(t,e){"use strict";return!!this.optional(e)||!!(t=t.toUpperCase()).match("((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)")&&(/^[0-9]{8}[A-Z]{1}$/.test(t)?"TRWAGMYFPDXBNJZSQVHLCKE".charAt(t.substring(8,0)%23)===t.charAt(8):!!/^[KLM]{1}/.test(t)&&t[8]==="TRWAGMYFPDXBNJZSQVHLCKE".charAt(t.substring(8,1)%23))}),"Please specify a valid NIF number."),t.validator.addMethod("nipPL",(function(t){"use strict";if(10!==(t=t.replace(/[^0-9]/g,"")).length)return!1;for(var e=[6,5,7,2,3,4,5,6,7],n=0,i=0;i<9;i++)n+=e[i]*t[i];var s=n%11;return(10===s?0:s)===parseInt(t[9],10)}),"Please specify a valid NIP number."),t.validator.addMethod("nisBR",(function(t){var e,n,i,s,o,r=0;if(11!==(t=t.replace(/([~!@#$%^&*()_+=`{}\[\]\-|\\:;'<>,.\/? ])+/g,"")).length)return!1;for(n=parseInt(t.substring(10,11),10),e=parseInt(t.substring(0,10),10),s=2;s<12;s++)o=s,10===s&&(o=2),11===s&&(o=3),r+=e%10*o,e=parseInt(e/10,10);return n===(i=(i=r%11)>1?11-i:0)}),"Please specify a valid NIS/PIS number"),t.validator.addMethod("notEqualTo",(function(e,n,i){return this.optional(n)||!t.validator.methods.equalTo.call(this,e,n,i)}),"Please enter a different value, values must not be the same."),t.validator.addMethod("nowhitespace",(function(t,e){return this.optional(e)||/^\S+$/i.test(t)}),"No white space please"),t.validator.addMethod("pattern",(function(t,e,n){return!!this.optional(e)||("string"==typeof n&&(n=new RegExp("^(?:"+n+")$")),n.test(t))}),"Invalid format."),t.validator.addMethod("phoneNL",(function(t,e){return this.optional(e)||/^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)[1-9]((\s|\s?\-\s?)?[0-9]){8}$/.test(t)}),"Please specify a valid phone number."),t.validator.addMethod("phonePL",(function(t,e){return t=t.replace(/\s+/g,""),this.optional(e)||/^(?:(?:(?:\+|00)?48)|(?:\(\+?48\)))?(?:1[2-8]|2[2-69]|3[2-49]|4[1-68]|5[0-9]|6[0-35-9]|[7-8][1-9]|9[145])\d{7}$/.test(t)}),"Please specify a valid phone number"),t.validator.addMethod("phonesUK",(function(t,e){return t=t.replace(/\(|\)|\s+|-/g,""),this.optional(e)||t.length>9&&t.match(/^(?:(?:(?:00\s?|\+)44\s?|0)(?:1\d{8,9}|[23]\d{9}|7(?:[1345789]\d{8}|624\d{6})))$/)}),"Please specify a valid uk phone number"),t.validator.addMethod("phoneUK",(function(t,e){return t=t.replace(/\(|\)|\s+|-/g,""),this.optional(e)||t.length>9&&t.match(/^(?:(?:(?:00\s?|\+)44\s?)|(?:\(?0))(?:\d{2}\)?\s?\d{4}\s?\d{4}|\d{3}\)?\s?\d{3}\s?\d{3,4}|\d{4}\)?\s?(?:\d{5}|\d{3}\s?\d{3})|\d{5}\)?\s?\d{4,5})$/)}),"Please specify a valid phone number"),t.validator.addMethod("phoneUS",(function(t,e){return t=t.replace(/\s+/g,""),this.optional(e)||t.length>9&&t.match(/^(\+?1-?)?(\([2-9]([02-9]\d|1[02-9])\)|[2-9]([02-9]\d|1[02-9]))-?[2-9]\d{2}-?\d{4}$/)}),"Please specify a valid phone number"),t.validator.addMethod("postalcodeBR",(function(t,e){return this.optional(e)||/^\d{2}.\d{3}-\d{3}?$|^\d{5}-?\d{3}?$/.test(t)}),"Informe um CEP vÃ¡lido."),t.validator.addMethod("postalCodeCA",(function(t,e){return this.optional(e)||/^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJKLMNPRSTVWXYZ] *\d[ABCEGHJKLMNPRSTVWXYZ]\d$/i.test(t)}),"Please specify a valid postal code"),t.validator.addMethod("postalcodeIT",(function(t,e){return this.optional(e)||/^\d{5}$/.test(t)}),"Please specify a valid postal code"),t.validator.addMethod("postalcodeNL",(function(t,e){return this.optional(e)||/^[1-9][0-9]{3}\s?[a-zA-Z]{2}$/.test(t)}),"Please specify a valid postal code"),t.validator.addMethod("postcodeUK",(function(t,e){return this.optional(e)||/^((([A-PR-UWYZ][0-9])|([A-PR-UWYZ][0-9][0-9])|([A-PR-UWYZ][A-HK-Y][0-9])|([A-PR-UWYZ][A-HK-Y][0-9][0-9])|([A-PR-UWYZ][0-9][A-HJKSTUW])|([A-PR-UWYZ][A-HK-Y][0-9][ABEHMNPRVWXY]))\s?([0-9][ABD-HJLNP-UW-Z]{2})|(GIR)\s?(0AA))$/i.test(t)}),"Please specify a valid UK postcode"),t.validator.addMethod("require_from_group",(function(e,n,i){var s=t(i[1],n.form),o=s.eq(0),r=o.data("valid_req_grp")?o.data("valid_req_grp"):t.extend({},this),a=s.filter((function(){return r.elementValue(this)})).length>=i[0];return o.data("valid_req_grp",r),t(n).data("being_validated")||(s.data("being_validated",!0),s.each((function(){r.element(this)})),s.data("being_validated",!1)),a}),t.validator.format("Please fill at least {0} of these fields.")),t.validator.addMethod("skip_or_fill_minimum",(function(e,n,i){var s=t(i[1],n.form),o=s.eq(0),r=o.data("valid_skip")?o.data("valid_skip"):t.extend({},this),a=s.filter((function(){return r.elementValue(this)})).length,l=0===a||a>=i[0];return o.data("valid_skip",r),t(n).data("being_validated")||(s.data("being_validated",!0),s.each((function(){r.element(this)})),s.data("being_validated",!1)),l}),t.validator.format("Please either skip these fields or fill at least {0} of them.")),t.validator.addMethod("stateUS",(function(t,e,n){var i,s=void 0===n,o=!s&&void 0!==n.caseSensitive&&n.caseSensitive,r=!s&&void 0!==n.includeTerritories&&n.includeTerritories,a=!s&&void 0!==n.includeMilitary&&n.includeMilitary;return i=r||a?r&&a?"^(A[AEKLPRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$":r?"^(A[KLRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$":"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$":"^(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$",i=o?new RegExp(i):new RegExp(i,"i"),this.optional(e)||i.test(t)}),"Please specify a valid state"),t.validator.addMethod("strippedminlength",(function(e,n,i){return t(e).text().length>=i}),t.validator.format("Please enter at least {0} characters")),t.validator.addMethod("time",(function(t,e){return this.optional(e)||/^([01]\d|2[0-3]|[0-9])(:[0-5]\d){1,2}$/.test(t)}),"Please enter a valid time, between 00:00 and 23:59"),t.validator.addMethod("time12h",(function(t,e){return this.optional(e)||/^((0?[1-9]|1[012])(:[0-5]\d){1,2}(\ ?[AP]M))$/i.test(t)}),"Please enter a valid time in 12-hour am/pm format"),t.validator.addMethod("url2",(function(t,e){return this.optional(e)||/^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)*(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(t)}),t.validator.messages.url),t.validator.addMethod("vinUS",(function(t){if(17!==t.length)return!1;var e,n,i,s,o,r,a=["A","B","C","D","E","F","G","H","J","K","L","M","N","P","R","S","T","U","V","W","X","Y","Z"],l=[1,2,3,4,5,6,7,8,1,2,3,4,5,7,9,2,3,4,5,6,7,8,9],c=[8,7,6,5,4,3,2,10,0,9,8,7,6,5,4,3,2],u=0;for(e=0;e<17;e++){if(s=c[e],i=t.slice(e,e+1),8===e&&(r=i),isNaN(i)){for(n=0;n<a.length;n++)if(i.toUpperCase()===a[n]){i=l[n],i*=s,isNaN(r)&&8===n&&(r=a[n]);break}}else i*=s;u+=i}return 10==(o=u%11)&&(o="X"),o===r}),"The specified vehicle identification number (VIN) is invalid."),t.validator.addMethod("zipcodeUS",(function(t,e){return this.optional(e)||/^\d{5}(-\d{4})?$/.test(t)}),"The specified US ZIP Code is invalid"),t.validator.addMethod("ziprange",(function(t,e){return this.optional(e)||/^90[2-5]\d\{2\}-\d{4}$/.test(t)}),"Your ZIP-code must be in the range 902xx-xxxx to 905xx-xxxx"),t})?i.apply(e,s):i)||(t.exports=o)},function(t,e,n){var i,s,o;s=[n(0),n(1)],void 0===(o="function"==typeof(i=function(t){return t.extend(t.validator.messages,{required:"Ð¦Ðµ Ð¿Ð¾Ð»Ðµ Ð½ÐµÐ¾Ð±ÑÑÐ´Ð½Ð¾ Ð·Ð°Ð¿Ð¾Ð²Ð½Ð¸ÑÐ¸.",remote:"ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ°, Ð²Ð²ÐµÐ´ÑÑÑ Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ðµ Ð·Ð½Ð°ÑÐµÐ½Ð½Ñ.",email:"ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ°, Ð²Ð²ÐµÐ´ÑÑÑ ÐºÐ¾ÑÐµÐºÑÐ½Ñ Ð°Ð´ÑÐµÑÑ ÐµÐ»ÐµÐºÑÑÐ¾Ð½Ð½Ð¾Ñ Ð¿Ð¾ÑÑÐ¸.",url:"ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ°, Ð²Ð²ÐµÐ´ÑÑÑ ÐºÐ¾ÑÐµÐºÑÐ½Ð¸Ð¹ URL.",date:"ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ°, Ð²Ð²ÐµÐ´ÑÑÑ ÐºÐ¾ÑÐµÐºÑÐ½Ñ Ð´Ð°ÑÑ.",dateISO:"ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ°, Ð²Ð²ÐµÐ´ÑÑÑ ÐºÐ¾ÑÐµÐºÑÐ½Ñ Ð´Ð°ÑÑ Ñ ÑÐ¾ÑÐ¼Ð°ÑÑ ISO.",number:"ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ°, Ð²Ð²ÐµÐ´ÑÑÑ ÑÐ¸ÑÐ»Ð¾.",digits:"ÐÐ²Ð¾Ð´Ð¸ÑÐµ Ð¿Ð¾ÑÑÑÐ±Ð½Ð¾ Ð»Ð¸ÑÐµ ÑÐ¸ÑÑÐ¸.",creditcard:"ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ°, Ð²Ð²ÐµÐ´ÑÑÑ Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¸Ð¹ Ð½Ð¾Ð¼ÐµÑ ÐºÑÐµÐ´Ð¸ÑÐ½Ð¾Ñ ÐºÐ°ÑÑÐ¸.",equalTo:"ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ°, Ð²Ð²ÐµÐ´ÑÑÑ ÑÐ°ÐºÐµ Ð¶ Ð·Ð½Ð°ÑÐµÐ½Ð½Ñ ÑÐµ ÑÐ°Ð·.",extension:"ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ°, Ð²Ð¸Ð±ÐµÑÑÑÑ ÑÐ°Ð¹Ð» Ð· Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¸Ð¼ ÑÐ¾Ð·ÑÐ¸ÑÐµÐ½Ð½ÑÐ¼.",maxlength:t.validator.format("ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ°, Ð²Ð²ÐµÐ´ÑÑÑ Ð½Ðµ Ð±ÑÐ»ÑÑÐµ {0} ÑÐ¸Ð¼Ð²Ð¾Ð»ÑÐ²."),minlength:t.validator.format("ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ°, Ð²Ð²ÐµÐ´ÑÑÑ Ð½Ðµ Ð¼ÐµÐ½ÑÐµ {0} ÑÐ¸Ð¼Ð²Ð¾Ð»ÑÐ²."),rangelength:t.validator.format("ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ°, Ð²Ð²ÐµÐ´ÑÑÑ Ð·Ð½Ð°ÑÐµÐ½Ð½Ñ Ð´Ð¾Ð²Ð¶Ð¸Ð½Ð¾Ñ Ð²ÑÐ´ {0} Ð´Ð¾ {1} ÑÐ¸Ð¼Ð²Ð¾Ð»ÑÐ²."),range:t.validator.format("ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ°, Ð²Ð²ÐµÐ´ÑÑÑ ÑÐ¸ÑÐ»Ð¾ Ð²ÑÐ´ {0} Ð´Ð¾ {1}."),max:t.validator.format("ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ°, Ð²Ð²ÐµÐ´ÑÑÑ ÑÐ¸ÑÐ»Ð¾, Ð¼ÐµÐ½ÑÐµ Ð°Ð±Ð¾ ÑÑÐ²Ð½Ð¾ {0}."),min:t.validator.format("ÐÑÐ´Ñ Ð»Ð°ÑÐºÐ°, Ð²Ð²ÐµÐ´ÑÑÑ ÑÐ¸ÑÐ»Ð¾, Ð±ÑÐ»ÑÑÐµ Ð°Ð±Ð¾ ÑÑÐ²Ð½Ð¾ {0}.")}),t})?i.apply(e,s):i)||(t.exports=o)},function(t,e,n){"use strict";n.r(e);var i=n(0);const s=(t=>{const e={block:"custom-select",hideCallback:!1,includeValue:!1,keyboard:!0,modifier:!1,placeholder:!1,search:!1,showCallback:!1,transition:0};class n{constructor(n,i){this._$select=t(n),this._options={...e,..."object"==typeof i?i:{}},this._activeModifier=`${this._options.block}--active`,this._dropupModifier=`${this._options.block}--dropup`,this._optionSelectedModifier=`${this._options.block}__option--selected`,this._keydown=this._keydown.bind(this),this._dropup=this._dropup.bind(this),this._outside=this._outside.bind(this),this._init()}reset(){this._$dropdown.hide().empty(),this._$value.off("click"),this._fill()}_init(){this._$element=t(`<div class="${this._options.block}">\n           <button class="${this._options.block}__option ${this._options.block}__option--value" type="button"></button>\n           <div class="${this._options.block}__dropdown" style="display: none;"></div>\n         </div>`),this._$select.hide().after(this._$element),this._options.modifier&&this._$element.addClass(this._options.modifier),this._$value=this._$element.find(`.${this._options.block}__option--value`),this._$dropdown=this._$element.find(`.${this._options.block}__dropdown`),this._fill()}_fill(){this._$values=this._$select.find("option"),this._values=[];let e=this._options.placeholder;t.each(this._$values,(e,n)=>{const i=t(n).text().trim();this._values.push(i)}),e&&(this._$select.find("[selected]").length?e=!1:(this._$value.html(e),this._$select.prop("selectedIndex",-1))),t.each(this._values,(n,i)=>{const s=this._$values.eq(n).attr("class"),o=t(`<button class="${this._options.block}__option" type="button">${i}</button>`),r=this._$select.find(":selected");this._$values.eq(n).attr("disabled")&&o.prop("disabled",!0),!r.length&&0===n||i===r.text().trim()?(e||this._$value.text(i).removeClass(this._$value.data("class")).removeData("class").addClass(s).data("class",s),(this._options.includeValue||e)&&(o.addClass(s),o.toggleClass(this._optionSelectedModifier,this._$values.eq(n).is("[selected]")),this._$dropdown.append(o))):(o.addClass(s),this._$dropdown.append(o))}),this._$options=this._$dropdown.find(`.${this._options.block}__option`),this._options.search&&this._search(),this._$value.one("click",t=>{this._show(t)}),this._$value.prop("disabled",!this._$options.length),this._$options.on("click",t=>{this._select(t)})}_show(e){e.preventDefault(),this._dropup(),t(window).on("resize scroll",this._dropup),this._$element.addClass(this._activeModifier),this._$dropdown.slideDown(this._options.transition,()=>{this._options.search&&(this._$input.focus(),this._options.includeValue&&this._scroll()),"function"==typeof this._options.showCallback&&this._options.showCallback.call(this._$element[0])}),setTimeout(()=>{t(document).on("touchstart click",this._outside)},0),this._$value.one("click",t=>{t.preventDefault(),this._hide()}),this._options.keyboard&&(this._options.index=-1,t(window).on("keydown",this._keydown))}_hide(){this._options.search&&(this._$input.val("").blur(),this._$options.show(),this._$wrap.scrollTop(0)),this._$dropdown.slideUp(this._options.transition,()=>{this._$element.removeClass(this._activeModifier).removeClass(this._dropupModifier),"function"==typeof this._options.hideCallback&&this._options.hideCallback.call(this._$element[0]),this._$value.off("click").one("click",t=>{this._show(t)}),t(document).off("touchstart click",this._outside),t(window).off("resize scroll",this._dropup)}),this._options.keyboard&&(this._$options.blur(),t(window).off("keydown",this._keydown))}_scroll(){t.each(this._$options,(e,n)=>{const i=t(n);if(i.text()===this._$value.text()){const t=i.position().top,e=this._$wrap.outerHeight()/2-i.outerHeight()/2;return t>e&&this._$wrap.scrollTop(t-e),!1}})}_select(e){e.preventDefault();const n=t(e.currentTarget).text().trim(),i=[...this._values];if(this._$value.text(n).removeClass(this._$value.data("class")),this._$values.prop("selected",!1),t.each(i,(e,s)=>{this._options.includeValue||s!==n||i.splice(e,1),t.each(this._$values,(e,i)=>{const s=t(i);if(s.text().trim()===n){const t=s.attr("class");s.prop("selected",!0),this._$value.addClass(t).data("class",t)}})}),this._hide(),this._options.includeValue)this._$options.removeClass(this._optionSelectedModifier),t.each(this._$options,(e,i)=>{const s=t(i);if(s.text().trim()===n)return s.addClass(this._optionSelectedModifier),!1});else{if(this._$options.length>i.length){const t=this._$options.eq(i.length);t.remove(),this._$options=this._$options.not(t),this._$options.length||this._$value.prop("disabled",!0)}t.each(this._$options,(e,n)=>{const s=t(n);s.text(i[e]),s.attr("class",`${this._options.block}__option`),t.each(this._$values,(function(){const n=t(this);n.text().trim()===i[e]&&(s.addClass(n.attr("class")),s.prop("disabled",n.prop("disabled")))}))})}void 0!==e.originalEvent&&this._$select.trigger("change")}_search(){this._$input=t(`<input class="${this._options.block}__input" autocomplete="off">`),this._$dropdown.prepend(this._$input),this._$options.wrapAll(`<div class="${this._options.block}__option-wrap"></div>`),this._$wrap=this._$element.find(`.${this._options.block}__option-wrap`),this._$input.on("focus",()=>{this._options.index=-1}),this._$input.on("keyup",()=>{const e=this._$input.val().trim();e.length?(this._$wrap.scrollTop(0),setTimeout(()=>{e===this._$input.val().trim()&&t.each(this._$options,(n,i)=>{const s=t(i),o=-1!==s.text().trim().toLowerCase().indexOf(e.toLowerCase());s.toggle(o)})},300)):this._$options.show()})}_dropup(){const e=this._$element[0].getBoundingClientRect().bottom,n=t(window).height()-e<this._$dropdown.height();this._$element.toggleClass(this._dropupModifier,n)}_outside(e){const n=t(e.target);n.parents().is(this._$element)||n.is(this._$element)||this._hide()}_keydown(t){const e=this._$options.filter(":visible").not("[disabled]");switch(t.which){case 40:t.preventDefault(),e.eq(this._options.index+1).length?this._options.index+=1:this._options.index=0,e.eq(this._options.index).focus();break;case 38:t.preventDefault(),e.eq(this._options.index-1).length&&this._options.index-1>=0?this._options.index-=1:this._options.index=e.length-1,e.eq(this._options.index).focus();break;case 13:case 32:if(!this._$input||!this._$input.is(":focus")){t.preventDefault();const e=this._$options.add(this._$value).filter(":focus");e.trigger("click"),e.is(this._$value)||this._$select.trigger("change"),this._$value.focus()}break;case 27:t.preventDefault(),this._hide(),this._$value.focus()}}static _jQueryPlugin(e){return this.each((function(){const i=t(this);let s=i.data("custom-select");s?"reset"===e&&s.reset():"string"!=typeof e&&(s=new n(this,e),i.data("custom-select",s))}))}}return t.fn.customSelect=n._jQueryPlugin,t.fn.customSelect.noConflict=()=>t.fn.customSelect,n})(n.n(i).a);e.default=s}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,