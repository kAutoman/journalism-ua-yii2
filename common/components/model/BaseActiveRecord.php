<?php


namespace common\components\model;

use common\models\UserLog;
use yii\db\ActiveRecord;
use yii\helpers\Json;
use yii\web\Request;

class BaseActiveRecord extends ActiveRecord
{
    public $writeLog = true;

    public $ignoreAttributes = ['updated_at', 'created_at'];

    public function getIgnoreAttributes()
    {
        return $this->ignoreAttributes;
    }

    public function afterSave($insert, $changedAttributes)
    {
        if ($this->writeLog) {
            $this->addLog($insert, $changedAttributes);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }


    public function afterDelete()
    {
        if ($this->writeLog) {
            $this->addDeletLog();
        }
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    private function addLog($insert, $changedAttributes)
    {
        $log = new UserLog();
        $log->action = $insert ? UserLog::ACTION_CREATE : UserLog::ACTION_UPDATE;
        $log->model_class = $this::className();
        $primaryKey = $this->getPrimaryKey();
        $log->entity_id = is_array($primaryKey) ? Json::encode($primaryKey) : $primaryKey;
        $log->user_id = \Yii::$app->request instanceof Request ? \Yii::$app->user->getId() : null;


        if ($insert) {
            $log->content_before = null;
            $log->content_after = array_diff_key($this->getAttributes(), array_flip($this->getIgnoreAttributes()));

        } else {
            $oldAttributes = array_diff_key($changedAttributes, array_flip($this->getIgnoreAttributes()));

            if ($oldAttributes) {
                $log->content_before = $oldAttributes;
                $log->content_after = array_intersect_key($this->getAttributes(), $oldAttributes);

            }
        }
        $log->content_after = UserLog::encode($log->content_after);
        $log->content_before = UserLog::encode($log->content_before);
        $log->user_info = UserLog::encode($_SERVER);
        $log->save();
    }

    private function addDeletLog()
    {
        $log = new UserLog();
        $log->action = UserLog::ACTION_DELETE;
        $log->content_before = UserLog::encode(array_diff_key($this->getAttributes(), array_flip($this->getIgnoreAttributes())));
        $log->model_class = $this::className();
        $primaryKey = $this->getPrimaryKey();
        $log->entity_id = is_array($primaryKey) ? Json::encode($primaryKey) : $primaryKey;
        $log->user_id = \Yii::$app->request instanceof Request ? \Yii::$app->user->getId() : null;
        $log->user_info = UserLog::encode($_SERVER);
        $log->save();
    }
}
